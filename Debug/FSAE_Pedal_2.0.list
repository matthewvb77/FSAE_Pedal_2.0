
FSAE_Pedal_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800b000  0800b000  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a0  0800b0a0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a8  0800b0a8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0ac  0800b0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b0b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000094  0800b144  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800b144  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8fe  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a62  00000000  00000000  0003b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  0003f428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002534c  00000000  00000000  00041a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013571  00000000  00000000  00066de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d24e2  00000000  00000000  0007a355  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b30  00000000  00000000  0014c8b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afe4 	.word	0x0800afe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800afe4 	.word	0x0800afe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <map.10175>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t map(uint16_t percent, double stiffness, double regenThreshold){
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	e9c7 2300 	strd	r2, r3, [r7]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	81fb      	strh	r3, [r7, #14]
 8000ea8:	f8c7 c008 	str.w	ip, [r7, #8]

	  if(percent <= regenThreshold){
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fb38 	bl	8000524 <__aeabi_i2d>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ec0:	f7ff fe20 	bl	8000b04 <__aeabi_dcmpge>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <map.10175+0x36>
		  return 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e03b      	b.n	8000f46 <map.10175+0xae>
	  }

	  double temp = 100*pow((percent-regenThreshold)/(100-regenThreshold), stiffness);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fb27 	bl	8000524 <__aeabi_i2d>
 8000ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000eda:	f7ff f9d5 	bl	8000288 <__aeabi_dsub>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	4625      	mov	r5, r4
 8000ee4:	461c      	mov	r4, r3
 8000ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4918      	ldr	r1, [pc, #96]	; (8000f50 <map.10175+0xb8>)
 8000ef0:	f7ff f9ca 	bl	8000288 <__aeabi_dsub>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4620      	mov	r0, r4
 8000efa:	4629      	mov	r1, r5
 8000efc:	f7ff fca6 	bl	800084c <__aeabi_ddiv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	ec44 3b17 	vmov	d7, r3, r4
 8000f08:	ed97 1b00 	vldr	d1, [r7]
 8000f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f10:	eef0 0a67 	vmov.f32	s1, s15
 8000f14:	f009 f810 	bl	8009f38 <pow>
 8000f18:	ec51 0b10 	vmov	r0, r1, d0
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <map.10175+0xb8>)
 8000f22:	f7ff fb69 	bl	80005f8 <__aeabi_dmul>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	  temp = round(temp);
 8000f2e:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f32:	f008 ffb7 	bl	8009ea4 <round>
 8000f36:	ed87 0b04 	vstr	d0, [r7, #16]
	  return (uint16_t)temp;
 8000f3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f3e:	f7ff fe0b 	bl	8000b58 <__aeabi_d2uiz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29b      	uxth	r3, r3
  }
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40590000 	.word	0x40590000
 8000f54:	00000000 	.word	0x00000000

08000f58 <main>:
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b08d      	sub	sp, #52	; 0x34
 8000f5c:	af02      	add	r7, sp, #8
int main(void)
 8000f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f62:	60fb      	str	r3, [r7, #12]
  HAL_Init();
 8000f64:	f000 fd7c 	bl	8001a60 <HAL_Init>
  SystemClock_Config();
 8000f68:	f000 f884 	bl	8001074 <SystemClock_Config>
  MX_GPIO_Init();
 8000f6c:	f000 fa14 	bl	8001398 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f70:	f000 f954 	bl	800121c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f74:	f000 f980 	bl	8001278 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f78:	f000 f9ae 	bl	80012d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f7c:	f008 f842 	bl	8009004 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000f80:	f000 f8fa 	bl	8001178 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 f9de 	bl	8001344 <MX_USART2_UART_Init>

  /*Configurable Variables*/
  double stiffness = 2;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f90:	e9c7 3408 	strd	r3, r4, [r7, #32]
  double regenThreshold = 20;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	4c31      	ldr	r4, [pc, #196]	; (8001060 <main+0x108>)
 8000f9a:	e9c7 3406 	strd	r3, r4, [r7, #24]

  while (1)
  {

	  // Get ADC value
	  HAL_ADC_Start(&hadc1);
 8000f9e:	4831      	ldr	r0, [pc, #196]	; (8001064 <main+0x10c>)
 8000fa0:	f000 fe36 	bl	8001c10 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <main+0x10c>)
 8000faa:	f000 fef7 	bl	8001d9c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000fae:	482d      	ldr	r0, [pc, #180]	; (8001064 <main+0x10c>)
 8000fb0:	f000 ff78 	bl	8001ea4 <HAL_ADC_GetValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	82fb      	strh	r3, [r7, #22]

	  // Change the output into a percentage
	  percent = round((raw/4095.0)*100.0);
 8000fb8:	8afb      	ldrh	r3, [r7, #22]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fab2 	bl	8000524 <__aeabi_i2d>
 8000fc0:	a325      	add	r3, pc, #148	; (adr r3, 8001058 <main+0x100>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fc41 	bl	800084c <__aeabi_ddiv>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460c      	mov	r4, r1
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <main+0x110>)
 8000fd8:	f7ff fb0e 	bl	80005f8 <__aeabi_dmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	ec44 3b17 	vmov	d7, r3, r4
 8000fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe8:	eef0 0a67 	vmov.f32	s1, s15
 8000fec:	f008 ff5a 	bl	8009ea4 <round>
 8000ff0:	ec54 3b10 	vmov	r3, r4, d0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	f7ff fdae 	bl	8000b58 <__aeabi_d2uiz>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	82bb      	strh	r3, [r7, #20]
	  percent = 100 - percent;
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001006:	82bb      	strh	r3, [r7, #20]
	  val = map(percent, stiffness, regenThreshold);
 8001008:	8ab9      	ldrh	r1, [r7, #20]
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4694      	mov	ip, r2
 8001018:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800101c:	4608      	mov	r0, r1
 800101e:	f7ff ff3b 	bl	8000e98 <map.10175>
 8001022:	4603      	mov	r3, r0
 8001024:	827b      	strh	r3, [r7, #18]

	  // Convert to string and print
	  sprintf(msg, "%hu\r\n", val); // raw and percent are interchangeable
 8001026:	8a7a      	ldrh	r2, [r7, #18]
 8001028:	463b      	mov	r3, r7
 800102a:	4910      	ldr	r1, [pc, #64]	; (800106c <main+0x114>)
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fbeb 	bl	8009808 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001032:	463b      	mov	r3, r7
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff f8cb 	bl	80001d0 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	4639      	mov	r1, r7
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <main+0x118>)
 8001046:	f004 fd38 	bl	8005aba <HAL_UART_Transmit>

	  //Pretend we have something else to do for a while
	  HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fd7a 	bl	8001b44 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001050:	f007 fffe 	bl	8009050 <MX_USB_HOST_Process>
	  HAL_ADC_Start(&hadc1);
 8001054:	e7a3      	b.n	8000f9e <main+0x46>
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	40affe00 	.word	0x40affe00
 8001060:	40340000 	.word	0x40340000
 8001064:	20000118 	.word	0x20000118
 8001068:	40590000 	.word	0x40590000
 800106c:	0800b000 	.word	0x0800b000
 8001070:	200001b8 	.word	0x200001b8

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b098      	sub	sp, #96	; 0x60
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f008 fb00 	bl	8009688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <SystemClock_Config+0xfc>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <SystemClock_Config+0xfc>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <SystemClock_Config+0xfc>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <SystemClock_Config+0x100>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <SystemClock_Config+0x100>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <SystemClock_Config+0x100>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010de:	2301      	movs	r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001100:	2307      	movs	r3, #7
 8001102:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fe85 	bl	8004e18 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001114:	f000 fa46 	bl	80015a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001124:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2105      	movs	r1, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f004 f8de 	bl	80052f8 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001142:	f000 fa2f 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001146:	2301      	movs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fac0 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001162:	f000 fa1f 	bl	80015a4 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3760      	adds	r7, #96	; 0x60
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f000 fcd5 	bl	8001b88 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 f9de 	bl	80015a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f000 fe61 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 f9ce 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000118 	.word	0x20000118
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_I2C1_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_I2C1_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_I2C1_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_I2C1_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_I2C1_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_I2C1_Init+0x50>)
 800125a:	f003 f805 	bl	8004268 <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 f99e 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000c4 	.word	0x200000c4
 8001270:	40005400 	.word	0x40005400
 8001274:	000186a0 	.word	0x000186a0

08001278 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_I2S3_Init+0x54>)
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <MX_I2S3_Init+0x58>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2S3_Init+0x54>)
 8001284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001288:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_I2S3_Init+0x54>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2S3_Init+0x54>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_I2S3_Init+0x54>)
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_I2S3_Init+0x54>)
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <MX_I2S3_Init+0x5c>)
 80012a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2S3_Init+0x54>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_I2S3_Init+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2S3_Init+0x54>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_I2S3_Init+0x54>)
 80012b8:	f003 f90e 	bl	80044d8 <HAL_I2S_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80012c2:	f000 f96f 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001f8 	.word	0x200001f8
 80012d0:	40003c00 	.word	0x40003c00
 80012d4:	00017700 	.word	0x00017700

080012d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI1_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_SPI1_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI1_Init+0x64>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI1_Init+0x64>)
 800132a:	f004 fb15 	bl	8005958 <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001334:	f000 f936 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000160 	.word	0x20000160
 8001340:	40013000 	.word	0x40013000

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f004 fb50 	bl	8005a20 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f90d 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001b8 	.word	0x200001b8
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b75      	ldr	r3, [pc, #468]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a74      	ldr	r2, [pc, #464]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b72      	ldr	r3, [pc, #456]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a6d      	ldr	r2, [pc, #436]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a66      	ldr	r2, [pc, #408]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <MX_GPIO_Init+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b60      	ldr	r3, [pc, #384]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a5f      	ldr	r2, [pc, #380]	; (8001588 <MX_GPIO_Init+0x1f0>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b5d      	ldr	r3, [pc, #372]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b59      	ldr	r3, [pc, #356]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b52      	ldr	r3, [pc, #328]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a51      	ldr	r2, [pc, #324]	; (8001588 <MX_GPIO_Init+0x1f0>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <MX_GPIO_Init+0x1f0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2108      	movs	r1, #8
 800145a:	484c      	ldr	r0, [pc, #304]	; (800158c <MX_GPIO_Init+0x1f4>)
 800145c:	f001 f9fa 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2101      	movs	r1, #1
 8001464:	484a      	ldr	r0, [pc, #296]	; (8001590 <MX_GPIO_Init+0x1f8>)
 8001466:	f001 f9f5 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800146a:	2200      	movs	r2, #0
 800146c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001470:	4848      	ldr	r0, [pc, #288]	; (8001594 <MX_GPIO_Init+0x1fc>)
 8001472:	f001 f9ef 	bl	8002854 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147c:	4846      	ldr	r0, [pc, #280]	; (8001598 <MX_GPIO_Init+0x200>)
 800147e:	f001 f9e9 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001482:	2308      	movs	r3, #8
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	483c      	ldr	r0, [pc, #240]	; (800158c <MX_GPIO_Init+0x1f4>)
 800149a:	f001 f841 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4836      	ldr	r0, [pc, #216]	; (8001590 <MX_GPIO_Init+0x1f8>)
 80014b6:	f001 f833 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014ba:	2308      	movs	r3, #8
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ca:	2305      	movs	r3, #5
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	482e      	ldr	r0, [pc, #184]	; (8001590 <MX_GPIO_Init+0x1f8>)
 80014d6:	f001 f823 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014da:	2304      	movs	r3, #4
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	482b      	ldr	r0, [pc, #172]	; (800159c <MX_GPIO_Init+0x204>)
 80014ee:	f001 f817 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001504:	2305      	movs	r3, #5
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4619      	mov	r1, r3
 800150e:	4823      	ldr	r0, [pc, #140]	; (800159c <MX_GPIO_Init+0x204>)
 8001510:	f001 f806 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001514:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001518:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4819      	ldr	r0, [pc, #100]	; (8001594 <MX_GPIO_Init+0x1fc>)
 800152e:	f000 fff7 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <MX_GPIO_Init+0x200>)
 800154c:	f000 ffe8 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001550:	2320      	movs	r3, #32
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <MX_GPIO_Init+0x1fc>)
 8001564:	f000 ffdc 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001568:	2302      	movs	r3, #2
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_GPIO_Init+0x208>)
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_GPIO_Init+0x1f4>)
 800157c:	f000 ffd0 	bl	8002520 <HAL_GPIO_Init>

}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	; 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40021000 	.word	0x40021000
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	10120000 	.word	0x10120000

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015f2:	2007      	movs	r0, #7
 80015f4:	f000 ff52 	bl	800249c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_ADC_MspInit+0x7c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d127      	bne.n	8001676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_ADC_MspInit+0x80>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_ADC_MspInit+0x80>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_ADC_MspInit+0x80>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_ADC_MspInit+0x80>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_ADC_MspInit+0x80>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_ADC_MspInit+0x80>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165e:	2301      	movs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001662:	2303      	movs	r3, #3
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_ADC_MspInit+0x84>)
 8001672:	f000 ff55 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40012000 	.word	0x40012000
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <HAL_I2C_MspInit+0x8c>)
 80016e8:	f000 ff1a 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005400 	.word	0x40005400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_I2S_MspInit+0xc0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d14a      	bne.n	80017d4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_I2S_MspInit+0xc4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001792:	2310      	movs	r3, #16
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017a2:	2306      	movs	r3, #6
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <HAL_I2S_MspInit+0xc8>)
 80017ae:	f000 feb7 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017b2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c4:	2306      	movs	r3, #6
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <HAL_I2S_MspInit+0xcc>)
 80017d0:	f000 fea6 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40003c00 	.word	0x40003c00
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020800 	.word	0x40020800

080017ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_SPI_MspInit+0x84>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_SPI_MspInit+0x88>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_SPI_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001846:	23e0      	movs	r3, #224	; 0xe0
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001856:	2305      	movs	r3, #5
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_SPI_MspInit+0x8c>)
 8001862:	f000 fe5d 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40013000 	.word	0x40013000
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_UART_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12b      	bne.n	80018f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e6:	2307      	movs	r3, #7
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_UART_MspInit+0x8c>)
 80018f2:	f000 fe15 	bl	8002520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 f8d4 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <OTG_FS_IRQHandler+0x10>)
 8001966:	f001 fa1d 	bl	8002da4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000061c 	.word	0x2000061c

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f007 fe36 	bl	8009614 <__errno>
 80019a8:	4602      	mov	r2, r0
 80019aa:	230c      	movs	r3, #12
 80019ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20020000 	.word	0x20020000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	200000b0 	.word	0x200000b0
 80019dc:	200008e8 	.word	0x200008e8

080019e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <SystemInit+0x28>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <SystemInit+0x28>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SystemInit+0x28>)
 80019f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019fa:	609a      	str	r2, [r3, #8]
#endif
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a12:	e003      	b.n	8001a1c <LoopCopyDataInit>

08001a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a1a:	3104      	adds	r1, #4

08001a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a24:	d3f6      	bcc.n	8001a14 <CopyDataInit>
  ldr  r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a28:	e002      	b.n	8001a30 <LoopFillZerobss>

08001a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a2c:	f842 3b04 	str.w	r3, [r2], #4

08001a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a34:	d3f9      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a36:	f7ff ffd3 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f007 fdf1 	bl	8009620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fa8b 	bl	8000f58 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a48:	0800b0b0 	.word	0x0800b0b0
  ldr  r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a50:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001a54:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001a58:	200008e4 	.word	0x200008e4

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_Init+0x40>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_Init+0x40>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x40>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 fd07 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fd8e 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fd1f 	bl	8002506 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 fce7 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000240 	.word	0x20000240

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000240 	.word	0x20000240

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_Delay+0x40>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e033      	b.n	8001c06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fd2c 	bl	8001604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bce:	f023 0302 	bic.w	r3, r3, #2
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fa92 	bl	8002104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf6:	e001      	b.n	8001bfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Start+0x1a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0a5      	b.n	8001d76 <HAL_ADC_Start+0x166>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d018      	beq.n	8001c72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c50:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_ADC_Start+0x174>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_ADC_Start+0x178>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9a      	lsrs	r2, r3, #18
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d179      	bne.n	8001d74 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001caa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbe:	d106      	bne.n	8001cce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f023 0206 	bic.w	r2, r3, #6
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <HAL_ADC_Start+0x17c>)
 8001cde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12a      	bne.n	8001d4c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_ADC_Start+0x180>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d015      	beq.n	8001d2c <HAL_ADC_Start+0x11c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_ADC_Start+0x184>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d105      	bne.n	8001d16 <HAL_ADC_Start+0x106>
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_ADC_Start+0x17c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_ADC_Start+0x188>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d129      	bne.n	8001d74 <HAL_ADC_Start+0x164>
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_ADC_Start+0x17c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d823      	bhi.n	8001d74 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11c      	bne.n	8001d74 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	e013      	b.n	8001d74 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_ADC_Start+0x180>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10e      	bne.n	8001d74 <HAL_ADC_Start+0x164>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d72:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000
 8001d88:	431bde83 	.word	0x431bde83
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	40012100 	.word	0x40012100
 8001d98:	40012200 	.word	0x40012200

08001d9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d113      	bne.n	8001de2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d10b      	bne.n	8001de2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e05c      	b.n	8001e9c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001de2:	f7ff fea3 	bl	8001b2c <HAL_GetTick>
 8001de6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001de8:	e01a      	b.n	8001e20 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d016      	beq.n	8001e20 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_ADC_PollForConversion+0x6c>
 8001df8:	f7ff fe98 	bl	8001b2c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d20b      	bcs.n	8001e20 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e03d      	b.n	8001e9c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d1dd      	bne.n	8001dea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0212 	mvn.w	r2, #18
 8001e36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d123      	bne.n	8001e9a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11f      	bne.n	8001e9a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d111      	bne.n	8001e9a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e105      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x228>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d925      	bls.n	8001f38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68d9      	ldr	r1, [r3, #12]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	3b1e      	subs	r3, #30
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68d9      	ldr	r1, [r3, #12]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4403      	add	r3, r0
 8001f2a:	3b1e      	subs	r3, #30
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	e022      	b.n	8001f7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6919      	ldr	r1, [r3, #16]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4403      	add	r3, r0
 8001f74:	409a      	lsls	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d824      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b05      	subs	r3, #5
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b05      	subs	r3, #5
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fce:	e04c      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d824      	bhi.n	8002022 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b23      	subs	r3, #35	; 0x23
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3b23      	subs	r3, #35	; 0x23
 8002014:	fa00 f203 	lsl.w	r2, r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
 8002020:	e023      	b.n	800206a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b41      	subs	r3, #65	; 0x41
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b41      	subs	r3, #65	; 0x41
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_ADC_ConfigChannel+0x234>)
 800206c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <HAL_ADC_ConfigChannel+0x238>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1cc>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b12      	cmp	r3, #18
 800207e:	d105      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_ADC_ConfigChannel+0x238>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d123      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d003      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0x1e6>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b11      	cmp	r3, #17
 80020a4:	d11b      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d111      	bne.n	80020de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_ADC_ConfigChannel+0x23c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_ADC_ConfigChannel+0x240>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9a      	lsrs	r2, r3, #18
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d0:	e002      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f9      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40012300 	.word	0x40012300
 80020f8:	40012000 	.word	0x40012000
 80020fc:	20000000 	.word	0x20000000
 8002100:	431bde83 	.word	0x431bde83

08002104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <ADC_Init+0x1f0>)
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	021a      	lsls	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800215c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <ADC_Init+0x1f4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6899      	ldr	r1, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e00f      	b.n	8002202 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002200:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0202 	bic.w	r2, r2, #2
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e1b      	ldrb	r3, [r3, #24]
 800221c:	005a      	lsls	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800223e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800224e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	3b01      	subs	r3, #1
 800225c:	035a      	lsls	r2, r3, #13
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	e007      	b.n	8002278 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	3b01      	subs	r3, #1
 8002294:	051a      	lsls	r2, r3, #20
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ba:	025a      	lsls	r2, r3, #9
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	029a      	lsls	r2, r3, #10
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40012300 	.word	0x40012300
 80022f8:	0f000001 	.word	0x0f000001

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	; (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	; 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e16b      	b.n	8002814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 815a 	bne.w	800280e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d00b      	beq.n	800257a <HAL_GPIO_Init+0x5a>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256e:	2b11      	cmp	r3, #17
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b12      	cmp	r3, #18
 8002578:	d130      	bne.n	80025dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b0:	2201      	movs	r2, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 0201 	and.w	r2, r3, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0xfc>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b4 	beq.w	800280e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a5e      	ldr	r2, [pc, #376]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_GPIO_Init+0x308>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a5a      	ldr	r2, [pc, #360]	; (800282c <HAL_GPIO_Init+0x30c>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_GPIO_Init+0x310>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x226>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_GPIO_Init+0x314>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <HAL_GPIO_Init+0x318>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4e      	ldr	r2, [pc, #312]	; (800283c <HAL_GPIO_Init+0x31c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4d      	ldr	r2, [pc, #308]	; (8002840 <HAL_GPIO_Init+0x320>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <HAL_GPIO_Init+0x324>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_GPIO_Init+0x328>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20a>
 8002726:	2307      	movs	r3, #7
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272a:	2308      	movs	r3, #8
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4934      	ldr	r1, [pc, #208]	; (800282c <HAL_GPIO_Init+0x30c>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_GPIO_Init+0x330>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278a:	4a31      	ldr	r2, [pc, #196]	; (8002850 <HAL_GPIO_Init+0x330>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_GPIO_Init+0x330>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_GPIO_Init+0x330>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_GPIO_Init+0x330>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae90 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40021400 	.word	0x40021400
 8002848:	40021800 	.word	0x40021800
 800284c:	40021c00 	.word	0x40021c00
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002886:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002888:	b08f      	sub	sp, #60	; 0x3c
 800288a:	af0a      	add	r7, sp, #40	; 0x28
 800288c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e054      	b.n	8002942 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f006 fc04 	bl	80090c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2203      	movs	r2, #3
 80028bc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fdc0 	bl	800645c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	687e      	ldr	r6, [r7, #4]
 80028e4:	466d      	mov	r5, sp
 80028e6:	f106 0410 	add.w	r4, r6, #16
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fa:	1d33      	adds	r3, r6, #4
 80028fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	f003 fd3a 	bl	8006378 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fdb7 	bl	800647e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	687e      	ldr	r6, [r7, #4]
 8002918:	466d      	mov	r5, sp
 800291a:	f106 0410 	add.w	r4, r6, #16
 800291e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292a:	e885 0003 	stmia.w	r5, {r0, r1}
 800292e:	1d33      	adds	r3, r6, #4
 8002930:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	f003 feca 	bl	80066cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800294a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800294a:	b590      	push	{r4, r7, lr}
 800294c:	b089      	sub	sp, #36	; 0x24
 800294e:	af04      	add	r7, sp, #16
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	4608      	mov	r0, r1
 8002954:	4611      	mov	r1, r2
 8002956:	461a      	mov	r2, r3
 8002958:	4603      	mov	r3, r0
 800295a:	70fb      	strb	r3, [r7, #3]
 800295c:	460b      	mov	r3, r1
 800295e:	70bb      	strb	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_HCD_HC_Init+0x28>
 800296e:	2302      	movs	r3, #2
 8002970:	e07f      	b.n	8002a72 <HAL_HCD_HC_Init+0x128>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	333d      	adds	r3, #61	; 0x3d
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	787a      	ldrb	r2, [r7, #1]
 80029a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3340      	adds	r3, #64	; 0x40
 80029b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3339      	adds	r3, #57	; 0x39
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	333f      	adds	r3, #63	; 0x3f
 80029da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	78bb      	ldrb	r3, [r7, #2]
 80029e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e8:	b2d8      	uxtb	r0, r3
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	333a      	adds	r3, #58	; 0x3a
 80029f8:	4602      	mov	r2, r0
 80029fa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	da0a      	bge.n	8002a1a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	333b      	adds	r3, #59	; 0x3b
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e009      	b.n	8002a2e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	333b      	adds	r3, #59	; 0x3b
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	333c      	adds	r3, #60	; 0x3c
 8002a3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a42:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	787c      	ldrb	r4, [r7, #1]
 8002a4a:	78ba      	ldrb	r2, [r7, #2]
 8002a4c:	78f9      	ldrb	r1, [r7, #3]
 8002a4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a50:	9302      	str	r3, [sp, #8]
 8002a52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4623      	mov	r3, r4
 8002a60:	f003 ffb6 	bl	80069d0 <USB_HC_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}

08002a7a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_HCD_HC_Halt+0x1e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00f      	b.n	8002ab8 <HAL_HCD_HC_Halt+0x3e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 f9f2 	bl	8006e92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	70fb      	strb	r3, [r7, #3]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70bb      	strb	r3, [r7, #2]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	333b      	adds	r3, #59	; 0x3b
 8002aea:	78ba      	ldrb	r2, [r7, #2]
 8002aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	333f      	adds	r3, #63	; 0x3f
 8002afe:	787a      	ldrb	r2, [r7, #1]
 8002b00:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b02:	7c3b      	ldrb	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d114      	bne.n	8002b32 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	3342      	adds	r3, #66	; 0x42
 8002b18:	2203      	movs	r2, #3
 8002b1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	333d      	adds	r3, #61	; 0x3d
 8002b2c:	7f3a      	ldrb	r2, [r7, #28]
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e009      	b.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	3342      	adds	r3, #66	; 0x42
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b46:	787b      	ldrb	r3, [r7, #1]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	f200 80d6 	bhi.w	8002cfa <HAL_HCD_HC_SubmitRequest+0x23a>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002ce5 	.word	0x08002ce5
 8002b5c:	08002bd1 	.word	0x08002bd1
 8002b60:	08002c5b 	.word	0x08002c5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b64:	7c3b      	ldrb	r3, [r7, #16]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 80c9 	bne.w	8002cfe <HAL_HCD_HC_SubmitRequest+0x23e>
 8002b6c:	78bb      	ldrb	r3, [r7, #2]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80c5 	bne.w	8002cfe <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002b74:	8b3b      	ldrh	r3, [r7, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	3351      	adds	r3, #81	; 0x51
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3351      	adds	r3, #81	; 0x51
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3342      	adds	r3, #66	; 0x42
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bb8:	e0a1      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3342      	adds	r3, #66	; 0x42
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]
      break;
 8002bce:	e096      	b.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002bd0:	78bb      	ldrb	r3, [r7, #2]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d120      	bne.n	8002c18 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3351      	adds	r3, #81	; 0x51
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3342      	adds	r3, #66	; 0x42
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c00:	e07e      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3342      	adds	r3, #66	; 0x42
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
      break;
 8002c16:	e073      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3350      	adds	r3, #80	; 0x50
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3342      	adds	r3, #66	; 0x42
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
      break;
 8002c42:	e05d      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	440b      	add	r3, r1
 8002c52:	3342      	adds	r3, #66	; 0x42
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
      break;
 8002c58:	e052      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c5a:	78bb      	ldrb	r3, [r7, #2]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d120      	bne.n	8002ca2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3351      	adds	r3, #81	; 0x51
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3342      	adds	r3, #66	; 0x42
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c8a:	e039      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	3342      	adds	r3, #66	; 0x42
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	701a      	strb	r2, [r3, #0]
      break;
 8002ca0:	e02e      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3350      	adds	r3, #80	; 0x50
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3342      	adds	r3, #66	; 0x42
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
      break;
 8002ccc:	e018      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3342      	adds	r3, #66	; 0x42
 8002cde:	2202      	movs	r2, #2
 8002ce0:	701a      	strb	r2, [r3, #0]
      break;
 8002ce2:	e00d      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3342      	adds	r3, #66	; 0x42
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
      break;
 8002cf8:	e002      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002cfe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3344      	adds	r3, #68	; 0x44
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	8b39      	ldrh	r1, [r7, #24]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4403      	add	r3, r0
 8002d24:	3348      	adds	r3, #72	; 0x48
 8002d26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	334c      	adds	r3, #76	; 0x4c
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3339      	adds	r3, #57	; 0x39
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	335d      	adds	r3, #93	; 0x5d
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	18d1      	adds	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	f003 ff26 	bl	8006be4 <USB_HC_StartXfer>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop

08002da4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fc43 	bl	8006646 <USB_GetMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 80ef 	bne.w	8002fa6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 fc27 	bl	8006620 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80e5 	beq.w	8002fa4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 fc1e 	bl	8006620 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dee:	d104      	bne.n	8002dfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002df8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fc0e 	bl	8006620 <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0e:	d104      	bne.n	8002e1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fbfe 	bl	8006620 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2e:	d104      	bne.n	8002e3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fbee 	bl	8006620 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d103      	bne.n	8002e56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fbe0 	bl	8006620 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6a:	d115      	bne.n	8002e98 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f006 f998 	bl	80091bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fcd6 	bl	8006844 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fbbf 	bl	8006620 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d102      	bne.n	8002eb4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f001 f966 	bl	8004180 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fbb1 	bl	8006620 <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d106      	bne.n	8002ed6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f006 f95b 	bl	8009184 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fba0 	bl	8006620 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eea:	d138      	bne.n	8002f5e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 ffbd 	bl	8006e70 <USB_HC_ReadInterrupt>
 8002ef6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e025      	b.n	8002f4a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d106      	bne.n	8002f38 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f8cf 	bl	80030d4 <HCD_HC_IN_IRQHandler>
 8002f36:	e005      	b.n	8002f44 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fcfd 	bl	800393e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3301      	adds	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3d4      	bcc.n	8002efe <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fb5c 	bl	8006620 <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d101      	bne.n	8002f76 <HAL_HCD_IRQHandler+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_HCD_IRQHandler+0x1d4>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d014      	beq.n	8002fa6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0210 	bic.w	r2, r2, #16
 8002f8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 f84b 	bl	8004028 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	619a      	str	r2, [r3, #24]
 8002fa2:	e000      	b.n	8002fa6 <HAL_HCD_IRQHandler+0x202>
      return;
 8002fa4:	bf00      	nop
    }
  }
}
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_HCD_Start+0x16>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e013      	b.n	8002fea <HAL_HCD_Start+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fa33 	bl	800643a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fc96 	bl	800690c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_HCD_Stop+0x16>
 8003004:	2302      	movs	r3, #2
 8003006:	e00d      	b.n	8003024 <HAL_HCD_Stop+0x32>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f004 f877 	bl	8007108 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fc3d 	bl	80068b8 <USB_ResetPort>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	335c      	adds	r3, #92	; 0x5c
 8003064:	781b      	ldrb	r3, [r3, #0]
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	334c      	adds	r3, #76	; 0x4c
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fc7f 	bl	80069ac <USB_GetCurrentFrame>
 80030ae:	4603      	mov	r3, r0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f003 fc5a 	bl	800697e <USB_GetHostSpeed>
 80030ca:	4603      	mov	r3, r0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d119      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2304      	movs	r3, #4
 8003114:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	0151      	lsls	r1, r2, #5
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	440a      	add	r2, r1
 800312c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	60d3      	str	r3, [r2, #12]
 8003136:	e0ce      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d12c      	bne.n	80031aa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003162:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	335d      	adds	r3, #93	; 0x5d
 8003174:	2207      	movs	r2, #7
 8003176:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	0151      	lsls	r1, r2, #5
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	440a      	add	r2, r1
 800318e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fe75 	bl	8006e92 <USB_HC_Halt>
 80031a8:	e095      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d109      	bne.n	80031d4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2320      	movs	r3, #32
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	e080      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d134      	bne.n	8003254 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	335d      	adds	r3, #93	; 0x5d
 800321a:	2205      	movs	r2, #5
 800321c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	461a      	mov	r2, r3
 800322c:	2310      	movs	r3, #16
 800322e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2308      	movs	r3, #8
 8003240:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fe20 	bl	8006e92 <USB_HC_Halt>
 8003252:	e040      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d134      	bne.n	80032d6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	440a      	add	r2, r1
 8003282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fdfb 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2310      	movs	r3, #16
 80032ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	335d      	adds	r3, #93	; 0x5d
 80032be:	2208      	movs	r2, #8
 80032c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d122      	bne.n	8003334 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fdba 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003330:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003332:	e300      	b.n	8003936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	f040 80fd 	bne.w	8003546 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	3348      	adds	r3, #72	; 0x48
 8003364:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0159      	lsls	r1, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	440b      	add	r3, r1
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003378:	1ad1      	subs	r1, r2, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4403      	add	r3, r0
 8003388:	334c      	adds	r3, #76	; 0x4c
 800338a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	335d      	adds	r3, #93	; 0x5d
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3358      	adds	r3, #88	; 0x58
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	2301      	movs	r3, #1
 80033c4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	333f      	adds	r3, #63	; 0x3f
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	333f      	adds	r3, #63	; 0x3f
 80033ec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d121      	bne.n	8003436 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	440a      	add	r2, r1
 8003408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f003 fd38 	bl	8006e92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2310      	movs	r3, #16
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	e070      	b.n	8003518 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	333f      	adds	r3, #63	; 0x3f
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d12a      	bne.n	80034a2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800346a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	335c      	adds	r3, #92	; 0x5c
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	b2d8      	uxtb	r0, r3
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	335c      	adds	r3, #92	; 0x5c
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4601      	mov	r1, r0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f005 fe9c 	bl	80091d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034a0:	e03a      	b.n	8003518 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	333f      	adds	r3, #63	; 0x3f
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d12f      	bne.n	8003518 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	3350      	adds	r3, #80	; 0x50
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f083 0301 	eor.w	r3, r3, #1
 80034e2:	b2d8      	uxtb	r0, r3
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	3350      	adds	r3, #80	; 0x50
 80034f4:	4602      	mov	r2, r0
 80034f6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	b2d8      	uxtb	r0, r3
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	440b      	add	r3, r1
 800350a:	335c      	adds	r3, #92	; 0x5c
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4601      	mov	r1, r0
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 fe60 	bl	80091d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	440b      	add	r3, r1
 8003526:	3350      	adds	r3, #80	; 0x50
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f083 0301 	eor.w	r3, r3, #1
 800352e:	b2d8      	uxtb	r0, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	3350      	adds	r3, #80	; 0x50
 8003540:	4602      	mov	r2, r0
 8003542:	701a      	strb	r2, [r3, #0]
}
 8003544:	e1f7      	b.n	8003936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	f040 811a 	bne.w	8003792 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	0151      	lsls	r1, r2, #5
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	440a      	add	r2, r1
 8003574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	335d      	adds	r3, #93	; 0x5d
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10a      	bne.n	80035aa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	335c      	adds	r3, #92	; 0x5c
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e0d9      	b.n	800375e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	440b      	add	r3, r1
 80035b8:	335d      	adds	r3, #93	; 0x5d
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10a      	bne.n	80035d6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	335c      	adds	r3, #92	; 0x5c
 80035d0:	2205      	movs	r2, #5
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e0c3      	b.n	800375e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	440b      	add	r3, r1
 80035e4:	335d      	adds	r3, #93	; 0x5d
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d00a      	beq.n	8003602 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	335d      	adds	r3, #93	; 0x5d
 80035fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d156      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	3358      	adds	r3, #88	; 0x58
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4403      	add	r3, r0
 8003624:	3358      	adds	r3, #88	; 0x58
 8003626:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3358      	adds	r3, #88	; 0x58
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d914      	bls.n	8003668 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	3358      	adds	r3, #88	; 0x58
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	335c      	adds	r3, #92	; 0x5c
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e009      	b.n	800367c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	335c      	adds	r3, #92	; 0x5c
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003692:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800369a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e056      	b.n	800375e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	335d      	adds	r3, #93	; 0x5d
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d123      	bne.n	800370e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	440b      	add	r3, r1
 80036d4:	335c      	adds	r3, #92	; 0x5c
 80036d6:	2202      	movs	r2, #2
 80036d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	e027      	b.n	800375e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	440b      	add	r3, r1
 800371c:	335d      	adds	r3, #93	; 0x5d
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d11c      	bne.n	800375e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	3358      	adds	r3, #88	; 0x58
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4403      	add	r3, r0
 8003746:	3358      	adds	r3, #88	; 0x58
 8003748:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	335c      	adds	r3, #92	; 0x5c
 800375a:	2204      	movs	r2, #4
 800375c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	2302      	movs	r3, #2
 800376e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	b2d8      	uxtb	r0, r3
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	440b      	add	r3, r1
 8003782:	335c      	adds	r3, #92	; 0x5c
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	4601      	mov	r1, r0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 fd24 	bl	80091d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003790:	e0d1      	b.n	8003936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b80      	cmp	r3, #128	; 0x80
 80037a6:	d13e      	bne.n	8003826 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	3358      	adds	r3, #88	; 0x58
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4403      	add	r3, r0
 80037ea:	3358      	adds	r3, #88	; 0x58
 80037ec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	335d      	adds	r3, #93	; 0x5d
 80037fe:	2206      	movs	r2, #6
 8003800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fb40 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381e:	461a      	mov	r2, r3
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	6093      	str	r3, [r2, #8]
}
 8003824:	e087      	b.n	8003936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d17c      	bne.n	8003936 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	333f      	adds	r3, #63	; 0x3f
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d122      	bne.n	8003898 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	3358      	adds	r3, #88	; 0x58
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fafe 	bl	8006e92 <USB_HC_Halt>
 8003896:	e045      	b.n	8003924 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	440b      	add	r3, r1
 80038a6:	333f      	adds	r3, #63	; 0x3f
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	333f      	adds	r3, #63	; 0x3f
 80038be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d12f      	bne.n	8003924 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	3358      	adds	r3, #88	; 0x58
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d121      	bne.n	8003924 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	335d      	adds	r3, #93	; 0x5d
 80038f0:	2203      	movs	r2, #3
 80038f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	440a      	add	r2, r1
 800390a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fab7 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2310      	movs	r3, #16
 8003934:	6093      	str	r3, [r2, #8]
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d119      	bne.n	80039a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	2304      	movs	r3, #4
 800397e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	440a      	add	r2, r1
 8003996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80039a0:	e33e      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d141      	bne.n	8003a3c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	461a      	mov	r2, r3
 80039c6:	2320      	movs	r3, #32
 80039c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	333d      	adds	r3, #61	; 0x3d
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 831f 	bne.w	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	440b      	add	r3, r1
 80039f0:	333d      	adds	r3, #61	; 0x3d
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	335c      	adds	r3, #92	; 0x5c
 8003a06:	2202      	movs	r2, #2
 8003a08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fa2c 	bl	8006e92 <USB_HC_Halt>
}
 8003a3a:	e2f1      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d13f      	bne.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	335d      	adds	r3, #93	; 0x5d
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	440b      	add	r3, r1
 8003a74:	333d      	adds	r3, #61	; 0x3d
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	3358      	adds	r3, #88	; 0x58
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	0151      	lsls	r1, r2, #5
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	440a      	add	r2, r1
 8003aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 f9ea 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aca:	461a      	mov	r2, r3
 8003acc:	2340      	movs	r3, #64	; 0x40
 8003ace:	6093      	str	r3, [r2, #8]
}
 8003ad0:	e2a6      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d122      	bne.n	8003b30 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 f9bc 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b2c:	6093      	str	r3, [r2, #8]
}
 8003b2e:	e277      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d135      	bne.n	8003bb2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	3358      	adds	r3, #88	; 0x58
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 f984 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b96:	461a      	mov	r2, r3
 8003b98:	2301      	movs	r3, #1
 8003b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	335d      	adds	r3, #93	; 0x5d
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
}
 8003bb0:	e236      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d12b      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f944 	bl	8006e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	440b      	add	r3, r1
 8003c18:	335d      	adds	r3, #93	; 0x5d
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	701a      	strb	r2, [r3, #0]
}
 8003c1e:	e1ff      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d155      	bne.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	440b      	add	r3, r1
 8003c44:	3358      	adds	r3, #88	; 0x58
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	335d      	adds	r3, #93	; 0x5d
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	333d      	adds	r3, #61	; 0x3d
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d114      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	333c      	adds	r3, #60	; 0x3c
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	333d      	adds	r3, #61	; 0x3d
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 f8e2 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2310      	movs	r3, #16
 8003cde:	6093      	str	r3, [r2, #8]
}
 8003ce0:	e19e      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf4:	2b80      	cmp	r3, #128	; 0x80
 8003cf6:	d12b      	bne.n	8003d50 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	0151      	lsls	r1, r2, #5
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 f8b5 	bl	8006e92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	335d      	adds	r3, #93	; 0x5d
 8003d38:	2206      	movs	r2, #6
 8003d3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	6093      	str	r3, [r2, #8]
}
 8003d4e:	e167      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d135      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 f87d 	bl	8006e92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	2310      	movs	r3, #16
 8003da8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	461a      	mov	r2, r3
 8003db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	440b      	add	r3, r1
 8003dcc:	335d      	adds	r3, #93	; 0x5d
 8003dce:	2208      	movs	r2, #8
 8003dd0:	701a      	strb	r2, [r3, #0]
}
 8003dd2:	e125      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	f040 811a 	bne.w	8004020 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e06:	f023 0302 	bic.w	r3, r3, #2
 8003e0a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	335d      	adds	r3, #93	; 0x5d
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d137      	bne.n	8003e92 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	440b      	add	r3, r1
 8003e30:	335c      	adds	r3, #92	; 0x5c
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d00b      	beq.n	8003e64 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	333f      	adds	r3, #63	; 0x3f
 8003e5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	f040 80c5 	bne.w	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	440b      	add	r3, r1
 8003e72:	3351      	adds	r3, #81	; 0x51
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2d8      	uxtb	r0, r3
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3351      	adds	r3, #81	; 0x51
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e0ad      	b.n	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	335d      	adds	r3, #93	; 0x5d
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d10a      	bne.n	8003ebe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	335c      	adds	r3, #92	; 0x5c
 8003eb8:	2202      	movs	r2, #2
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e097      	b.n	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	335d      	adds	r3, #93	; 0x5d
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d10a      	bne.n	8003eea <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	335c      	adds	r3, #92	; 0x5c
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e081      	b.n	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	335d      	adds	r3, #93	; 0x5d
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d10a      	bne.n	8003f16 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	2205      	movs	r2, #5
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e06b      	b.n	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	335d      	adds	r3, #93	; 0x5d
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d00a      	beq.n	8003f42 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	440b      	add	r3, r1
 8003f3a:	335d      	adds	r3, #93	; 0x5d
 8003f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d155      	bne.n	8003fee <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	3358      	adds	r3, #88	; 0x58
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	1c59      	adds	r1, r3, #1
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4403      	add	r3, r0
 8003f64:	3358      	adds	r3, #88	; 0x58
 8003f66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	440b      	add	r3, r1
 8003f76:	3358      	adds	r3, #88	; 0x58
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d914      	bls.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3358      	adds	r3, #88	; 0x58
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	335c      	adds	r3, #92	; 0x5c
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e009      	b.n	8003fbc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	335c      	adds	r3, #92	; 0x5c
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	b2d8      	uxtb	r0, r3
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	440b      	add	r3, r1
 8004012:	335c      	adds	r3, #92	; 0x5c
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	4601      	mov	r1, r0
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f005 f8dc 	bl	80091d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	0c5b      	lsrs	r3, r3, #17
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800405c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d003      	beq.n	800406c <HCD_RXQLVL_IRQHandler+0x44>
 8004064:	2b05      	cmp	r3, #5
 8004066:	f000 8082 	beq.w	800416e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800406a:	e083      	b.n	8004174 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d07f      	beq.n	8004172 <HCD_RXQLVL_IRQHandler+0x14a>
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	3344      	adds	r3, #68	; 0x44
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d074      	beq.n	8004172 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	440b      	add	r3, r1
 800409a:	3344      	adds	r3, #68	; 0x44
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	b292      	uxth	r2, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f002 fa93 	bl	80065ce <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	440b      	add	r3, r1
 80040b6:	3344      	adds	r3, #68	; 0x44
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	18d1      	adds	r1, r2, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4403      	add	r3, r0
 80040cc:	3344      	adds	r3, #68	; 0x44
 80040ce:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	440b      	add	r3, r1
 80040de:	334c      	adds	r3, #76	; 0x4c
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	18d1      	adds	r1, r2, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4403      	add	r3, r0
 80040f4:	334c      	adds	r3, #76	; 0x4c
 80040f6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HCD_RXQLVL_IRQHandler+0x154>)
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d031      	beq.n	8004172 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004124:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	3350      	adds	r3, #80	; 0x50
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2d8      	uxtb	r0, r3
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3350      	adds	r3, #80	; 0x50
 8004168:	4602      	mov	r2, r0
 800416a:	701a      	strb	r2, [r3, #0]
      break;
 800416c:	e001      	b.n	8004172 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004172:	bf00      	nop
  }
}
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	; 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	1ff80000 	.word	0x1ff80000

08004180 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d10b      	bne.n	80041d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f004 ffec 	bl	80091a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d132      	bne.n	8004240 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d126      	bne.n	800423a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d113      	bne.n	800421c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041fe:	d106      	bne.n	800420e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fb1c 	bl	8006844 <USB_InitFSLSPClkSel>
 800420c:	e011      	b.n	8004232 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f002 fb15 	bl	8006844 <USB_InitFSLSPClkSel>
 800421a:	e00a      	b.n	8004232 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422a:	461a      	mov	r2, r3
 800422c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004230:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f004 ffde 	bl	80091f4 <HAL_HCD_PortEnabled_Callback>
 8004238:	e002      	b.n	8004240 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f004 ffe8 	bl	8009210 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	d103      	bne.n	8004252 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6013      	str	r3, [r2, #0]
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e11f      	b.n	80044ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd f9fc 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042cc:	f001 f9de 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a7b      	ldr	r2, [pc, #492]	; (80044c4 <HAL_I2C_Init+0x25c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d807      	bhi.n	80042ec <HAL_I2C_Init+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a7a      	ldr	r2, [pc, #488]	; (80044c8 <HAL_I2C_Init+0x260>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	bf94      	ite	ls
 80042e4:	2301      	movls	r3, #1
 80042e6:	2300      	movhi	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e006      	b.n	80042fa <HAL_I2C_Init+0x92>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a77      	ldr	r2, [pc, #476]	; (80044cc <HAL_I2C_Init+0x264>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf94      	ite	ls
 80042f4:	2301      	movls	r3, #1
 80042f6:	2300      	movhi	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0db      	b.n	80044ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a72      	ldr	r2, [pc, #456]	; (80044d0 <HAL_I2C_Init+0x268>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a64      	ldr	r2, [pc, #400]	; (80044c4 <HAL_I2C_Init+0x25c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <HAL_I2C_Init+0xd4>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3301      	adds	r3, #1
 800433a:	e009      	b.n	8004350 <HAL_I2C_Init+0xe8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a63      	ldr	r2, [pc, #396]	; (80044d4 <HAL_I2C_Init+0x26c>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	3301      	adds	r3, #1
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4956      	ldr	r1, [pc, #344]	; (80044c4 <HAL_I2C_Init+0x25c>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d80d      	bhi.n	800438c <HAL_I2C_Init+0x124>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e59      	subs	r1, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fbb1 f3f3 	udiv	r3, r1, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b04      	cmp	r3, #4
 8004386:	bf38      	it	cc
 8004388:	2304      	movcc	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1c4>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x150>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x176>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x17e>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1c4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1a4>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1c4>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e128      	b.n	800473c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a90      	ldr	r2, [pc, #576]	; (8004744 <HAL_I2S_Init+0x26c>)
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd f909 	bl	800171c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004520:	f023 030f 	bic.w	r3, r3, #15
 8004524:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d060      	beq.n	80045f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800453e:	2310      	movs	r3, #16
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e001      	b.n	8004548 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004544:	2320      	movs	r3, #32
 8004546:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b20      	cmp	r3, #32
 800454e:	d802      	bhi.n	8004556 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004556:	2001      	movs	r0, #1
 8004558:	f001 f9a2 	bl	80058a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800455c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d125      	bne.n	80045b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	fbb2 f2f3 	udiv	r2, r2, r3
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	3305      	adds	r3, #5
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e01f      	b.n	80045d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	fbb2 f2f3 	udiv	r2, r2, r3
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	3305      	adds	r3, #5
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e00e      	b.n	80045d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	461a      	mov	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	3305      	adds	r3, #5
 80045d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4a5c      	ldr	r2, [pc, #368]	; (8004748 <HAL_I2S_Init+0x270>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	08db      	lsrs	r3, r3, #3
 80045dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045f8:	2302      	movs	r3, #2
 80045fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d902      	bls.n	800460c <HAL_I2S_Init+0x134>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2bff      	cmp	r3, #255	; 0xff
 800460a:	d907      	bls.n	800461c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f043 0210 	orr.w	r2, r3, #16
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e08f      	b.n	800473c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	ea42 0103 	orr.w	r1, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	430a      	orrs	r2, r1
 800462e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800463a:	f023 030f 	bic.w	r3, r3, #15
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6851      	ldr	r1, [r2, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6892      	ldr	r2, [r2, #8]
 8004646:	4311      	orrs	r1, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68d2      	ldr	r2, [r2, #12]
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6992      	ldr	r2, [r2, #24]
 8004652:	430a      	orrs	r2, r1
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d161      	bne.n	800472c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a38      	ldr	r2, [pc, #224]	; (800474c <HAL_I2S_Init+0x274>)
 800466c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a37      	ldr	r2, [pc, #220]	; (8004750 <HAL_I2S_Init+0x278>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_I2S_Init+0x1a4>
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_I2S_Init+0x27c>)
 800467a:	e001      	b.n	8004680 <HAL_I2S_Init+0x1a8>
 800467c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	4932      	ldr	r1, [pc, #200]	; (8004750 <HAL_I2S_Init+0x278>)
 8004688:	428a      	cmp	r2, r1
 800468a:	d101      	bne.n	8004690 <HAL_I2S_Init+0x1b8>
 800468c:	4a31      	ldr	r2, [pc, #196]	; (8004754 <HAL_I2S_Init+0x27c>)
 800468e:	e001      	b.n	8004694 <HAL_I2S_Init+0x1bc>
 8004690:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004694:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004698:	f023 030f 	bic.w	r3, r3, #15
 800469c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <HAL_I2S_Init+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_I2S_Init+0x1d4>
 80046a8:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_I2S_Init+0x27c>)
 80046aa:	e001      	b.n	80046b0 <HAL_I2S_Init+0x1d8>
 80046ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046b0:	2202      	movs	r2, #2
 80046b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_I2S_Init+0x278>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2S_Init+0x1ea>
 80046be:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_I2S_Init+0x27c>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2S_Init+0x1ee>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d2:	d003      	beq.n	80046dc <HAL_I2S_Init+0x204>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e001      	b.n	80046e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046e4:	2300      	movs	r3, #0
 80046e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	b299      	uxth	r1, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80046fe:	4303      	orrs	r3, r0
 8004700:	b29b      	uxth	r3, r3
 8004702:	430b      	orrs	r3, r1
 8004704:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004706:	4313      	orrs	r3, r2
 8004708:	b29a      	uxth	r2, r3
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	4313      	orrs	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004714:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <HAL_I2S_Init+0x278>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <HAL_I2S_Init+0x24c>
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_I2S_Init+0x27c>)
 8004722:	e001      	b.n	8004728 <HAL_I2S_Init+0x250>
 8004724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004728:	897a      	ldrh	r2, [r7, #10]
 800472a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	0800484f 	.word	0x0800484f
 8004748:	cccccccd 	.word	0xcccccccd
 800474c:	08004965 	.word	0x08004965
 8004750:	40003800 	.word	0x40003800
 8004754:	40003400 	.word	0x40003400

08004758 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ffb8 	bl	8004758 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	b292      	uxth	r2, r2
 8004804:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10e      	bne.n	8004846 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004836:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff93 	bl	800476c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b04      	cmp	r3, #4
 8004868:	d13a      	bne.n	80048e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d109      	bne.n	8004888 <I2S_IRQHandler+0x3a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487e:	2b40      	cmp	r3, #64	; 0x40
 8004880:	d102      	bne.n	8004888 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ffb4 	bl	80047f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d126      	bne.n	80048e0 <I2S_IRQHandler+0x92>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b20      	cmp	r3, #32
 800489e:	d11f      	bne.n	80048e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	f043 0202 	orr.w	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff50 	bl	8004780 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d136      	bne.n	800495a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d109      	bne.n	800490a <I2S_IRQHandler+0xbc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d102      	bne.n	800490a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff45 	bl	8004794 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d122      	bne.n	800495a <I2S_IRQHandler+0x10c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d11b      	bne.n	800495a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004930:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff13 	bl	8004780 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4aa2      	ldr	r2, [pc, #648]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800497e:	4ba2      	ldr	r3, [pc, #648]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004980:	e001      	b.n	8004986 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a9b      	ldr	r2, [pc, #620]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800499c:	4b9a      	ldr	r3, [pc, #616]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800499e:	e001      	b.n	80049a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80049a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d004      	beq.n	80049bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 8099 	bne.w	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f925 	bl	8004c20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9c8 	bl	8004d80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d13a      	bne.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d035      	beq.n	8004a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a7e      	ldr	r2, [pc, #504]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a0e:	4b7e      	ldr	r3, [pc, #504]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a10:	e001      	b.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4979      	ldr	r1, [pc, #484]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a1e:	428b      	cmp	r3, r1
 8004a20:	d101      	bne.n	8004a26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a22:	4b79      	ldr	r3, [pc, #484]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a24:	e001      	b.n	8004a2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f043 0202 	orr.w	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fe88 	bl	8004780 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	f040 80be 	bne.w	8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80b8 	beq.w	8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a59      	ldr	r2, [pc, #356]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004aa2:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4954      	ldr	r1, [pc, #336]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ab2:	428b      	cmp	r3, r1
 8004ab4:	d101      	bne.n	8004aba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004ab6:	4b54      	ldr	r3, [pc, #336]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ab8:	e001      	b.n	8004abe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ac2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fe4a 	bl	8004780 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aec:	e084      	b.n	8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d107      	bne.n	8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8be 	bl	8004c84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8fd 	bl	8004d1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d12f      	bne.n	8004b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02a      	beq.n	8004b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2e      	ldr	r2, [pc, #184]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b52:	e001      	b.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4929      	ldr	r1, [pc, #164]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b60:	428b      	cmp	r3, r1
 8004b62:	d101      	bne.n	8004b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b66:	e001      	b.n	8004b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0202 	orr.w	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fdfa 	bl	8004780 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d131      	bne.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02c      	beq.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d101      	bne.n	8004bae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004baa:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bac:	e001      	b.n	8004bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4912      	ldr	r1, [pc, #72]	; (8004c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bc0:	e001      	b.n	8004bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bda:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fdc5 	bl	8004780 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf6:	e000      	b.n	8004bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf8:	bf00      	nop
}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40003800 	.word	0x40003800
 8004c08:	40003400 	.word	0x40003400

08004c0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	1c99      	adds	r1, r3, #2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6251      	str	r1, [r2, #36]	; 0x24
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffc9 	bl	8004c0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c99      	adds	r1, r3, #2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6251      	str	r1, [r2, #36]	; 0x24
 8004c96:	8819      	ldrh	r1, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <I2SEx_TxISR_I2SExt+0x90>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <I2SEx_TxISR_I2SExt+0x22>
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <I2SEx_TxISR_I2SExt+0x94>)
 8004ca4:	e001      	b.n	8004caa <I2SEx_TxISR_I2SExt+0x26>
 8004ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004caa:	460a      	mov	r2, r1
 8004cac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d121      	bne.n	8004d0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <I2SEx_TxISR_I2SExt+0x90>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <I2SEx_TxISR_I2SExt+0x50>
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <I2SEx_TxISR_I2SExt+0x94>)
 8004cd2:	e001      	b.n	8004cd8 <I2SEx_TxISR_I2SExt+0x54>
 8004cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	490d      	ldr	r1, [pc, #52]	; (8004d14 <I2SEx_TxISR_I2SExt+0x90>)
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d101      	bne.n	8004ce8 <I2SEx_TxISR_I2SExt+0x64>
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <I2SEx_TxISR_I2SExt+0x94>)
 8004ce6:	e001      	b.n	8004cec <I2SEx_TxISR_I2SExt+0x68>
 8004ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff81 	bl	8004c0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40003800 	.word	0x40003800
 8004d18:	40003400 	.word	0x40003400

08004d1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68d8      	ldr	r0, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	1c99      	adds	r1, r3, #2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d34:	b282      	uxth	r2, r0
 8004d36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d113      	bne.n	8004d78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff4a 	bl	8004c0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <I2SEx_RxISR_I2SExt+0x90>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <I2SEx_RxISR_I2SExt+0x16>
 8004d92:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <I2SEx_RxISR_I2SExt+0x94>)
 8004d94:	e001      	b.n	8004d9a <I2SEx_RxISR_I2SExt+0x1a>
 8004d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d9a:	68d8      	ldr	r0, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	1c99      	adds	r1, r3, #2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004da6:	b282      	uxth	r2, r0
 8004da8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d121      	bne.n	8004e06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <I2SEx_RxISR_I2SExt+0x90>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <I2SEx_RxISR_I2SExt+0x50>
 8004dcc:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <I2SEx_RxISR_I2SExt+0x94>)
 8004dce:	e001      	b.n	8004dd4 <I2SEx_RxISR_I2SExt+0x54>
 8004dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	490d      	ldr	r1, [pc, #52]	; (8004e10 <I2SEx_RxISR_I2SExt+0x90>)
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	d101      	bne.n	8004de4 <I2SEx_RxISR_I2SExt+0x64>
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <I2SEx_RxISR_I2SExt+0x94>)
 8004de2:	e001      	b.n	8004de8 <I2SEx_RxISR_I2SExt+0x68>
 8004de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff03 	bl	8004c0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40003800 	.word	0x40003800
 8004e14:	40003400 	.word	0x40003400

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e25b      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d075      	beq.n	8004f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e36:	4ba3      	ldr	r3, [pc, #652]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d00c      	beq.n	8004e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e42:	4ba0      	ldr	r3, [pc, #640]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d112      	bne.n	8004e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4e:	4b9d      	ldr	r3, [pc, #628]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5a:	d10b      	bne.n	8004e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	4b99      	ldr	r3, [pc, #612]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d05b      	beq.n	8004f20 <HAL_RCC_OscConfig+0x108>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d157      	bne.n	8004f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e236      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCC_OscConfig+0x74>
 8004e7e:	4b91      	ldr	r3, [pc, #580]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a90      	ldr	r2, [pc, #576]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e01d      	b.n	8004ec8 <HAL_RCC_OscConfig+0xb0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x98>
 8004e96:	4b8b      	ldr	r3, [pc, #556]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a8a      	ldr	r2, [pc, #552]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4b88      	ldr	r3, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a87      	ldr	r2, [pc, #540]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e00b      	b.n	8004ec8 <HAL_RCC_OscConfig+0xb0>
 8004eb0:	4b84      	ldr	r3, [pc, #528]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a83      	ldr	r2, [pc, #524]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a80      	ldr	r2, [pc, #512]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d013      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fc fe2c 	bl	8001b2c <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed8:	f7fc fe28 	bl	8001b2c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	; 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1fb      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	4b76      	ldr	r3, [pc, #472]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0xc0>
 8004ef6:	e014      	b.n	8004f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fc fe18 	bl	8001b2c <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fc fe14 	bl	8001b2c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	; 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1e7      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f12:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0xe8>
 8004f1e:	e000      	b.n	8004f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d063      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2e:	4b65      	ldr	r3, [pc, #404]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3a:	4b62      	ldr	r3, [pc, #392]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d11c      	bne.n	8004f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f46:	4b5f      	ldr	r3, [pc, #380]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d116      	bne.n	8004f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	4b5c      	ldr	r3, [pc, #368]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_RCC_OscConfig+0x152>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d001      	beq.n	8004f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e1bb      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6a:	4b56      	ldr	r3, [pc, #344]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4952      	ldr	r1, [pc, #328]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7e:	e03a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f88:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <HAL_RCC_OscConfig+0x2b0>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fc fdcd 	bl	8001b2c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f96:	f7fc fdc9 	bl	8001b2c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e19c      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb4:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4940      	ldr	r1, [pc, #256]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]
 8004fc8:	e015      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fca:	4b3f      	ldr	r3, [pc, #252]	; (80050c8 <HAL_RCC_OscConfig+0x2b0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fc fdac 	bl	8001b2c <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd8:	f7fc fda8 	bl	8001b2c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e17b      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d030      	beq.n	8005064 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d016      	beq.n	8005038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500a:	4b30      	ldr	r3, [pc, #192]	; (80050cc <HAL_RCC_OscConfig+0x2b4>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fd8c 	bl	8001b2c <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005018:	f7fc fd88 	bl	8001b2c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e15b      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502a:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x200>
 8005036:	e015      	b.n	8005064 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_OscConfig+0x2b4>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503e:	f7fc fd75 	bl	8001b2c <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005046:	f7fc fd71 	bl	8001b2c <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e144      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 800505a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80a0 	beq.w	80051b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005076:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60bb      	str	r3, [r7, #8]
 8005086:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a0e      	ldr	r2, [pc, #56]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <HAL_RCC_OscConfig+0x2ac>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_OscConfig+0x2b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d121      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_RCC_OscConfig+0x2b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <HAL_RCC_OscConfig+0x2b8>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ba:	f7fc fd37 	bl	8001b2c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	e011      	b.n	80050e6 <HAL_RCC_OscConfig+0x2ce>
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	42470000 	.word	0x42470000
 80050cc:	42470e80 	.word	0x42470e80
 80050d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d4:	f7fc fd2a 	bl	8001b2c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0fd      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b81      	ldr	r3, [pc, #516]	; (80052ec <HAL_RCC_OscConfig+0x4d4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d106      	bne.n	8005108 <HAL_RCC_OscConfig+0x2f0>
 80050fa:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a7c      	ldr	r2, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
 8005106:	e01c      	b.n	8005142 <HAL_RCC_OscConfig+0x32a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b05      	cmp	r3, #5
 800510e:	d10c      	bne.n	800512a <HAL_RCC_OscConfig+0x312>
 8005110:	4b77      	ldr	r3, [pc, #476]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a76      	ldr	r2, [pc, #472]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005116:	f043 0304 	orr.w	r3, r3, #4
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	4b74      	ldr	r3, [pc, #464]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a73      	ldr	r2, [pc, #460]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
 8005128:	e00b      	b.n	8005142 <HAL_RCC_OscConfig+0x32a>
 800512a:	4b71      	ldr	r3, [pc, #452]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	4a70      	ldr	r2, [pc, #448]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	6713      	str	r3, [r2, #112]	; 0x70
 8005136:	4b6e      	ldr	r3, [pc, #440]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	4a6d      	ldr	r2, [pc, #436]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 800513c:	f023 0304 	bic.w	r3, r3, #4
 8005140:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d015      	beq.n	8005176 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514a:	f7fc fcef 	bl	8001b2c <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fceb 	bl	8001b2c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e0bc      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005168:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ee      	beq.n	8005152 <HAL_RCC_OscConfig+0x33a>
 8005174:	e014      	b.n	80051a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005176:	f7fc fcd9 	bl	8001b2c <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fc fcd5 	bl	8001b2c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e0a6      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	4b56      	ldr	r3, [pc, #344]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ee      	bne.n	800517e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a6:	4b52      	ldr	r3, [pc, #328]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	4a51      	ldr	r2, [pc, #324]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8092 	beq.w	80052e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051bc:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 030c 	and.w	r3, r3, #12
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d05c      	beq.n	8005282 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d141      	bne.n	8005254 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <HAL_RCC_OscConfig+0x4dc>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d6:	f7fc fca9 	bl	8001b2c <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051de:	f7fc fca5 	bl	8001b2c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e078      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f0:	4b3f      	ldr	r3, [pc, #252]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f0      	bne.n	80051de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	019b      	lsls	r3, r3, #6
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	3b01      	subs	r3, #1
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	4933      	ldr	r1, [pc, #204]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005226:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <HAL_RCC_OscConfig+0x4dc>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fc fc7e 	bl	8001b2c <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005234:	f7fc fc7a 	bl	8001b2c <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e04d      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x41c>
 8005252:	e045      	b.n	80052e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_RCC_OscConfig+0x4dc>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fc fc67 	bl	8001b2c <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005262:	f7fc fc63 	bl	8001b2c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e036      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x44a>
 8005280:	e02e      	b.n	80052e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e029      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800528e:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_RCC_OscConfig+0x4d8>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d11c      	bne.n	80052dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d115      	bne.n	80052dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40007000 	.word	0x40007000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	42470060 	.word	0x42470060

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0cc      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b68      	ldr	r3, [pc, #416]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90c      	bls.n	8005334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a58      	ldr	r2, [pc, #352]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800536e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d044      	beq.n	8005418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e067      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4934      	ldr	r1, [pc, #208]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e8:	f7fc fba0 	bl	8001b2c <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fc fb9c 	bl	8001b2c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20c      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4601      	mov	r1, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	5cd3      	ldrb	r3, [r2, r3]
 8005492:	fa21 f303 	lsr.w	r3, r1, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_ClockConfig+0x1c8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fc fb00 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	40023800 	.word	0x40023800
 80054b8:	0800b00c 	.word	0x0800b00c
 80054bc:	20000000 	.word	0x20000000
 80054c0:	20000004 	.word	0x20000004

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d007      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x32>
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d008      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x38>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 80b4 	bne.w	8005658 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b5e      	ldr	r3, [pc, #376]	; (800566c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054f2:	60bb      	str	r3, [r7, #8]
       break;
 80054f4:	e0b3      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054f6:	4b5e      	ldr	r3, [pc, #376]	; (8005670 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80054f8:	60bb      	str	r3, [r7, #8]
      break;
 80054fa:	e0b0      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054fc:	4b5a      	ldr	r3, [pc, #360]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005504:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005506:	4b58      	ldr	r3, [pc, #352]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04a      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	ea03 0501 	and.w	r5, r3, r1
 8005528:	ea04 0602 	and.w	r6, r4, r2
 800552c:	4629      	mov	r1, r5
 800552e:	4632      	mov	r2, r6
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	0154      	lsls	r4, r2, #5
 800553a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800553e:	014b      	lsls	r3, r1, #5
 8005540:	4619      	mov	r1, r3
 8005542:	4622      	mov	r2, r4
 8005544:	1b49      	subs	r1, r1, r5
 8005546:	eb62 0206 	sbc.w	r2, r2, r6
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	f04f 0400 	mov.w	r4, #0
 8005552:	0194      	lsls	r4, r2, #6
 8005554:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005558:	018b      	lsls	r3, r1, #6
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	eb64 0402 	sbc.w	r4, r4, r2
 8005560:	f04f 0100 	mov.w	r1, #0
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	00e2      	lsls	r2, r4, #3
 800556a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800556e:	00d9      	lsls	r1, r3, #3
 8005570:	460b      	mov	r3, r1
 8005572:	4614      	mov	r4, r2
 8005574:	195b      	adds	r3, r3, r5
 8005576:	eb44 0406 	adc.w	r4, r4, r6
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	0262      	lsls	r2, r4, #9
 8005584:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005588:	0259      	lsls	r1, r3, #9
 800558a:	460b      	mov	r3, r1
 800558c:	4614      	mov	r4, r2
 800558e:	4618      	mov	r0, r3
 8005590:	4621      	mov	r1, r4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	461a      	mov	r2, r3
 800559a:	4623      	mov	r3, r4
 800559c:	f7fb fafc 	bl	8000b98 <__aeabi_uldivmod>
 80055a0:	4603      	mov	r3, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e049      	b.n	800563c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a8:	4b2f      	ldr	r3, [pc, #188]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	f04f 0400 	mov.w	r4, #0
 80055b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	ea03 0501 	and.w	r5, r3, r1
 80055be:	ea04 0602 	and.w	r6, r4, r2
 80055c2:	4629      	mov	r1, r5
 80055c4:	4632      	mov	r2, r6
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	f04f 0400 	mov.w	r4, #0
 80055ce:	0154      	lsls	r4, r2, #5
 80055d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055d4:	014b      	lsls	r3, r1, #5
 80055d6:	4619      	mov	r1, r3
 80055d8:	4622      	mov	r2, r4
 80055da:	1b49      	subs	r1, r1, r5
 80055dc:	eb62 0206 	sbc.w	r2, r2, r6
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	f04f 0400 	mov.w	r4, #0
 80055e8:	0194      	lsls	r4, r2, #6
 80055ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055ee:	018b      	lsls	r3, r1, #6
 80055f0:	1a5b      	subs	r3, r3, r1
 80055f2:	eb64 0402 	sbc.w	r4, r4, r2
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	00e2      	lsls	r2, r4, #3
 8005600:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005604:	00d9      	lsls	r1, r3, #3
 8005606:	460b      	mov	r3, r1
 8005608:	4614      	mov	r4, r2
 800560a:	195b      	adds	r3, r3, r5
 800560c:	eb44 0406 	adc.w	r4, r4, r6
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	02a2      	lsls	r2, r4, #10
 800561a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800561e:	0299      	lsls	r1, r3, #10
 8005620:	460b      	mov	r3, r1
 8005622:	4614      	mov	r4, r2
 8005624:	4618      	mov	r0, r3
 8005626:	4621      	mov	r1, r4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f04f 0400 	mov.w	r4, #0
 800562e:	461a      	mov	r2, r3
 8005630:	4623      	mov	r3, r4
 8005632:	f7fb fab1 	bl	8000b98 <__aeabi_uldivmod>
 8005636:	4603      	mov	r3, r0
 8005638:	460c      	mov	r4, r1
 800563a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	0c1b      	lsrs	r3, r3, #16
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	60bb      	str	r3, [r7, #8]
      break;
 8005656:	e002      	b.n	800565e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800565a:	60bb      	str	r3, [r7, #8]
      break;
 800565c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565e:	68bb      	ldr	r3, [r7, #8]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	00f42400 	.word	0x00f42400
 8005670:	007a1200 	.word	0x007a1200

08005674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <HAL_RCC_GetHCLKFreq+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000000 	.word	0x20000000

0800568c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005690:	f7ff fff0 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 8005694:	4601      	mov	r1, r0
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0a9b      	lsrs	r3, r3, #10
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a2:	5cd3      	ldrb	r3, [r2, r3]
 80056a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800b01c 	.word	0x0800b01c

080056b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056b8:	f7ff ffdc 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 80056bc:	4601      	mov	r1, r0
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0b5b      	lsrs	r3, r3, #13
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4a03      	ldr	r2, [pc, #12]	; (80056d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ca:	5cd3      	ldrb	r3, [r2, r3]
 80056cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	0800b01c 	.word	0x0800b01c

080056dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005700:	2b00      	cmp	r3, #0
 8005702:	d035      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005704:	4b62      	ldr	r3, [pc, #392]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800570a:	f7fc fa0f 	bl	8001b2c <HAL_GetTick>
 800570e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005712:	f7fc fa0b 	bl	8001b2c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e0b0      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005724:	4b5b      	ldr	r3, [pc, #364]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	019a      	lsls	r2, r3, #6
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	4955      	ldr	r1, [pc, #340]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005744:	4b52      	ldr	r3, [pc, #328]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800574a:	f7fc f9ef 	bl	8001b2c <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005752:	f7fc f9eb 	bl	8001b2c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e090      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005764:	4b4b      	ldr	r3, [pc, #300]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	4b44      	ldr	r3, [pc, #272]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	4a43      	ldr	r2, [pc, #268]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578c:	6413      	str	r3, [r2, #64]	; 0x40
 800578e:	4b41      	ldr	r3, [pc, #260]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3e      	ldr	r2, [pc, #248]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057a6:	f7fc f9c1 	bl	8001b2c <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ae:	f7fc f9bd 	bl	8001b2c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e062      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057c0:	4b35      	ldr	r3, [pc, #212]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057cc:	4b31      	ldr	r3, [pc, #196]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02f      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d028      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057fa:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d114      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005812:	f7fc f98b 	bl	8001b2c <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	e00a      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581a:	f7fc f987 	bl	8001b2c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	f241 3288 	movw	r2, #5000	; 0x1388
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e02a      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005830:	4b18      	ldr	r3, [pc, #96]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0ee      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005848:	d10d      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800585a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585e:	490d      	ldr	r1, [pc, #52]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]
 8005864:	e005      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800586c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005870:	6093      	str	r3, [r2, #8]
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005874:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800587e:	4905      	ldr	r1, [pc, #20]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	42470068 	.word	0x42470068
 8005894:	40023800 	.word	0x40023800
 8005898:	40007000 	.word	0x40007000
 800589c:	42470e40 	.word	0x42470e40

080058a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d13d      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058be:	4b22      	ldr	r3, [pc, #136]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058c6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12f      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058d4:	617b      	str	r3, [r7, #20]
          break;
 80058d6:	e02f      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e4:	d108      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ee:	4a18      	ldr	r2, [pc, #96]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e007      	b.n	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005900:	4a14      	ldr	r2, [pc, #80]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800591e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005922:	0f1b      	lsrs	r3, r3, #28
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	617b      	str	r3, [r7, #20]
          break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
          break;
 8005936:	bf00      	nop
        }
      }
      break;
 8005938:	bf00      	nop
    }
  }
  return frequency;
 800593a:	697b      	ldr	r3, [r7, #20]
}
 800593c:	4618      	mov	r0, r3
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40023800 	.word	0x40023800
 800594c:	00bb8000 	.word	0x00bb8000
 8005950:	007a1200 	.word	0x007a1200
 8005954:	00f42400 	.word	0x00f42400

08005958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e056      	b.n	8005a18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb ff31 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	ea42 0103 	orr.w	r1, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 0104 	and.w	r1, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e03f      	b.n	8005ab2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fb ff18 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	; 0x24
 8005a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f90b 	bl	8005c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af02      	add	r7, sp, #8
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	f040 8083 	bne.w	8005be2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_UART_Transmit+0x2e>
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e07b      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_UART_Transmit+0x40>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e074      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	; 0x21
 8005b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b10:	f7fc f80c 	bl	8001b2c <HAL_GetTick>
 8005b14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b2a:	e042      	b.n	8005bb2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	d122      	bne.n	8005b8a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f84c 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e042      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	e017      	b.n	8005bb2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	e013      	b.n	8005bb2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2200      	movs	r2, #0
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f829 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e01f      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	60ba      	str	r2, [r7, #8]
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1b7      	bne.n	8005b2c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2140      	movs	r1, #64	; 0x40
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f810 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e006      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	e02c      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d028      	beq.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0c:	f7fb ff8e 	bl	8001b2c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d21d      	bcs.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e00f      	b.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4013      	ands	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d0c3      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cc2:	f023 030c 	bic.w	r3, r3, #12
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6812      	ldr	r2, [r2, #0]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cee:	f040 818b 	bne.w	8006008 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4ac1      	ldr	r2, [pc, #772]	; (8005ffc <UART_SetConfig+0x37c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d005      	beq.n	8005d08 <UART_SetConfig+0x88>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4abf      	ldr	r2, [pc, #764]	; (8006000 <UART_SetConfig+0x380>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	f040 80bd 	bne.w	8005e82 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d08:	f7ff fcd4 	bl	80056b4 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	461d      	mov	r5, r3
 8005d12:	f04f 0600 	mov.w	r6, #0
 8005d16:	46a8      	mov	r8, r5
 8005d18:	46b1      	mov	r9, r6
 8005d1a:	eb18 0308 	adds.w	r3, r8, r8
 8005d1e:	eb49 0409 	adc.w	r4, r9, r9
 8005d22:	4698      	mov	r8, r3
 8005d24:	46a1      	mov	r9, r4
 8005d26:	eb18 0805 	adds.w	r8, r8, r5
 8005d2a:	eb49 0906 	adc.w	r9, r9, r6
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d42:	4688      	mov	r8, r1
 8005d44:	4691      	mov	r9, r2
 8005d46:	eb18 0005 	adds.w	r0, r8, r5
 8005d4a:	eb49 0106 	adc.w	r1, r9, r6
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	461d      	mov	r5, r3
 8005d54:	f04f 0600 	mov.w	r6, #0
 8005d58:	196b      	adds	r3, r5, r5
 8005d5a:	eb46 0406 	adc.w	r4, r6, r6
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4623      	mov	r3, r4
 8005d62:	f7fa ff19 	bl	8000b98 <__aeabi_uldivmod>
 8005d66:	4603      	mov	r3, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4ba5      	ldr	r3, [pc, #660]	; (8006004 <UART_SetConfig+0x384>)
 8005d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	461d      	mov	r5, r3
 8005d7c:	f04f 0600 	mov.w	r6, #0
 8005d80:	46a9      	mov	r9, r5
 8005d82:	46b2      	mov	sl, r6
 8005d84:	eb19 0309 	adds.w	r3, r9, r9
 8005d88:	eb4a 040a 	adc.w	r4, sl, sl
 8005d8c:	4699      	mov	r9, r3
 8005d8e:	46a2      	mov	sl, r4
 8005d90:	eb19 0905 	adds.w	r9, r9, r5
 8005d94:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d98:	f04f 0100 	mov.w	r1, #0
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005da8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dac:	4689      	mov	r9, r1
 8005dae:	4692      	mov	sl, r2
 8005db0:	eb19 0005 	adds.w	r0, r9, r5
 8005db4:	eb4a 0106 	adc.w	r1, sl, r6
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	461d      	mov	r5, r3
 8005dbe:	f04f 0600 	mov.w	r6, #0
 8005dc2:	196b      	adds	r3, r5, r5
 8005dc4:	eb46 0406 	adc.w	r4, r6, r6
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4623      	mov	r3, r4
 8005dcc:	f7fa fee4 	bl	8000b98 <__aeabi_uldivmod>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <UART_SetConfig+0x384>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2164      	movs	r1, #100	; 0x64
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	3332      	adds	r3, #50	; 0x32
 8005dea:	4a86      	ldr	r2, [pc, #536]	; (8006004 <UART_SetConfig+0x384>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df8:	4498      	add	r8, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	f04f 0600 	mov.w	r6, #0
 8005e02:	46a9      	mov	r9, r5
 8005e04:	46b2      	mov	sl, r6
 8005e06:	eb19 0309 	adds.w	r3, r9, r9
 8005e0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e0e:	4699      	mov	r9, r3
 8005e10:	46a2      	mov	sl, r4
 8005e12:	eb19 0905 	adds.w	r9, r9, r5
 8005e16:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e1a:	f04f 0100 	mov.w	r1, #0
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e2e:	4689      	mov	r9, r1
 8005e30:	4692      	mov	sl, r2
 8005e32:	eb19 0005 	adds.w	r0, r9, r5
 8005e36:	eb4a 0106 	adc.w	r1, sl, r6
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	461d      	mov	r5, r3
 8005e40:	f04f 0600 	mov.w	r6, #0
 8005e44:	196b      	adds	r3, r5, r5
 8005e46:	eb46 0406 	adc.w	r4, r6, r6
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	f7fa fea3 	bl	8000b98 <__aeabi_uldivmod>
 8005e52:	4603      	mov	r3, r0
 8005e54:	460c      	mov	r4, r1
 8005e56:	461a      	mov	r2, r3
 8005e58:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <UART_SetConfig+0x384>)
 8005e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2164      	movs	r1, #100	; 0x64
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	3332      	adds	r3, #50	; 0x32
 8005e6c:	4a65      	ldr	r2, [pc, #404]	; (8006004 <UART_SetConfig+0x384>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 0207 	and.w	r2, r3, #7
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4442      	add	r2, r8
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	e26f      	b.n	8006362 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e82:	f7ff fc03 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8005e86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	f04f 0600 	mov.w	r6, #0
 8005e90:	46a8      	mov	r8, r5
 8005e92:	46b1      	mov	r9, r6
 8005e94:	eb18 0308 	adds.w	r3, r8, r8
 8005e98:	eb49 0409 	adc.w	r4, r9, r9
 8005e9c:	4698      	mov	r8, r3
 8005e9e:	46a1      	mov	r9, r4
 8005ea0:	eb18 0805 	adds.w	r8, r8, r5
 8005ea4:	eb49 0906 	adc.w	r9, r9, r6
 8005ea8:	f04f 0100 	mov.w	r1, #0
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005eb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ebc:	4688      	mov	r8, r1
 8005ebe:	4691      	mov	r9, r2
 8005ec0:	eb18 0005 	adds.w	r0, r8, r5
 8005ec4:	eb49 0106 	adc.w	r1, r9, r6
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	461d      	mov	r5, r3
 8005ece:	f04f 0600 	mov.w	r6, #0
 8005ed2:	196b      	adds	r3, r5, r5
 8005ed4:	eb46 0406 	adc.w	r4, r6, r6
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4623      	mov	r3, r4
 8005edc:	f7fa fe5c 	bl	8000b98 <__aeabi_uldivmod>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4b47      	ldr	r3, [pc, #284]	; (8006004 <UART_SetConfig+0x384>)
 8005ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f04f 0600 	mov.w	r6, #0
 8005efa:	46a9      	mov	r9, r5
 8005efc:	46b2      	mov	sl, r6
 8005efe:	eb19 0309 	adds.w	r3, r9, r9
 8005f02:	eb4a 040a 	adc.w	r4, sl, sl
 8005f06:	4699      	mov	r9, r3
 8005f08:	46a2      	mov	sl, r4
 8005f0a:	eb19 0905 	adds.w	r9, r9, r5
 8005f0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f26:	4689      	mov	r9, r1
 8005f28:	4692      	mov	sl, r2
 8005f2a:	eb19 0005 	adds.w	r0, r9, r5
 8005f2e:	eb4a 0106 	adc.w	r1, sl, r6
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	461d      	mov	r5, r3
 8005f38:	f04f 0600 	mov.w	r6, #0
 8005f3c:	196b      	adds	r3, r5, r5
 8005f3e:	eb46 0406 	adc.w	r4, r6, r6
 8005f42:	461a      	mov	r2, r3
 8005f44:	4623      	mov	r3, r4
 8005f46:	f7fa fe27 	bl	8000b98 <__aeabi_uldivmod>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b2c      	ldr	r3, [pc, #176]	; (8006004 <UART_SetConfig+0x384>)
 8005f52:	fba3 1302 	umull	r1, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	2164      	movs	r1, #100	; 0x64
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	3332      	adds	r3, #50	; 0x32
 8005f64:	4a27      	ldr	r2, [pc, #156]	; (8006004 <UART_SetConfig+0x384>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f72:	4498      	add	r8, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	461d      	mov	r5, r3
 8005f78:	f04f 0600 	mov.w	r6, #0
 8005f7c:	46a9      	mov	r9, r5
 8005f7e:	46b2      	mov	sl, r6
 8005f80:	eb19 0309 	adds.w	r3, r9, r9
 8005f84:	eb4a 040a 	adc.w	r4, sl, sl
 8005f88:	4699      	mov	r9, r3
 8005f8a:	46a2      	mov	sl, r4
 8005f8c:	eb19 0905 	adds.w	r9, r9, r5
 8005f90:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fa8:	4689      	mov	r9, r1
 8005faa:	4692      	mov	sl, r2
 8005fac:	eb19 0005 	adds.w	r0, r9, r5
 8005fb0:	eb4a 0106 	adc.w	r1, sl, r6
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	461d      	mov	r5, r3
 8005fba:	f04f 0600 	mov.w	r6, #0
 8005fbe:	196b      	adds	r3, r5, r5
 8005fc0:	eb46 0406 	adc.w	r4, r6, r6
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4623      	mov	r3, r4
 8005fc8:	f7fa fde6 	bl	8000b98 <__aeabi_uldivmod>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <UART_SetConfig+0x384>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	; 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	; 0x32
 8005fe6:	4a07      	ldr	r2, [pc, #28]	; (8006004 <UART_SetConfig+0x384>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4442      	add	r2, r8
 8005ff8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ffa:	e1b2      	b.n	8006362 <UART_SetConfig+0x6e2>
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40011400 	.word	0x40011400
 8006004:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4ad7      	ldr	r2, [pc, #860]	; (800636c <UART_SetConfig+0x6ec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d005      	beq.n	800601e <UART_SetConfig+0x39e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4ad6      	ldr	r2, [pc, #856]	; (8006370 <UART_SetConfig+0x6f0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	f040 80d1 	bne.w	80061c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800601e:	f7ff fb49 	bl	80056b4 <HAL_RCC_GetPCLK2Freq>
 8006022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	469a      	mov	sl, r3
 8006028:	f04f 0b00 	mov.w	fp, #0
 800602c:	46d0      	mov	r8, sl
 800602e:	46d9      	mov	r9, fp
 8006030:	eb18 0308 	adds.w	r3, r8, r8
 8006034:	eb49 0409 	adc.w	r4, r9, r9
 8006038:	4698      	mov	r8, r3
 800603a:	46a1      	mov	r9, r4
 800603c:	eb18 080a 	adds.w	r8, r8, sl
 8006040:	eb49 090b 	adc.w	r9, r9, fp
 8006044:	f04f 0100 	mov.w	r1, #0
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006050:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006054:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006058:	4688      	mov	r8, r1
 800605a:	4691      	mov	r9, r2
 800605c:	eb1a 0508 	adds.w	r5, sl, r8
 8006060:	eb4b 0609 	adc.w	r6, fp, r9
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4619      	mov	r1, r3
 800606a:	f04f 0200 	mov.w	r2, #0
 800606e:	f04f 0300 	mov.w	r3, #0
 8006072:	f04f 0400 	mov.w	r4, #0
 8006076:	0094      	lsls	r4, r2, #2
 8006078:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	461a      	mov	r2, r3
 8006080:	4623      	mov	r3, r4
 8006082:	4628      	mov	r0, r5
 8006084:	4631      	mov	r1, r6
 8006086:	f7fa fd87 	bl	8000b98 <__aeabi_uldivmod>
 800608a:	4603      	mov	r3, r0
 800608c:	460c      	mov	r4, r1
 800608e:	461a      	mov	r2, r3
 8006090:	4bb8      	ldr	r3, [pc, #736]	; (8006374 <UART_SetConfig+0x6f4>)
 8006092:	fba3 2302 	umull	r2, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	469b      	mov	fp, r3
 80060a0:	f04f 0c00 	mov.w	ip, #0
 80060a4:	46d9      	mov	r9, fp
 80060a6:	46e2      	mov	sl, ip
 80060a8:	eb19 0309 	adds.w	r3, r9, r9
 80060ac:	eb4a 040a 	adc.w	r4, sl, sl
 80060b0:	4699      	mov	r9, r3
 80060b2:	46a2      	mov	sl, r4
 80060b4:	eb19 090b 	adds.w	r9, r9, fp
 80060b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d0:	4689      	mov	r9, r1
 80060d2:	4692      	mov	sl, r2
 80060d4:	eb1b 0509 	adds.w	r5, fp, r9
 80060d8:	eb4c 060a 	adc.w	r6, ip, sl
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4619      	mov	r1, r3
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	f04f 0400 	mov.w	r4, #0
 80060ee:	0094      	lsls	r4, r2, #2
 80060f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f4:	008b      	lsls	r3, r1, #2
 80060f6:	461a      	mov	r2, r3
 80060f8:	4623      	mov	r3, r4
 80060fa:	4628      	mov	r0, r5
 80060fc:	4631      	mov	r1, r6
 80060fe:	f7fa fd4b 	bl	8000b98 <__aeabi_uldivmod>
 8006102:	4603      	mov	r3, r0
 8006104:	460c      	mov	r4, r1
 8006106:	461a      	mov	r2, r3
 8006108:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <UART_SetConfig+0x6f4>)
 800610a:	fba3 1302 	umull	r1, r3, r3, r2
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2164      	movs	r1, #100	; 0x64
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	3332      	adds	r3, #50	; 0x32
 800611c:	4a95      	ldr	r2, [pc, #596]	; (8006374 <UART_SetConfig+0x6f4>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006128:	4498      	add	r8, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	469b      	mov	fp, r3
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	46d9      	mov	r9, fp
 8006134:	46e2      	mov	sl, ip
 8006136:	eb19 0309 	adds.w	r3, r9, r9
 800613a:	eb4a 040a 	adc.w	r4, sl, sl
 800613e:	4699      	mov	r9, r3
 8006140:	46a2      	mov	sl, r4
 8006142:	eb19 090b 	adds.w	r9, r9, fp
 8006146:	eb4a 0a0c 	adc.w	sl, sl, ip
 800614a:	f04f 0100 	mov.w	r1, #0
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800615e:	4689      	mov	r9, r1
 8006160:	4692      	mov	sl, r2
 8006162:	eb1b 0509 	adds.w	r5, fp, r9
 8006166:	eb4c 060a 	adc.w	r6, ip, sl
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	4619      	mov	r1, r3
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	f04f 0400 	mov.w	r4, #0
 800617c:	0094      	lsls	r4, r2, #2
 800617e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	461a      	mov	r2, r3
 8006186:	4623      	mov	r3, r4
 8006188:	4628      	mov	r0, r5
 800618a:	4631      	mov	r1, r6
 800618c:	f7fa fd04 	bl	8000b98 <__aeabi_uldivmod>
 8006190:	4603      	mov	r3, r0
 8006192:	460c      	mov	r4, r1
 8006194:	461a      	mov	r2, r3
 8006196:	4b77      	ldr	r3, [pc, #476]	; (8006374 <UART_SetConfig+0x6f4>)
 8006198:	fba3 1302 	umull	r1, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	3332      	adds	r3, #50	; 0x32
 80061aa:	4a72      	ldr	r2, [pc, #456]	; (8006374 <UART_SetConfig+0x6f4>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	f003 020f 	and.w	r2, r3, #15
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4442      	add	r2, r8
 80061bc:	609a      	str	r2, [r3, #8]
 80061be:	e0d0      	b.n	8006362 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7ff fa64 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 80061c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	469a      	mov	sl, r3
 80061ca:	f04f 0b00 	mov.w	fp, #0
 80061ce:	46d0      	mov	r8, sl
 80061d0:	46d9      	mov	r9, fp
 80061d2:	eb18 0308 	adds.w	r3, r8, r8
 80061d6:	eb49 0409 	adc.w	r4, r9, r9
 80061da:	4698      	mov	r8, r3
 80061dc:	46a1      	mov	r9, r4
 80061de:	eb18 080a 	adds.w	r8, r8, sl
 80061e2:	eb49 090b 	adc.w	r9, r9, fp
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061fa:	4688      	mov	r8, r1
 80061fc:	4691      	mov	r9, r2
 80061fe:	eb1a 0508 	adds.w	r5, sl, r8
 8006202:	eb4b 0609 	adc.w	r6, fp, r9
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	f04f 0400 	mov.w	r4, #0
 8006218:	0094      	lsls	r4, r2, #2
 800621a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	461a      	mov	r2, r3
 8006222:	4623      	mov	r3, r4
 8006224:	4628      	mov	r0, r5
 8006226:	4631      	mov	r1, r6
 8006228:	f7fa fcb6 	bl	8000b98 <__aeabi_uldivmod>
 800622c:	4603      	mov	r3, r0
 800622e:	460c      	mov	r4, r1
 8006230:	461a      	mov	r2, r3
 8006232:	4b50      	ldr	r3, [pc, #320]	; (8006374 <UART_SetConfig+0x6f4>)
 8006234:	fba3 2302 	umull	r2, r3, r3, r2
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	469b      	mov	fp, r3
 8006242:	f04f 0c00 	mov.w	ip, #0
 8006246:	46d9      	mov	r9, fp
 8006248:	46e2      	mov	sl, ip
 800624a:	eb19 0309 	adds.w	r3, r9, r9
 800624e:	eb4a 040a 	adc.w	r4, sl, sl
 8006252:	4699      	mov	r9, r3
 8006254:	46a2      	mov	sl, r4
 8006256:	eb19 090b 	adds.w	r9, r9, fp
 800625a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800626e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006272:	4689      	mov	r9, r1
 8006274:	4692      	mov	sl, r2
 8006276:	eb1b 0509 	adds.w	r5, fp, r9
 800627a:	eb4c 060a 	adc.w	r6, ip, sl
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4619      	mov	r1, r3
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	f04f 0400 	mov.w	r4, #0
 8006290:	0094      	lsls	r4, r2, #2
 8006292:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	461a      	mov	r2, r3
 800629a:	4623      	mov	r3, r4
 800629c:	4628      	mov	r0, r5
 800629e:	4631      	mov	r1, r6
 80062a0:	f7fa fc7a 	bl	8000b98 <__aeabi_uldivmod>
 80062a4:	4603      	mov	r3, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	461a      	mov	r2, r3
 80062aa:	4b32      	ldr	r3, [pc, #200]	; (8006374 <UART_SetConfig+0x6f4>)
 80062ac:	fba3 1302 	umull	r1, r3, r3, r2
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	2164      	movs	r1, #100	; 0x64
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	3332      	adds	r3, #50	; 0x32
 80062be:	4a2d      	ldr	r2, [pc, #180]	; (8006374 <UART_SetConfig+0x6f4>)
 80062c0:	fba2 2303 	umull	r2, r3, r2, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ca:	4498      	add	r8, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	469b      	mov	fp, r3
 80062d0:	f04f 0c00 	mov.w	ip, #0
 80062d4:	46d9      	mov	r9, fp
 80062d6:	46e2      	mov	sl, ip
 80062d8:	eb19 0309 	adds.w	r3, r9, r9
 80062dc:	eb4a 040a 	adc.w	r4, sl, sl
 80062e0:	4699      	mov	r9, r3
 80062e2:	46a2      	mov	sl, r4
 80062e4:	eb19 090b 	adds.w	r9, r9, fp
 80062e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062ec:	f04f 0100 	mov.w	r1, #0
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006300:	4689      	mov	r9, r1
 8006302:	4692      	mov	sl, r2
 8006304:	eb1b 0509 	adds.w	r5, fp, r9
 8006308:	eb4c 060a 	adc.w	r6, ip, sl
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4619      	mov	r1, r3
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	f04f 0400 	mov.w	r4, #0
 800631e:	0094      	lsls	r4, r2, #2
 8006320:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006324:	008b      	lsls	r3, r1, #2
 8006326:	461a      	mov	r2, r3
 8006328:	4623      	mov	r3, r4
 800632a:	4628      	mov	r0, r5
 800632c:	4631      	mov	r1, r6
 800632e:	f7fa fc33 	bl	8000b98 <__aeabi_uldivmod>
 8006332:	4603      	mov	r3, r0
 8006334:	460c      	mov	r4, r1
 8006336:	461a      	mov	r2, r3
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <UART_SetConfig+0x6f4>)
 800633a:	fba3 1302 	umull	r1, r3, r3, r2
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	2164      	movs	r1, #100	; 0x64
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	3332      	adds	r3, #50	; 0x32
 800634c:	4a09      	ldr	r2, [pc, #36]	; (8006374 <UART_SetConfig+0x6f4>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	f003 020f 	and.w	r2, r3, #15
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4442      	add	r2, r8
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	e7ff      	b.n	8006362 <UART_SetConfig+0x6e2>
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636c:	40011000 	.word	0x40011000
 8006370:	40011400 	.word	0x40011400
 8006374:	51eb851f 	.word	0x51eb851f

08006378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006378:	b084      	sub	sp, #16
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	f107 001c 	add.w	r0, r7, #28
 8006386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	2b01      	cmp	r3, #1
 800638e:	d122      	bne.n	80063d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f94a 	bl	8006664 <USB_CoreReset>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e01a      	b.n	800640c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f93e 	bl	8006664 <USB_CoreReset>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
 80063fe:	e005      	b.n	800640c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	2b01      	cmp	r3, #1
 8006410:	d10b      	bne.n	800642a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f043 0206 	orr.w	r2, r3, #6
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006436:	b004      	add	sp, #16
 8006438:	4770      	bx	lr

0800643a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 0201 	bic.w	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d106      	bne.n	80064aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	e00b      	b.n	80064c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d106      	bne.n	80064be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e001      	b.n	80064c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e003      	b.n	80064ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064c2:	2032      	movs	r0, #50	; 0x32
 80064c4:	f7fb fb3e 	bl	8001b44 <HAL_Delay>

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	019b      	lsls	r3, r3, #6
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a09      	ldr	r2, [pc, #36]	; (800651c <USB_FlushTxFifo+0x48>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e006      	b.n	800650e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b20      	cmp	r3, #32
 800650a:	d0f0      	beq.n	80064ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	00030d40 	.word	0x00030d40

08006520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2210      	movs	r2, #16
 8006530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a09      	ldr	r2, [pc, #36]	; (8006560 <USB_FlushRxFifo+0x40>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b10      	cmp	r3, #16
 800654e:	d0f0      	beq.n	8006532 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	00030d40 	.word	0x00030d40

08006564 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	; 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	460b      	mov	r3, r1
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	4613      	mov	r3, r2
 8006578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11a      	bne.n	80065c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800658a:	88bb      	ldrh	r3, [r7, #4]
 800658c:	3303      	adds	r3, #3
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e00f      	b.n	80065b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	031a      	lsls	r2, r3, #12
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	461a      	mov	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3304      	adds	r3, #4
 80065b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	3301      	adds	r3, #1
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3eb      	bcc.n	8006598 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	; 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b089      	sub	sp, #36	; 0x24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	4613      	mov	r3, r2
 80065da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	3303      	adds	r3, #3
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	e00b      	b.n	800660a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	3304      	adds	r3, #4
 8006602:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	3301      	adds	r3, #1
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d3ef      	bcc.n	80065f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006612:	69fb      	ldr	r3, [r7, #28]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3724      	adds	r7, #36	; 0x24
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4013      	ands	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0301 	and.w	r3, r3, #1
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a13      	ldr	r2, [pc, #76]	; (80066c8 <USB_CoreReset+0x64>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e01b      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	daf2      	bge.n	8006670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <USB_CoreReset+0x64>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d0f0      	beq.n	800669a <USB_CoreReset+0x36>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	00030d40 	.word	0x00030d40

080066cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066cc:	b084      	sub	sp, #16
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	f107 001c 	add.w	r0, r7, #28
 80066da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10a      	bne.n	800673a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006732:	f043 0304 	orr.w	r3, r3, #4
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e014      	b.n	8006764 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e009      	b.n	8006764 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800675e:	f023 0304 	bic.w	r3, r3, #4
 8006762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006764:	2110      	movs	r1, #16
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff feb4 	bl	80064d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fed7 	bl	8006520 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e015      	b.n	80067a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006784:	461a      	mov	r2, r3
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	461a      	mov	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d3e5      	bcc.n	8006778 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80067ac:	2101      	movs	r1, #1
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8ac 	bl	800690c <USB_DriveVbus>

  HAL_Delay(200U);
 80067b4:	20c8      	movs	r0, #200	; 0xc8
 80067b6:	f7fb f9c5 	bl	8001b44 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f04f 32ff 	mov.w	r2, #4294967295
 80067c6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a14      	ldr	r2, [pc, #80]	; (8006830 <USB_HostInit+0x164>)
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a13      	ldr	r2, [pc, #76]	; (8006834 <USB_HostInit+0x168>)
 80067e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80067ea:	e009      	b.n	8006800 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2280      	movs	r2, #128	; 0x80
 80067f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a10      	ldr	r2, [pc, #64]	; (8006838 <USB_HostInit+0x16c>)
 80067f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <USB_HostInit+0x170>)
 80067fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	f043 0210 	orr.w	r2, r3, #16
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <USB_HostInit+0x174>)
 8006818:	4313      	orrs	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800682a:	b004      	add	sp, #16
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	01000200 	.word	0x01000200
 8006834:	00e00300 	.word	0x00e00300
 8006838:	00600080 	.word	0x00600080
 800683c:	004000e0 	.word	0x004000e0
 8006840:	a3200008 	.word	0xa3200008

08006844 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d107      	bne.n	8006896 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800688c:	461a      	mov	r2, r3
 800688e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006892:	6053      	str	r3, [r2, #4]
 8006894:	e009      	b.n	80068aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d106      	bne.n	80068aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	461a      	mov	r2, r3
 80068a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80068a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068e8:	2064      	movs	r0, #100	; 0x64
 80068ea:	f7fb f92b 	bl	8001b44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80068fc:	200a      	movs	r0, #10
 80068fe:	f7fb f921 	bl	8001b44 <HAL_Delay>

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d109      	bne.n	8006950 <USB_DriveVbus+0x44>
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d106      	bne.n	8006950 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800694a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800694e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d109      	bne.n	8006970 <USB_DriveVbus+0x64>
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800696a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800696e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	0c5b      	lsrs	r3, r3, #17
 800699c:	f003 0303 	and.w	r3, r3, #3
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	b29b      	uxth	r3, r3
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	4608      	mov	r0, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	4603      	mov	r3, r0
 80069e0:	70fb      	strb	r3, [r7, #3]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70bb      	strb	r3, [r7, #2]
 80069e6:	4613      	mov	r3, r2
 80069e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fe:	461a      	mov	r2, r3
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006a06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d87e      	bhi.n	8006b0c <USB_HC_Init+0x13c>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <USB_HC_Init+0x44>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006acf 	.word	0x08006acf
 8006a1c:	08006a25 	.word	0x08006a25
 8006a20:	08006a91 	.word	0x08006a91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	461a      	mov	r2, r3
 8006a32:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da10      	bge.n	8006a62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006a60:	e057      	b.n	8006b12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d051      	beq.n	8006b12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	78fa      	ldrb	r2, [r7, #3]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a8c:	60d3      	str	r3, [r2, #12]
      break;
 8006a8e:	e040      	b.n	8006b12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006aa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aa4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	da34      	bge.n	8006b16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006acc:	e023      	b.n	8006b16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ada:	461a      	mov	r2, r3
 8006adc:	f240 2325 	movw	r3, #549	; 0x225
 8006ae0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ae2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da17      	bge.n	8006b1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	0151      	lsls	r1, r2, #5
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	440a      	add	r2, r1
 8006b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006b08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006b0a:	e006      	b.n	8006b1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	e004      	b.n	8006b1c <USB_HC_Init+0x14c>
      break;
 8006b12:	bf00      	nop
 8006b14:	e002      	b.n	8006b1c <USB_HC_Init+0x14c>
      break;
 8006b16:	bf00      	nop
 8006b18:	e000      	b.n	8006b1c <USB_HC_Init+0x14c>
      break;
 8006b1a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b36:	4313      	orrs	r3, r2
 8006b38:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da03      	bge.n	8006b56 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e001      	b.n	8006b5a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d103      	bne.n	8006b6a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e001      	b.n	8006b6e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b6e:	787b      	ldrb	r3, [r7, #1]
 8006b70:	059b      	lsls	r3, r3, #22
 8006b72:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b76:	78bb      	ldrb	r3, [r7, #2]
 8006b78:	02db      	lsls	r3, r3, #11
 8006b7a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b7e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b84:	049b      	lsls	r3, r3, #18
 8006b86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b92:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	0159      	lsls	r1, r3, #5
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	440b      	add	r3, r1
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006baa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d10f      	bne.n	8006bd4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bd2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop

08006be4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08c      	sub	sp, #48	; 0x30
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c00:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d028      	beq.n	8006c60 <USB_HC_StartXfer+0x7c>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	791b      	ldrb	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d124      	bne.n	8006c60 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <USB_HC_StartXfer+0x50>
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	795b      	ldrb	r3, [r3, #5]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d107      	bne.n	8006c34 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa30 	bl	8007090 <USB_DoPing>
      return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e114      	b.n	8006e5e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d112      	bne.n	8006c60 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c54:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006c58:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d018      	beq.n	8006c9a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	8912      	ldrh	r2, [r2, #8]
 8006c70:	4413      	add	r3, r2
 8006c72:	3b01      	subs	r3, #1
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	8912      	ldrh	r2, [r2, #8]
 8006c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c80:	8b7b      	ldrh	r3, [r7, #26]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90b      	bls.n	8006c9e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006c86:	8b7b      	ldrh	r3, [r7, #26]
 8006c88:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006c8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	8912      	ldrh	r2, [r2, #8]
 8006c90:	fb02 f203 	mul.w	r2, r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	611a      	str	r2, [r3, #16]
 8006c98:	e001      	b.n	8006c9e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d006      	beq.n	8006cb4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	8912      	ldrh	r2, [r2, #8]
 8006cac:	fb02 f203 	mul.w	r2, r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cbe:	04d9      	lsls	r1, r3, #19
 8006cc0:	4b69      	ldr	r3, [pc, #420]	; (8006e68 <USB_HC_StartXfer+0x284>)
 8006cc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	7a9b      	ldrb	r3, [r3, #10]
 8006cca:	075b      	lsls	r3, r3, #29
 8006ccc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cd0:	69f9      	ldr	r1, [r7, #28]
 8006cd2:	0148      	lsls	r0, r1, #5
 8006cd4:	6a39      	ldr	r1, [r7, #32]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cdc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cde:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68d9      	ldr	r1, [r3, #12]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	6a3a      	ldr	r2, [r7, #32]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	7e7b      	ldrb	r3, [r7, #25]
 8006d42:	075b      	lsls	r3, r3, #29
 8006d44:	69f9      	ldr	r1, [r7, #28]
 8006d46:	0148      	lsls	r0, r1, #5
 8006d48:	6a39      	ldr	r1, [r7, #32]
 8006d4a:	4401      	add	r1, r0
 8006d4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d64:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d66:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d6e:	4a3f      	ldr	r2, [pc, #252]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d70:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	78db      	ldrb	r3, [r3, #3]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d7a:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	4a3a      	ldr	r2, [pc, #232]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e005      	b.n	8006d94 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d88:	4b38      	ldr	r3, [pc, #224]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d90:	4a36      	ldr	r2, [pc, #216]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d92:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d94:	4b35      	ldr	r3, [pc, #212]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d9c:	4a33      	ldr	r2, [pc, #204]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006d9e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <USB_HC_StartXfer+0x288>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e04f      	b.n	8006e5e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	78db      	ldrb	r3, [r3, #3]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d14a      	bne.n	8006e5c <USB_HC_StartXfer+0x278>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d046      	beq.n	8006e5c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	79db      	ldrb	r3, [r3, #7]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d830      	bhi.n	8006e38 <USB_HC_StartXfer+0x254>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USB_HC_StartXfer+0x1f8>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006e11 	.word	0x08006e11
 8006de4:	08006ded 	.word	0x08006ded
 8006de8:	08006e11 	.word	0x08006e11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	3303      	adds	r3, #3
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006df6:	8afa      	ldrh	r2, [r7, #22]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d91c      	bls.n	8006e3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f043 0220 	orr.w	r2, r3, #32
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e0e:	e015      	b.n	8006e3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	3303      	adds	r3, #3
 8006e16:	089b      	lsrs	r3, r3, #2
 8006e18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e1a:	8afa      	ldrh	r2, [r7, #22]
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90a      	bls.n	8006e40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e36:	e003      	b.n	8006e40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006e38:	bf00      	nop
 8006e3a:	e002      	b.n	8006e42 <USB_HC_StartXfer+0x25e>
        break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <USB_HC_StartXfer+0x25e>
        break;
 8006e40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	68d9      	ldr	r1, [r3, #12]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	785a      	ldrb	r2, [r3, #1]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	b298      	uxth	r0, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4603      	mov	r3, r0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff fb84 	bl	8006564 <USB_WritePacket>
  }

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	1ff80000 	.word	0x1ff80000
 8006e6c:	200000b4 	.word	0x200000b4

08006e70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	b29b      	uxth	r3, r3
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	0c9b      	lsrs	r3, r3, #18
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <USB_HC_Halt+0x3a>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d16c      	bne.n	8006fa6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d143      	bne.n	8006f80 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f64:	d81d      	bhi.n	8006fa2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f7c:	d0ec      	beq.n	8006f58 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f7e:	e080      	b.n	8007082 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fa0:	e06f      	b.n	8007082 <USB_HC_Halt+0x1f0>
          break;
 8006fa2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fa4:	e06d      	b.n	8007082 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d143      	bne.n	800705e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	0151      	lsls	r1, r2, #5
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	440a      	add	r2, r1
 8006fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	440a      	add	r2, r1
 800700c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007014:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	440a      	add	r2, r1
 800702c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007034:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3301      	adds	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007042:	d81d      	bhi.n	8007080 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800705a:	d0ec      	beq.n	8007036 <USB_HC_Halt+0x1a4>
 800705c:	e011      	b.n	8007082 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	440a      	add	r2, r1
 8007074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e000      	b.n	8007082 <USB_HC_Halt+0x1f0>
          break;
 8007080:	bf00      	nop
    }
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070a4:	2301      	movs	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	04da      	lsls	r2, r3, #19
 80070ac:	4b15      	ldr	r3, [pc, #84]	; (8007104 <USB_DoPing+0x74>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070d8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ee:	461a      	mov	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	1ff80000 	.word	0x1ff80000

08007108 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff f99f 	bl	800645c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800711e:	2110      	movs	r1, #16
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f9d7 	bl	80064d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff f9fa 	bl	8006520 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	e01f      	b.n	8007172 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007148:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007150:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007158:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	3301      	adds	r3, #1
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d9dc      	bls.n	8007132 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	e034      	b.n	80071e8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007194:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800719c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b2:	461a      	mov	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3301      	adds	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071c4:	d80c      	bhi.n	80071e0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071dc:	d0ec      	beq.n	80071b8 <USB_StopHost+0xb0>
 80071de:	e000      	b.n	80071e2 <USB_StopHost+0xda>
        break;
 80071e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	3301      	adds	r3, #1
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b0f      	cmp	r3, #15
 80071ec:	d9c7      	bls.n	800717e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071f4:	461a      	mov	r2, r3
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff f918 	bl	800643a <USB_EnableGlobalInt>

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b089      	sub	sp, #36	; 0x24
 8007218:	af04      	add	r7, sp, #16
 800721a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800721c:	2301      	movs	r3, #1
 800721e:	2202      	movs	r2, #2
 8007220:	2102      	movs	r1, #2
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fc68 	bl	8007af8 <USBH_FindInterface>
 8007228:	4603      	mov	r3, r0
 800722a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	2bff      	cmp	r3, #255	; 0xff
 8007230:	d002      	beq.n	8007238 <USBH_CDC_InterfaceInit+0x24>
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d901      	bls.n	800723c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007238:	2302      	movs	r3, #2
 800723a:	e13d      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc3d 	bl	8007ac0 <USBH_SelectInterface>
 8007246:	4603      	mov	r3, r0
 8007248:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007250:	2302      	movs	r3, #2
 8007252:	e131      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800725a:	2050      	movs	r0, #80	; 0x50
 800725c:	f002 fa04 	bl	8009668 <malloc>
 8007260:	4603      	mov	r3, r0
 8007262:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007274:	2302      	movs	r3, #2
 8007276:	e11f      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007278:	2250      	movs	r2, #80	; 0x50
 800727a:	2100      	movs	r1, #0
 800727c:	68b8      	ldr	r0, [r7, #8]
 800727e:	f002 fa03 	bl	8009688 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	211a      	movs	r1, #26
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	4413      	add	r3, r2
 800728e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b25b      	sxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	da15      	bge.n	80072c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	211a      	movs	r1, #26
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	211a      	movs	r1, #26
 80072b6:	fb01 f303 	mul.w	r3, r1, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072c0:	881a      	ldrh	r2, [r3, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fe36 	bl	8008f3e <USBH_AllocPipe>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	7819      	ldrb	r1, [r3, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7858      	ldrb	r0, [r3, #1]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	8952      	ldrh	r2, [r2, #10]
 80072f2:	9202      	str	r2, [sp, #8]
 80072f4:	2203      	movs	r2, #3
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4623      	mov	r3, r4
 80072fc:	4602      	mov	r2, r0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fdee 	bl	8008ee0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f002 f8fb 	bl	8009508 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007312:	2300      	movs	r3, #0
 8007314:	2200      	movs	r2, #0
 8007316:	210a      	movs	r1, #10
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fbed 	bl	8007af8 <USBH_FindInterface>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2bff      	cmp	r3, #255	; 0xff
 8007326:	d002      	beq.n	800732e <USBH_CDC_InterfaceInit+0x11a>
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d901      	bls.n	8007332 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	e0c2      	b.n	80074b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	211a      	movs	r1, #26
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b25b      	sxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	da16      	bge.n	8007378 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	211a      	movs	r1, #26
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	4413      	add	r3, r2
 8007356:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	211a      	movs	r1, #26
 8007366:	fb01 f303 	mul.w	r3, r1, r3
 800736a:	4413      	add	r3, r2
 800736c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	835a      	strh	r2, [r3, #26]
 8007376:	e015      	b.n	80073a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	211a      	movs	r1, #26
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007388:	781a      	ldrb	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	211a      	movs	r1, #26
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	4413      	add	r3, r2
 800739a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800739e:	881a      	ldrh	r2, [r3, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	211a      	movs	r1, #26
 80073aa:	fb01 f303 	mul.w	r3, r1, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da16      	bge.n	80073ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	211a      	movs	r1, #26
 80073c2:	fb01 f303 	mul.w	r3, r1, r3
 80073c6:	4413      	add	r3, r2
 80073c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	211a      	movs	r1, #26
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	4413      	add	r3, r2
 80073de:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073e2:	881a      	ldrh	r2, [r3, #0]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	835a      	strh	r2, [r3, #26]
 80073e8:	e015      	b.n	8007416 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	211a      	movs	r1, #26
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	4413      	add	r3, r2
 80073f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	211a      	movs	r1, #26
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	4413      	add	r3, r2
 800740c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007410:	881a      	ldrh	r2, [r3, #0]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	7b9b      	ldrb	r3, [r3, #14]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fd8e 	bl	8008f3e <USBH_AllocPipe>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	7bdb      	ldrb	r3, [r3, #15]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fd84 	bl	8008f3e <USBH_AllocPipe>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	7b59      	ldrb	r1, [r3, #13]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	7b98      	ldrb	r0, [r3, #14]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	8b12      	ldrh	r2, [r2, #24]
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	2202      	movs	r2, #2
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4623      	mov	r3, r4
 8007460:	4602      	mov	r2, r0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fd3c 	bl	8008ee0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	7b19      	ldrb	r1, [r3, #12]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	7bd8      	ldrb	r0, [r3, #15]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	8b52      	ldrh	r2, [r2, #26]
 8007480:	9202      	str	r2, [sp, #8]
 8007482:	2202      	movs	r2, #2
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4623      	mov	r3, r4
 800748a:	4602      	mov	r2, r0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 fd27 	bl	8008ee0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	7b5b      	ldrb	r3, [r3, #13]
 800749e:	2200      	movs	r2, #0
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 f830 	bl	8009508 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7b1b      	ldrb	r3, [r3, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f002 f829 	bl	8009508 <USBH_LL_SetToggle>

  return USBH_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd90      	pop	{r4, r7, pc}

080074c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00e      	beq.n	80074f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fd1c 	bl	8008f1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fd47 	bl	8008f80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	7b1b      	ldrb	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	7b1b      	ldrb	r3, [r3, #12]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fd09 	bl	8008f1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	7b1b      	ldrb	r3, [r3, #12]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fd34 	bl	8008f80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	7b5b      	ldrb	r3, [r3, #13]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	7b5b      	ldrb	r3, [r3, #13]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fcf6 	bl	8008f1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	7b5b      	ldrb	r3, [r3, #13]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fd21 	bl	8008f80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	4618      	mov	r0, r3
 800755a:	f002 f88d 	bl	8009678 <free>
    phost->pActiveClass->pData = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007564:	2200      	movs	r2, #0
 8007566:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3340      	adds	r3, #64	; 0x40
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8b1 	bl	80076f2 <GetLineCoding>
 8007590:	4603      	mov	r3, r0
 8007592:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a0:	2102      	movs	r1, #2
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075a6:	7afb      	ldrb	r3, [r7, #11]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d877      	bhi.n	80076c4 <USBH_CDC_Process+0x114>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <USBH_CDC_Process+0x2c>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	080075f1 	.word	0x080075f1
 80075e0:	080075f7 	.word	0x080075f7
 80075e4:	08007627 	.word	0x08007627
 80075e8:	0800769b 	.word	0x0800769b
 80075ec:	080076a9 	.word	0x080076a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
      break;
 80075f4:	e06d      	b.n	80076d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f897 	bl	8007730 <SetLineCoding>
 8007602:	4603      	mov	r3, r0
 8007604:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d104      	bne.n	8007616 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007614:	e058      	b.n	80076c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d055      	beq.n	80076c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2204      	movs	r2, #4
 8007620:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007624:	e050      	b.n	80076c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	3340      	adds	r3, #64	; 0x40
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f860 	bl	80076f2 <GetLineCoding>
 8007632:	4603      	mov	r3, r0
 8007634:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d126      	bne.n	800768a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	791b      	ldrb	r3, [r3, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d13b      	bne.n	80076cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007660:	429a      	cmp	r2, r3
 8007662:	d133      	bne.n	80076cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007670:	429a      	cmp	r2, r3
 8007672:	d12b      	bne.n	80076cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800767e:	429a      	cmp	r2, r3
 8007680:	d124      	bne.n	80076cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f95a 	bl	800793c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007688:	e020      	b.n	80076cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d01d      	beq.n	80076cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2204      	movs	r2, #4
 8007694:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007698:	e018      	b.n	80076cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f867 	bl	800776e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f8dc 	bl	800785e <CDC_ProcessReception>
      break;
 80076a6:	e014      	b.n	80076d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 ffe5 	bl	800867a <USBH_ClrFeature>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80076c2:	e005      	b.n	80076d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80076c4:	bf00      	nop
 80076c6:	e004      	b.n	80076d2 <USBH_CDC_Process+0x122>
      break;
 80076c8:	bf00      	nop
 80076ca:	e002      	b.n	80076d2 <USBH_CDC_Process+0x122>
      break;
 80076cc:	bf00      	nop
 80076ce:	e000      	b.n	80076d2 <USBH_CDC_Process+0x122>
      break;
 80076d0:	bf00      	nop

  }

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	22a1      	movs	r2, #161	; 0xa1
 8007700:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2221      	movs	r2, #33	; 0x21
 8007706:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2207      	movs	r2, #7
 8007718:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2207      	movs	r2, #7
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 f98a 	bl	8008a3a <USBH_CtlReq>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2221      	movs	r2, #33	; 0x21
 800773e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2207      	movs	r2, #7
 8007756:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2207      	movs	r2, #7
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f96b 	bl	8008a3a <USBH_CtlReq>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b086      	sub	sp, #24
 8007772:	af02      	add	r7, sp, #8
 8007774:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007780:	2300      	movs	r3, #0
 8007782:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800778a:	2b01      	cmp	r3, #1
 800778c:	d002      	beq.n	8007794 <CDC_ProcessTransmission+0x26>
 800778e:	2b02      	cmp	r3, #2
 8007790:	d025      	beq.n	80077de <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007792:	e060      	b.n	8007856 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	8b12      	ldrh	r2, [r2, #24]
 800779c:	4293      	cmp	r3, r2
 800779e:	d90c      	bls.n	80077ba <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	69d9      	ldr	r1, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8b1a      	ldrh	r2, [r3, #24]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	7b58      	ldrb	r0, [r3, #13]
 80077ac:	2301      	movs	r3, #1
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fb51 	bl	8008e5a <USBH_BulkSendData>
 80077b8:	e00c      	b.n	80077d4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7b58      	ldrb	r0, [r3, #13]
 80077c8:	2301      	movs	r3, #1
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	4603      	mov	r3, r0
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fb43 	bl	8008e5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077dc:	e03b      	b.n	8007856 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7b5b      	ldrb	r3, [r3, #13]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fe65 	bl	80094b4 <USBH_LL_GetURBState>
 80077ea:	4603      	mov	r3, r0
 80077ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d128      	bne.n	8007846 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	8b12      	ldrh	r2, [r2, #24]
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d90e      	bls.n	800781e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	8b12      	ldrh	r2, [r2, #24]
 8007808:	1a9a      	subs	r2, r3, r2
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	8b12      	ldrh	r2, [r2, #24]
 8007816:	441a      	add	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	61da      	str	r2, [r3, #28]
 800781c:	e002      	b.n	8007824 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007834:	e00e      	b.n	8007854 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f868 	bl	8007914 <USBH_CDC_TransmitCallback>
      break;
 8007844:	e006      	b.n	8007854 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d103      	bne.n	8007854 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007854:	bf00      	nop
  }
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007870:	2300      	movs	r3, #0
 8007872:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800787a:	2b03      	cmp	r3, #3
 800787c:	d002      	beq.n	8007884 <CDC_ProcessReception+0x26>
 800787e:	2b04      	cmp	r3, #4
 8007880:	d00e      	beq.n	80078a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007882:	e043      	b.n	800790c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	6a19      	ldr	r1, [r3, #32]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	8b5a      	ldrh	r2, [r3, #26]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	7b1b      	ldrb	r3, [r3, #12]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fb07 	bl	8008ea4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2204      	movs	r2, #4
 800789a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800789e:	e035      	b.n	800790c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fe04 	bl	80094b4 <USBH_LL_GetURBState>
 80078ac:	4603      	mov	r3, r0
 80078ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d129      	bne.n	800790a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	7b1b      	ldrb	r3, [r3, #12]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fd67 	bl	8009390 <USBH_LL_GetLastXferSize>
 80078c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d016      	beq.n	80078fc <CDC_ProcessReception+0x9e>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	8b5b      	ldrh	r3, [r3, #26]
 80078d2:	461a      	mov	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d910      	bls.n	80078fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad2      	subs	r2, r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	441a      	add	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2203      	movs	r2, #3
 80078f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078fa:	e006      	b.n	800790a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f80f 	bl	8007928 <USBH_CDC_ReceiveCallback>
      break;
 800790a:	bf00      	nop
  }
}
 800790c:	bf00      	nop
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007964:	2302      	movs	r3, #2
 8007966:	e029      	b.n	80079bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	79fa      	ldrb	r2, [r7, #7]
 800796c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f81f 	bl	80079c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f001 fc39 	bl	800922c <USBH_LL_Init>

  return USBH_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e009      	b.n	80079ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	33e0      	adds	r3, #224	; 0xe0
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b0e      	cmp	r3, #14
 80079ee:	d9f2      	bls.n	80079d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e009      	b.n	8007a0a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d3f1      	bcc.n	80079f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d016      	beq.n	8007aae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10e      	bne.n	8007aa8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a90:	1c59      	adds	r1, r3, #1
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	33de      	adds	r3, #222	; 0xde
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
 8007aa6:	e004      	b.n	8007ab2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	e001      	b.n	8007ab2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d204      	bcs.n	8007ae6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ae4:	e001      	b.n	8007aea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	4608      	mov	r0, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	461a      	mov	r2, r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	70fb      	strb	r3, [r7, #3]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70bb      	strb	r3, [r7, #2]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b22:	e025      	b.n	8007b70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	221a      	movs	r2, #26
 8007b28:	fb02 f303 	mul.w	r3, r2, r3
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	3302      	adds	r3, #2
 8007b34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	78fa      	ldrb	r2, [r7, #3]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d002      	beq.n	8007b46 <USBH_FindInterface+0x4e>
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	2bff      	cmp	r3, #255	; 0xff
 8007b44:	d111      	bne.n	8007b6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b4a:	78ba      	ldrb	r2, [r7, #2]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d002      	beq.n	8007b56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b50:	78bb      	ldrb	r3, [r7, #2]
 8007b52:	2bff      	cmp	r3, #255	; 0xff
 8007b54:	d109      	bne.n	8007b6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b5a:	787a      	ldrb	r2, [r7, #1]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d002      	beq.n	8007b66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b60:	787b      	ldrb	r3, [r7, #1]
 8007b62:	2bff      	cmp	r3, #255	; 0xff
 8007b64:	d101      	bne.n	8007b6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	e006      	b.n	8007b78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d9d6      	bls.n	8007b24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b76:	23ff      	movs	r3, #255	; 0xff
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	371c      	adds	r7, #28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fb89 	bl	80092a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007b92:	2101      	movs	r1, #1
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fca0 	bl	80094da <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007bac:	2302      	movs	r3, #2
 8007bae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d102      	bne.n	8007bc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2203      	movs	r2, #3
 8007bc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b0b      	cmp	r3, #11
 8007bce:	f200 81b3 	bhi.w	8007f38 <USBH_Process+0x394>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <USBH_Process+0x34>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c09 	.word	0x08007c09
 8007bdc:	08007c3b 	.word	0x08007c3b
 8007be0:	08007ca3 	.word	0x08007ca3
 8007be4:	08007ed3 	.word	0x08007ed3
 8007be8:	08007f39 	.word	0x08007f39
 8007bec:	08007d47 	.word	0x08007d47
 8007bf0:	08007e79 	.word	0x08007e79
 8007bf4:	08007d7d 	.word	0x08007d7d
 8007bf8:	08007d9d 	.word	0x08007d9d
 8007bfc:	08007dbd 	.word	0x08007dbd
 8007c00:	08007deb 	.word	0x08007deb
 8007c04:	08007ebb 	.word	0x08007ebb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8193 	beq.w	8007f3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c1c:	20c8      	movs	r0, #200	; 0xc8
 8007c1e:	f001 fca6 	bl	800956e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fb99 	bl	800935a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c38:	e180      	b.n	8007f3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d107      	bne.n	8007c54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c52:	e182      	b.n	8007f5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c5e:	d914      	bls.n	8007c8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d903      	bls.n	8007c82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	220d      	movs	r2, #13
 8007c7e:	701a      	strb	r2, [r3, #0]
      break;
 8007c80:	e16b      	b.n	8007f5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
      break;
 8007c88:	e167      	b.n	8007f5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c90:	f103 020a 	add.w	r2, r3, #10
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c9a:	200a      	movs	r0, #10
 8007c9c:	f001 fc67 	bl	800956e <USBH_Delay>
      break;
 8007ca0:	e15b      	b.n	8007f5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007cb8:	2064      	movs	r0, #100	; 0x64
 8007cba:	f001 fc58 	bl	800956e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fb26 	bl	8009310 <USBH_LL_GetSpeed>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f931 	bl	8008f3e <USBH_AllocPipe>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ce4:	2180      	movs	r1, #128	; 0x80
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f929 	bl	8008f3e <USBH_AllocPipe>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7919      	ldrb	r1, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d08:	b292      	uxth	r2, r2
 8007d0a:	9202      	str	r2, [sp, #8]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	9201      	str	r2, [sp, #4]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4603      	mov	r3, r0
 8007d14:	2280      	movs	r2, #128	; 0x80
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 f8e2 	bl	8008ee0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	7959      	ldrb	r1, [r3, #5]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d30:	b292      	uxth	r2, r2
 8007d32:	9202      	str	r2, [sp, #8]
 8007d34:	2200      	movs	r2, #0
 8007d36:	9201      	str	r2, [sp, #4]
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f001 f8ce 	bl	8008ee0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d44:	e109      	b.n	8007f5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f90c 	bl	8007f64 <USBH_HandleEnum>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 80f3 	bne.w	8007f40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d103      	bne.n	8007d74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2208      	movs	r2, #8
 8007d70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d72:	e0e5      	b.n	8007f40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2207      	movs	r2, #7
 8007d78:	701a      	strb	r2, [r3, #0]
      break;
 8007d7a:	e0e1      	b.n	8007f40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 80de 	beq.w	8007f44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d8e:	2101      	movs	r1, #1
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2208      	movs	r2, #8
 8007d98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d9a:	e0d3      	b.n	8007f44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fc20 	bl	80085ec <USBH_SetCfg>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 80ca 	bne.w	8007f48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2209      	movs	r2, #9
 8007db8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007dba:	e0c5      	b.n	8007f48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007dca:	2101      	movs	r1, #1
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc30 	bl	8008632 <USBH_SetFeature>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 80b9 	bne.w	8007f4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	220a      	movs	r2, #10
 8007dde:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007de0:	e0b4      	b.n	8007f4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	220a      	movs	r2, #10
 8007de6:	701a      	strb	r2, [r3, #0]
      break;
 8007de8:	e0b0      	b.n	8007f4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80ad 	beq.w	8007f50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
 8007e02:	e016      	b.n	8007e32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32de      	adds	r2, #222	; 0xde
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	791a      	ldrb	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d108      	bne.n	8007e2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e1a:	7bfa      	ldrb	r2, [r7, #15]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	32de      	adds	r2, #222	; 0xde
 8007e20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e2a:	e005      	b.n	8007e38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0e5      	beq.n	8007e04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d109      	bne.n	8007e68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2206      	movs	r2, #6
 8007e58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e60:	2103      	movs	r1, #3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e66:	e073      	b.n	8007f50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	220d      	movs	r2, #13
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e06f      	b.n	8007f50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	220d      	movs	r2, #13
 8007e74:	701a      	strb	r2, [r3, #0]
      break;
 8007e76:	e06b      	b.n	8007f50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d017      	beq.n	8007eb2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220b      	movs	r2, #11
 8007e9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ea0:	e058      	b.n	8007f54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d154      	bne.n	8007f54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	220d      	movs	r2, #13
 8007eae:	701a      	strb	r2, [r3, #0]
      break;
 8007eb0:	e050      	b.n	8007f54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220d      	movs	r2, #13
 8007eb6:	701a      	strb	r2, [r3, #0]
      break;
 8007eb8:	e04c      	b.n	8007f54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d049      	beq.n	8007f58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
      }
      break;
 8007ed0:	e042      	b.n	8007f58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fd72 	bl	80079c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f0e:	2105      	movs	r1, #5
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d107      	bne.n	8007f30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fe2b 	bl	8007b84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f2e:	e014      	b.n	8007f5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 f9b7 	bl	80092a4 <USBH_LL_Start>
      break;
 8007f36:	e010      	b.n	8007f5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f38:	bf00      	nop
 8007f3a:	e00e      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e00c      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f40:	bf00      	nop
 8007f42:	e00a      	b.n	8007f5a <USBH_Process+0x3b6>
    break;
 8007f44:	bf00      	nop
 8007f46:	e008      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e006      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e004      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f50:	bf00      	nop
 8007f52:	e002      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f54:	bf00      	nop
 8007f56:	e000      	b.n	8007f5a <USBH_Process+0x3b6>
      break;
 8007f58:	bf00      	nop
  }
  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b07      	cmp	r3, #7
 8007f7a:	f200 81c1 	bhi.w	8008300 <USBH_HandleEnum+0x39c>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USBH_HandleEnum+0x20>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fa5 	.word	0x08007fa5
 8007f88:	08008063 	.word	0x08008063
 8007f8c:	080080cd 	.word	0x080080cd
 8007f90:	0800815b 	.word	0x0800815b
 8007f94:	080081c5 	.word	0x080081c5
 8007f98:	08008235 	.word	0x08008235
 8007f9c:	0800827b 	.word	0x0800827b
 8007fa0:	080082c1 	.word	0x080082c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007fa4:	2108      	movs	r1, #8
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa50 	bl	800844c <USBH_Get_DevDesc>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d130      	bne.n	8008018 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7919      	ldrb	r1, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fda:	b292      	uxth	r2, r2
 8007fdc:	9202      	str	r2, [sp, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	9201      	str	r2, [sp, #4]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2280      	movs	r2, #128	; 0x80
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 ff79 	bl	8008ee0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7959      	ldrb	r1, [r3, #5]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008002:	b292      	uxth	r2, r2
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	2200      	movs	r2, #0
 8008008:	9201      	str	r2, [sp, #4]
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4603      	mov	r3, r0
 800800e:	2200      	movs	r2, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 ff65 	bl	8008ee0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008016:	e175      	b.n	8008304 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b03      	cmp	r3, #3
 800801c:	f040 8172 	bne.w	8008304 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008026:	3301      	adds	r3, #1
 8008028:	b2da      	uxtb	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008036:	2b03      	cmp	r3, #3
 8008038:	d903      	bls.n	8008042 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	220d      	movs	r2, #13
 800803e:	701a      	strb	r2, [r3, #0]
      break;
 8008040:	e160      	b.n	8008304 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	795b      	ldrb	r3, [r3, #5]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 ff99 	bl	8008f80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	791b      	ldrb	r3, [r3, #4]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 ff93 	bl	8008f80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
      break;
 8008060:	e150      	b.n	8008304 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008062:	2112      	movs	r1, #18
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f9f1 	bl	800844c <USBH_Get_DevDesc>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800807a:	e145      	b.n	8008308 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b03      	cmp	r3, #3
 8008080:	f040 8142 	bne.w	8008308 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800808a:	3301      	adds	r3, #1
 800808c:	b2da      	uxtb	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800809a:	2b03      	cmp	r3, #3
 800809c:	d903      	bls.n	80080a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	220d      	movs	r2, #13
 80080a2:	701a      	strb	r2, [r3, #0]
      break;
 80080a4:	e130      	b.n	8008308 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 ff67 	bl	8008f80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 ff61 	bl	8008f80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	701a      	strb	r2, [r3, #0]
      break;
 80080ca:	e11d      	b.n	8008308 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80080cc:	2101      	movs	r1, #1
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa68 	bl	80085a4 <USBH_SetAddress>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d132      	bne.n	8008144 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80080de:	2002      	movs	r0, #2
 80080e0:	f001 fa45 	bl	800956e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2203      	movs	r2, #3
 80080f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7919      	ldrb	r1, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008106:	b292      	uxth	r2, r2
 8008108:	9202      	str	r2, [sp, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	4603      	mov	r3, r0
 8008112:	2280      	movs	r2, #128	; 0x80
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fee3 	bl	8008ee0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7959      	ldrb	r1, [r3, #5]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800812e:	b292      	uxth	r2, r2
 8008130:	9202      	str	r2, [sp, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	9201      	str	r2, [sp, #4]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	4603      	mov	r3, r0
 800813a:	2200      	movs	r2, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fecf 	bl	8008ee0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008142:	e0e3      	b.n	800830c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b03      	cmp	r3, #3
 8008148:	f040 80e0 	bne.w	800830c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	220d      	movs	r2, #13
 8008150:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	705a      	strb	r2, [r3, #1]
      break;
 8008158:	e0d8      	b.n	800830c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800815a:	2109      	movs	r1, #9
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f99d 	bl	800849c <USBH_Get_CfgDesc>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008172:	e0cd      	b.n	8008310 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b03      	cmp	r3, #3
 8008178:	f040 80ca 	bne.w	8008310 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008182:	3301      	adds	r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008192:	2b03      	cmp	r3, #3
 8008194:	d903      	bls.n	800819e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	220d      	movs	r2, #13
 800819a:	701a      	strb	r2, [r3, #0]
      break;
 800819c:	e0b8      	b.n	8008310 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	795b      	ldrb	r3, [r3, #5]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 feeb 	bl	8008f80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fee5 	bl	8008f80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
      break;
 80081c2:	e0a5      	b.n	8008310 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f965 	bl	800849c <USBH_Get_CfgDesc>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d103      	bne.n	80081e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2205      	movs	r2, #5
 80081e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081e2:	e097      	b.n	8008314 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	f040 8094 	bne.w	8008314 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081f2:	3301      	adds	r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008202:	2b03      	cmp	r3, #3
 8008204:	d903      	bls.n	800820e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220d      	movs	r2, #13
 800820a:	701a      	strb	r2, [r3, #0]
      break;
 800820c:	e082      	b.n	8008314 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	795b      	ldrb	r3, [r3, #5]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 feb3 	bl	8008f80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fead 	bl	8008f80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	701a      	strb	r2, [r3, #0]
      break;
 8008232:	e06f      	b.n	8008314 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800823a:	2b00      	cmp	r3, #0
 800823c:	d019      	beq.n	8008272 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800824a:	23ff      	movs	r3, #255	; 0xff
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f949 	bl	80084e4 <USBH_Get_StringDesc>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2206      	movs	r2, #6
 8008260:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008262:	e059      	b.n	8008318 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b03      	cmp	r3, #3
 8008268:	d156      	bne.n	8008318 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2206      	movs	r2, #6
 800826e:	705a      	strb	r2, [r3, #1]
      break;
 8008270:	e052      	b.n	8008318 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2206      	movs	r2, #6
 8008276:	705a      	strb	r2, [r3, #1]
      break;
 8008278:	e04e      	b.n	8008318 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008280:	2b00      	cmp	r3, #0
 8008282:	d019      	beq.n	80082b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008290:	23ff      	movs	r3, #255	; 0xff
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f926 	bl	80084e4 <USBH_Get_StringDesc>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2207      	movs	r2, #7
 80082a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80082a8:	e038      	b.n	800831c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d135      	bne.n	800831c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2207      	movs	r2, #7
 80082b4:	705a      	strb	r2, [r3, #1]
      break;
 80082b6:	e031      	b.n	800831c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2207      	movs	r2, #7
 80082bc:	705a      	strb	r2, [r3, #1]
      break;
 80082be:	e02d      	b.n	800831c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d017      	beq.n	80082fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80082d6:	23ff      	movs	r3, #255	; 0xff
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f903 	bl	80084e4 <USBH_Get_StringDesc>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d102      	bne.n	80082ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082ec:	e018      	b.n	8008320 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d115      	bne.n	8008320 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e012      	b.n	8008320 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
      break;
 80082fe:	e00f      	b.n	8008320 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008300:	bf00      	nop
 8008302:	e00e      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008304:	bf00      	nop
 8008306:	e00c      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008308:	bf00      	nop
 800830a:	e00a      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 800830c:	bf00      	nop
 800830e:	e008      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008310:	bf00      	nop
 8008312:	e006      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008314:	bf00      	nop
 8008316:	e004      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008318:	bf00      	nop
 800831a:	e002      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <USBH_HandleEnum+0x3be>
      break;
 8008320:	bf00      	nop
  }
  return Status;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f804 	bl	800836e <USBH_HandleSof>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b0b      	cmp	r3, #11
 800837e:	d10a      	bne.n	8008396 <USBH_HandleSof+0x28>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
  }
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80083ae:	bf00      	nop
}
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80083ca:	bf00      	nop
}
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 ff58 	bl	80092da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	791b      	ldrb	r3, [r3, #4]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fda5 	bl	8008f80 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	795b      	ldrb	r3, [r3, #5]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fd9f 	bl	8008f80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	b29b      	uxth	r3, r3
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f864 	bl	800853a <USBH_GetDescriptor>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	b292      	uxth	r2, r2
 800848c:	4619      	mov	r1, r3
 800848e:	f000 f918 	bl	80086c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	331c      	adds	r3, #28
 80084ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f83d 	bl	800853a <USBH_GetDescriptor>
 80084c0:	4603      	mov	r3, r0
 80084c2:	72fb      	strb	r3, [r7, #11]
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d107      	bne.n	80084da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80084d0:	887a      	ldrh	r2, [r7, #2]
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f964 	bl	80087a2 <USBH_ParseCfgDesc>
  }

  return status;
 80084da:	7afb      	ldrb	r3, [r7, #11]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	461a      	mov	r2, r3
 80084f0:	460b      	mov	r3, r1
 80084f2:	72fb      	strb	r3, [r7, #11]
 80084f4:	4613      	mov	r3, r2
 80084f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008500:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008508:	893b      	ldrh	r3, [r7, #8]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	460b      	mov	r3, r1
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f812 	bl	800853a <USBH_GetDescriptor>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008526:	893a      	ldrh	r2, [r7, #8]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fa37 	bl	800899e <USBH_ParseStringDesc>
  }

  return status;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	72fb      	strb	r3, [r7, #11]
 8008548:	4613      	mov	r3, r2
 800854a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	789b      	ldrb	r3, [r3, #2]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d11c      	bne.n	800858e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008554:	7afb      	ldrb	r3, [r7, #11]
 8008556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800855a:	b2da      	uxtb	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2206      	movs	r2, #6
 8008564:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	893a      	ldrh	r2, [r7, #8]
 800856a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800856c:	893b      	ldrh	r3, [r7, #8]
 800856e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008576:	d104      	bne.n	8008582 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f240 4209 	movw	r2, #1033	; 0x409
 800857e:	829a      	strh	r2, [r3, #20]
 8008580:	e002      	b.n	8008588 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8b3a      	ldrh	r2, [r7, #24]
 800858c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800858e:	8b3b      	ldrh	r3, [r7, #24]
 8008590:	461a      	mov	r2, r3
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fa50 	bl	8008a3a <USBH_CtlReq>
 800859a:	4603      	mov	r3, r0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	789b      	ldrb	r3, [r3, #2]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10f      	bne.n	80085d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2205      	movs	r2, #5
 80085c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80085d8:	2200      	movs	r2, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa2c 	bl	8008a3a <USBH_CtlReq>
 80085e2:	4603      	mov	r3, r0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	789b      	ldrb	r3, [r3, #2]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d10e      	bne.n	800861e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2209      	movs	r2, #9
 800860a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800861e:	2200      	movs	r2, #0
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa09 	bl	8008a3a <USBH_CtlReq>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	789b      	ldrb	r3, [r3, #2]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10f      	bne.n	8008666 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2203      	movs	r2, #3
 8008650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f9e5 	bl	8008a3a <USBH_CtlReq>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	789b      	ldrb	r3, [r3, #2]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10f      	bne.n	80086ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9c1 	bl	8008a3a <USBH_CtlReq>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	4613      	mov	r3, r2
 80086ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781a      	ldrb	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	785a      	ldrb	r2, [r3, #1]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3302      	adds	r3, #2
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	3303      	adds	r3, #3
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	791a      	ldrb	r2, [r3, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	795a      	ldrb	r2, [r3, #5]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	799a      	ldrb	r2, [r3, #6]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	79da      	ldrb	r2, [r3, #7]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d939      	bls.n	8008796 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3308      	adds	r3, #8
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	b29a      	uxth	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	3309      	adds	r3, #9
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	b29b      	uxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	330a      	adds	r3, #10
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b29a      	uxth	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	330b      	adds	r3, #11
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	b29b      	uxth	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	330c      	adds	r3, #12
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	b29a      	uxth	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	330d      	adds	r3, #13
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	b29b      	uxth	r3, r3
 800876e:	4313      	orrs	r3, r2
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	7b9a      	ldrb	r2, [r3, #14]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	7bda      	ldrb	r2, [r3, #15]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	7c1a      	ldrb	r2, [r3, #16]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	7c5a      	ldrb	r2, [r3, #17]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	745a      	strb	r2, [r3, #17]
  }
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b08a      	sub	sp, #40	; 0x28
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	781a      	ldrb	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	785a      	ldrb	r2, [r3, #1]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	3302      	adds	r3, #2
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	3303      	adds	r3, #3
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	791a      	ldrb	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	795a      	ldrb	r2, [r3, #5]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	799a      	ldrb	r2, [r3, #6]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	79da      	ldrb	r2, [r3, #7]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	7a1a      	ldrb	r2, [r3, #8]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008818:	88fb      	ldrh	r3, [r7, #6]
 800881a:	2b09      	cmp	r3, #9
 800881c:	d95f      	bls.n	80088de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800881e:	2309      	movs	r3, #9
 8008820:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008826:	e051      	b.n	80088cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008828:	f107 0316 	add.w	r3, r7, #22
 800882c:	4619      	mov	r1, r3
 800882e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008830:	f000 f8e8 	bl	8008a04 <USBH_GetNextDesc>
 8008834:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d146      	bne.n	80088cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800883e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008842:	221a      	movs	r2, #26
 8008844:	fb02 f303 	mul.w	r3, r2, r3
 8008848:	3308      	adds	r3, #8
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	3302      	adds	r3, #2
 8008850:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008854:	69f8      	ldr	r0, [r7, #28]
 8008856:	f000 f846 	bl	80088e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008860:	2300      	movs	r3, #0
 8008862:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008864:	e022      	b.n	80088ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008866:	f107 0316 	add.w	r3, r7, #22
 800886a:	4619      	mov	r1, r3
 800886c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800886e:	f000 f8c9 	bl	8008a04 <USBH_GetNextDesc>
 8008872:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b05      	cmp	r3, #5
 800887a:	d117      	bne.n	80088ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800887c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008880:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008884:	3201      	adds	r2, #1
 8008886:	00d2      	lsls	r2, r2, #3
 8008888:	211a      	movs	r1, #26
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	4413      	add	r3, r2
 8008890:	3308      	adds	r3, #8
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800889a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800889c:	69b8      	ldr	r0, [r7, #24]
 800889e:	f000 f851 	bl	8008944 <USBH_ParseEPDesc>
            ep_ix++;
 80088a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80088a6:	3301      	adds	r3, #1
 80088a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	791b      	ldrb	r3, [r3, #4]
 80088b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d204      	bcs.n	80088c2 <USBH_ParseCfgDesc+0x120>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	885a      	ldrh	r2, [r3, #2]
 80088bc:	8afb      	ldrh	r3, [r7, #22]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d8d1      	bhi.n	8008866 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80088c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088c6:	3301      	adds	r3, #1
 80088c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d804      	bhi.n	80088de <USBH_ParseCfgDesc+0x13c>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	885a      	ldrh	r2, [r3, #2]
 80088d8:	8afb      	ldrh	r3, [r7, #22]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d8a4      	bhi.n	8008828 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80088de:	bf00      	nop
 80088e0:	3728      	adds	r7, #40	; 0x28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	785a      	ldrb	r2, [r3, #1]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	789a      	ldrb	r2, [r3, #2]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	78da      	ldrb	r2, [r3, #3]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	791a      	ldrb	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	795a      	ldrb	r2, [r3, #5]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	799a      	ldrb	r2, [r3, #6]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	79da      	ldrb	r2, [r3, #7]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	7a1a      	ldrb	r2, [r3, #8]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	721a      	strb	r2, [r3, #8]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	785a      	ldrb	r2, [r3, #1]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	789a      	ldrb	r2, [r3, #2]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	78da      	ldrb	r2, [r3, #3]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	3304      	adds	r3, #4
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	3305      	adds	r3, #5
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	b29b      	uxth	r3, r3
 8008982:	4313      	orrs	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	799a      	ldrb	r2, [r3, #6]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	719a      	strb	r2, [r3, #6]
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800899e:	b480      	push	{r7}
 80089a0:	b087      	sub	sp, #28
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3301      	adds	r3, #1
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d120      	bne.n	80089f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	1e9a      	subs	r2, r3, #2
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	4293      	cmp	r3, r2
 80089c0:	bf28      	it	cs
 80089c2:	4613      	movcs	r3, r2
 80089c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3302      	adds	r3, #2
 80089ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80089cc:	2300      	movs	r3, #0
 80089ce:	82fb      	strh	r3, [r7, #22]
 80089d0:	e00b      	b.n	80089ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80089d2:	8afb      	ldrh	r3, [r7, #22]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	781a      	ldrb	r2, [r3, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80089e4:	8afb      	ldrh	r3, [r7, #22]
 80089e6:	3302      	adds	r3, #2
 80089e8:	82fb      	strh	r3, [r7, #22]
 80089ea:	8afa      	ldrh	r2, [r7, #22]
 80089ec:	8abb      	ldrh	r3, [r7, #20]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d3ef      	bcc.n	80089d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
  }
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	881a      	ldrh	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	4413      	add	r3, r2
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b086      	sub	sp, #24
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	60f8      	str	r0, [r7, #12]
 8008a42:	60b9      	str	r1, [r7, #8]
 8008a44:	4613      	mov	r3, r2
 8008a46:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	789b      	ldrb	r3, [r3, #2]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d002      	beq.n	8008a5a <USBH_CtlReq+0x20>
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d00f      	beq.n	8008a78 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008a58:	e027      	b.n	8008aaa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	88fa      	ldrh	r2, [r7, #6]
 8008a64:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
      break;
 8008a76:	e018      	b.n	8008aaa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f81b 	bl	8008ab4 <USBH_HandleControl>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <USBH_CtlReq+0x54>
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d106      	bne.n	8008a9c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2201      	movs	r2, #1
 8008a92:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	761a      	strb	r2, [r3, #24]
      break;
 8008a9a:	e005      	b.n	8008aa8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d102      	bne.n	8008aa8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	709a      	strb	r2, [r3, #2]
      break;
 8008aa8:	bf00      	nop
  }
  return status;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7e1b      	ldrb	r3, [r3, #24]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	2b0a      	cmp	r3, #10
 8008acc:	f200 8158 	bhi.w	8008d80 <USBH_HandleControl+0x2cc>
 8008ad0:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <USBH_HandleControl+0x24>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	08008b1f 	.word	0x08008b1f
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008baf 	.word	0x08008baf
 8008ae8:	08008be7 	.word	0x08008be7
 8008aec:	08008c13 	.word	0x08008c13
 8008af0:	08008c65 	.word	0x08008c65
 8008af4:	08008c87 	.word	0x08008c87
 8008af8:	08008cc3 	.word	0x08008cc3
 8008afc:	08008ceb 	.word	0x08008ceb
 8008b00:	08008d29 	.word	0x08008d29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f103 0110 	add.w	r1, r3, #16
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	795b      	ldrb	r3, [r3, #5]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f945 	bl	8008da0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	761a      	strb	r2, [r3, #24]
      break;
 8008b1c:	e13b      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	795b      	ldrb	r3, [r3, #5]
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcc5 	bl	80094b4 <USBH_LL_GetURBState>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d11e      	bne.n	8008b72 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7c1b      	ldrb	r3, [r3, #16]
 8008b38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8adb      	ldrh	r3, [r3, #22]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b46:	7b7b      	ldrb	r3, [r7, #13]
 8008b48:	2b80      	cmp	r3, #128	; 0x80
 8008b4a:	d103      	bne.n	8008b54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2203      	movs	r2, #3
 8008b50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b52:	e117      	b.n	8008d84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2205      	movs	r2, #5
 8008b58:	761a      	strb	r2, [r3, #24]
      break;
 8008b5a:	e113      	b.n	8008d84 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008b5c:	7b7b      	ldrb	r3, [r7, #13]
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d103      	bne.n	8008b6a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2209      	movs	r2, #9
 8008b66:	761a      	strb	r2, [r3, #24]
      break;
 8008b68:	e10c      	b.n	8008d84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2207      	movs	r2, #7
 8008b6e:	761a      	strb	r2, [r3, #24]
      break;
 8008b70:	e108      	b.n	8008d84 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d003      	beq.n	8008b80 <USBH_HandleControl+0xcc>
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	f040 8102 	bne.w	8008d84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	220b      	movs	r2, #11
 8008b84:	761a      	strb	r2, [r3, #24]
      break;
 8008b86:	e0fd      	b.n	8008d84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6899      	ldr	r1, [r3, #8]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	899a      	ldrh	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	791b      	ldrb	r3, [r3, #4]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f93c 	bl	8008e1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	761a      	strb	r2, [r3, #24]
      break;
 8008bac:	e0f3      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	791b      	ldrb	r3, [r3, #4]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc7d 	bl	80094b4 <USBH_LL_GetURBState>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d102      	bne.n	8008bca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2209      	movs	r2, #9
 8008bc8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b05      	cmp	r3, #5
 8008bce:	d102      	bne.n	8008bd6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008bd4:	e0d8      	b.n	8008d88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	f040 80d5 	bne.w	8008d88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	220b      	movs	r2, #11
 8008be2:	761a      	strb	r2, [r3, #24]
      break;
 8008be4:	e0d0      	b.n	8008d88 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6899      	ldr	r1, [r3, #8]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	899a      	ldrh	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7958      	ldrb	r0, [r3, #5]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f8eb 	bl	8008dd4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2206      	movs	r2, #6
 8008c0e:	761a      	strb	r2, [r3, #24]
      break;
 8008c10:	e0c1      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	795b      	ldrb	r3, [r3, #5]
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fc4b 	bl	80094b4 <USBH_LL_GetURBState>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d103      	bne.n	8008c30 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2207      	movs	r2, #7
 8008c2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008c2e:	e0ad      	b.n	8008d8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008c30:	7bbb      	ldrb	r3, [r7, #14]
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d105      	bne.n	8008c42 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	220c      	movs	r2, #12
 8008c3a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c40:	e0a4      	b.n	8008d8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d103      	bne.n	8008c50 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2205      	movs	r2, #5
 8008c4c:	761a      	strb	r2, [r3, #24]
      break;
 8008c4e:	e09d      	b.n	8008d8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	f040 809a 	bne.w	8008d8c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	220b      	movs	r2, #11
 8008c5c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	73fb      	strb	r3, [r7, #15]
      break;
 8008c62:	e093      	b.n	8008d8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	791b      	ldrb	r3, [r3, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8d6 	bl	8008e1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2208      	movs	r2, #8
 8008c82:	761a      	strb	r2, [r3, #24]

      break;
 8008c84:	e087      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	791b      	ldrb	r3, [r3, #4]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc11 	bl	80094b4 <USBH_LL_GetURBState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d105      	bne.n	8008ca8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	220d      	movs	r2, #13
 8008ca0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ca6:	e073      	b.n	8008d90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d103      	bne.n	8008cb6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	220b      	movs	r2, #11
 8008cb2:	761a      	strb	r2, [r3, #24]
      break;
 8008cb4:	e06c      	b.n	8008d90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b05      	cmp	r3, #5
 8008cba:	d169      	bne.n	8008d90 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc0:	e066      	b.n	8008d90 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	795a      	ldrb	r2, [r3, #5]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f87f 	bl	8008dd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	220a      	movs	r2, #10
 8008ce6:	761a      	strb	r2, [r3, #24]
      break;
 8008ce8:	e055      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	795b      	ldrb	r3, [r3, #5]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fbdf 	bl	80094b4 <USBH_LL_GetURBState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d105      	bne.n	8008d0c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	220d      	movs	r2, #13
 8008d08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d0a:	e043      	b.n	8008d94 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d103      	bne.n	8008d1a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2209      	movs	r2, #9
 8008d16:	761a      	strb	r2, [r3, #24]
      break;
 8008d18:	e03c      	b.n	8008d94 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d139      	bne.n	8008d94 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	220b      	movs	r2, #11
 8008d24:	761a      	strb	r2, [r3, #24]
      break;
 8008d26:	e035      	b.n	8008d94 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	7e5b      	ldrb	r3, [r3, #25]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	765a      	strb	r2, [r3, #25]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7e5b      	ldrb	r3, [r3, #25]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d806      	bhi.n	8008d4a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008d48:	e025      	b.n	8008d96 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d50:	2106      	movs	r1, #6
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	795b      	ldrb	r3, [r3, #5]
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f90c 	bl	8008f80 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	791b      	ldrb	r3, [r3, #4]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f906 	bl	8008f80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7e:	e00a      	b.n	8008d96 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008d80:	bf00      	nop
 8008d82:	e008      	b.n	8008d96 <USBH_HandleControl+0x2e2>
      break;
 8008d84:	bf00      	nop
 8008d86:	e006      	b.n	8008d96 <USBH_HandleControl+0x2e2>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e004      	b.n	8008d96 <USBH_HandleControl+0x2e2>
      break;
 8008d8c:	bf00      	nop
 8008d8e:	e002      	b.n	8008d96 <USBH_HandleControl+0x2e2>
      break;
 8008d90:	bf00      	nop
 8008d92:	e000      	b.n	8008d96 <USBH_HandleControl+0x2e2>
      break;
 8008d94:	bf00      	nop
  }

  return status;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af04      	add	r7, sp, #16
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	4613      	mov	r3, r2
 8008dac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008dae:	79f9      	ldrb	r1, [r7, #7]
 8008db0:	2300      	movs	r3, #0
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	2308      	movs	r3, #8
 8008db6:	9302      	str	r3, [sp, #8]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 fb44 	bl	8009452 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4611      	mov	r1, r2
 8008de0:	461a      	mov	r2, r3
 8008de2:	460b      	mov	r3, r1
 8008de4:	80fb      	strh	r3, [r7, #6]
 8008de6:	4613      	mov	r3, r2
 8008de8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008df8:	7979      	ldrb	r1, [r7, #5]
 8008dfa:	7e3b      	ldrb	r3, [r7, #24]
 8008dfc:	9303      	str	r3, [sp, #12]
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	9302      	str	r3, [sp, #8]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	2301      	movs	r3, #1
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f000 fb1f 	bl	8009452 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af04      	add	r7, sp, #16
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	4611      	mov	r1, r2
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	80fb      	strh	r3, [r7, #6]
 8008e30:	4613      	mov	r3, r2
 8008e32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e34:	7979      	ldrb	r1, [r7, #5]
 8008e36:	2300      	movs	r3, #0
 8008e38:	9303      	str	r3, [sp, #12]
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	9302      	str	r3, [sp, #8]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	2301      	movs	r3, #1
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	2201      	movs	r2, #1
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb01 	bl	8009452 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008e50:	2300      	movs	r3, #0

}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b088      	sub	sp, #32
 8008e5e:	af04      	add	r7, sp, #16
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	4611      	mov	r1, r2
 8008e66:	461a      	mov	r2, r3
 8008e68:	460b      	mov	r3, r1
 8008e6a:	80fb      	strh	r3, [r7, #6]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008e7e:	7979      	ldrb	r1, [r7, #5]
 8008e80:	7e3b      	ldrb	r3, [r7, #24]
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	2302      	movs	r3, #2
 8008e92:	2200      	movs	r2, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fadc 	bl	8009452 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af04      	add	r7, sp, #16
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	80fb      	strh	r3, [r7, #6]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008eba:	7979      	ldrb	r1, [r7, #5]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9303      	str	r3, [sp, #12]
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	9302      	str	r3, [sp, #8]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	2301      	movs	r3, #1
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	2302      	movs	r3, #2
 8008ece:	2201      	movs	r2, #1
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fabe 	bl	8009452 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af04      	add	r7, sp, #16
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	4608      	mov	r0, r1
 8008eea:	4611      	mov	r1, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	70fb      	strb	r3, [r7, #3]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	70bb      	strb	r3, [r7, #2]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008efa:	7878      	ldrb	r0, [r7, #1]
 8008efc:	78ba      	ldrb	r2, [r7, #2]
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	8b3b      	ldrh	r3, [r7, #24]
 8008f02:	9302      	str	r3, [sp, #8]
 8008f04:	7d3b      	ldrb	r3, [r7, #20]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	7c3b      	ldrb	r3, [r7, #16]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa51 	bl	80093b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa70 	bl	8009414 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f836 	bl	8008fbc <USBH_GetFreePipe>
 8008f50:	4603      	mov	r3, r0
 8008f52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008f54:	89fb      	ldrh	r3, [r7, #14]
 8008f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00a      	beq.n	8008f74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	89fb      	ldrh	r3, [r7, #14]
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	33e0      	adds	r3, #224	; 0xe0
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f74:	89fb      	ldrh	r3, [r7, #14]
 8008f76:	b2db      	uxtb	r3, r3
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	2b0a      	cmp	r3, #10
 8008f90:	d80d      	bhi.n	8008fae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	33e0      	adds	r3, #224	; 0xe0
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	33e0      	adds	r3, #224	; 0xe0
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e00f      	b.n	8008fee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	33e0      	adds	r3, #224	; 0xe0
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	e007      	b.n	8008ff8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	3301      	adds	r3, #1
 8008fec:	73fb      	strb	r3, [r7, #15]
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	2b0a      	cmp	r3, #10
 8008ff2:	d9ec      	bls.n	8008fce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009008:	2201      	movs	r2, #1
 800900a:	490e      	ldr	r1, [pc, #56]	; (8009044 <MX_USB_HOST_Init+0x40>)
 800900c:	480e      	ldr	r0, [pc, #56]	; (8009048 <MX_USB_HOST_Init+0x44>)
 800900e:	f7fe fc9f 	bl	8007950 <USBH_Init>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009018:	f7f8 fac4 	bl	80015a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800901c:	490b      	ldr	r1, [pc, #44]	; (800904c <MX_USB_HOST_Init+0x48>)
 800901e:	480a      	ldr	r0, [pc, #40]	; (8009048 <MX_USB_HOST_Init+0x44>)
 8009020:	f7fe fd24 	bl	8007a6c <USBH_RegisterClass>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800902a:	f7f8 fabb 	bl	80015a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800902e:	4806      	ldr	r0, [pc, #24]	; (8009048 <MX_USB_HOST_Init+0x44>)
 8009030:	f7fe fda8 	bl	8007b84 <USBH_Start>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800903a:	f7f8 fab3 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800903e:	bf00      	nop
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	08009065 	.word	0x08009065
 8009048:	20000244 	.word	0x20000244
 800904c:	2000000c 	.word	0x2000000c

08009050 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009054:	4802      	ldr	r0, [pc, #8]	; (8009060 <MX_USB_HOST_Process+0x10>)
 8009056:	f7fe fda5 	bl	8007ba4 <USBH_Process>
}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000244 	.word	0x20000244

08009064 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	3b01      	subs	r3, #1
 8009074:	2b04      	cmp	r3, #4
 8009076:	d819      	bhi.n	80090ac <USBH_UserProcess+0x48>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <USBH_UserProcess+0x1c>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	080090ad 	.word	0x080090ad
 8009084:	0800909d 	.word	0x0800909d
 8009088:	080090ad 	.word	0x080090ad
 800908c:	080090a5 	.word	0x080090a5
 8009090:	08009095 	.word	0x08009095
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <USBH_UserProcess+0x58>)
 8009096:	2203      	movs	r2, #3
 8009098:	701a      	strb	r2, [r3, #0]
  break;
 800909a:	e008      	b.n	80090ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800909c:	4b07      	ldr	r3, [pc, #28]	; (80090bc <USBH_UserProcess+0x58>)
 800909e:	2202      	movs	r2, #2
 80090a0:	701a      	strb	r2, [r3, #0]
  break;
 80090a2:	e004      	b.n	80090ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <USBH_UserProcess+0x58>)
 80090a6:	2201      	movs	r2, #1
 80090a8:	701a      	strb	r2, [r3, #0]
  break;
 80090aa:	e000      	b.n	80090ae <USBH_UserProcess+0x4a>

  default:
  break;
 80090ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	200000b8 	.word	0x200000b8

080090c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08a      	sub	sp, #40	; 0x28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c8:	f107 0314 	add.w	r3, r7, #20
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	609a      	str	r2, [r3, #8]
 80090d4:	60da      	str	r2, [r3, #12]
 80090d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090e0:	d147      	bne.n	8009172 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	4b25      	ldr	r3, [pc, #148]	; (800917c <HAL_HCD_MspInit+0xbc>)
 80090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ea:	4a24      	ldr	r2, [pc, #144]	; (800917c <HAL_HCD_MspInit+0xbc>)
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6313      	str	r3, [r2, #48]	; 0x30
 80090f2:	4b22      	ldr	r3, [pc, #136]	; (800917c <HAL_HCD_MspInit+0xbc>)
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80090fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009104:	2300      	movs	r3, #0
 8009106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009108:	2300      	movs	r3, #0
 800910a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4619      	mov	r1, r3
 8009112:	481b      	ldr	r0, [pc, #108]	; (8009180 <HAL_HCD_MspInit+0xc0>)
 8009114:	f7f9 fa04 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009118:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800911c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800911e:	2302      	movs	r3, #2
 8009120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009122:	2300      	movs	r3, #0
 8009124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009126:	2300      	movs	r3, #0
 8009128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800912a:	230a      	movs	r3, #10
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800912e:	f107 0314 	add.w	r3, r7, #20
 8009132:	4619      	mov	r1, r3
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <HAL_HCD_MspInit+0xc0>)
 8009136:	f7f9 f9f3 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800913a:	4b10      	ldr	r3, [pc, #64]	; (800917c <HAL_HCD_MspInit+0xbc>)
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	4a0f      	ldr	r2, [pc, #60]	; (800917c <HAL_HCD_MspInit+0xbc>)
 8009140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009144:	6353      	str	r3, [r2, #52]	; 0x34
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <HAL_HCD_MspInit+0xbc>)
 800914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914e:	4a0b      	ldr	r2, [pc, #44]	; (800917c <HAL_HCD_MspInit+0xbc>)
 8009150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009154:	6453      	str	r3, [r2, #68]	; 0x44
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <HAL_HCD_MspInit+0xbc>)
 8009158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009162:	2200      	movs	r2, #0
 8009164:	2100      	movs	r1, #0
 8009166:	2043      	movs	r0, #67	; 0x43
 8009168:	f7f9 f9a3 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800916c:	2043      	movs	r0, #67	; 0x43
 800916e:	f7f9 f9bc 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009172:	bf00      	nop
 8009174:	3728      	adds	r7, #40	; 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40023800 	.word	0x40023800
 8009180:	40020000 	.word	0x40020000

08009184 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff f8d9 	bl	800834a <USBH_LL_IncTimer>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff f911 	bl	80083d6 <USBH_LL_Connect>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff f91a 	bl	8008404 <USBH_LL_Disconnect>
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
 80091e4:	4613      	mov	r3, r2
 80091e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff f8cb 	bl	800839e <USBH_LL_PortEnabled>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f8cb 	bl	80083ba <USBH_LL_PortDisabled>
}
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800923a:	2b01      	cmp	r3, #1
 800923c:	d12a      	bne.n	8009294 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <USBH_LL_Init+0x74>)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <USBH_LL_Init+0x74>)
 800924a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800924e:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <USBH_LL_Init+0x74>)
 8009250:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009254:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <USBH_LL_Init+0x74>)
 8009258:	2208      	movs	r2, #8
 800925a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <USBH_LL_Init+0x74>)
 800925e:	2201      	movs	r2, #1
 8009260:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009262:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <USBH_LL_Init+0x74>)
 8009264:	2200      	movs	r2, #0
 8009266:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009268:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <USBH_LL_Init+0x74>)
 800926a:	2202      	movs	r2, #2
 800926c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800926e:	4b0c      	ldr	r3, [pc, #48]	; (80092a0 <USBH_LL_Init+0x74>)
 8009270:	2200      	movs	r2, #0
 8009272:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009274:	480a      	ldr	r0, [pc, #40]	; (80092a0 <USBH_LL_Init+0x74>)
 8009276:	f7f9 fb06 	bl	8002886 <HAL_HCD_Init>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009280:	f7f8 f990 	bl	80015a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009284:	4806      	ldr	r0, [pc, #24]	; (80092a0 <USBH_LL_Init+0x74>)
 8009286:	f7f9 ff09 	bl	800309c <HAL_HCD_GetCurrentFrame>
 800928a:	4603      	mov	r3, r0
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7ff f84c 	bl	800832c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	2000061c 	.word	0x2000061c

080092a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f9 fe76 	bl	8002fac <HAL_HCD_Start>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f95c 	bl	8009584 <USBH_Get_USB_Status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7f9 fe7e 	bl	8002ff2 <HAL_HCD_Stop>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f941 	bl	8009584 <USBH_Get_USB_Status>
 8009302:	4603      	mov	r3, r0
 8009304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009306:	7bbb      	ldrb	r3, [r7, #14]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 fec8 	bl	80030b8 <HAL_HCD_GetCurrentSpeed>
 8009328:	4603      	mov	r3, r0
 800932a:	2b01      	cmp	r3, #1
 800932c:	d007      	beq.n	800933e <USBH_LL_GetSpeed+0x2e>
 800932e:	2b01      	cmp	r3, #1
 8009330:	d302      	bcc.n	8009338 <USBH_LL_GetSpeed+0x28>
 8009332:	2b02      	cmp	r3, #2
 8009334:	d006      	beq.n	8009344 <USBH_LL_GetSpeed+0x34>
 8009336:	e008      	b.n	800934a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	e008      	b.n	8009350 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800933e:	2301      	movs	r3, #1
 8009340:	73fb      	strb	r3, [r7, #15]
    break;
 8009342:	e005      	b.n	8009350 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009344:	2302      	movs	r3, #2
 8009346:	73fb      	strb	r3, [r7, #15]
    break;
 8009348:	e002      	b.n	8009350 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800934a:	2301      	movs	r3, #1
 800934c:	73fb      	strb	r3, [r7, #15]
    break;
 800934e:	bf00      	nop
  }
  return  speed;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009370:	4618      	mov	r0, r3
 8009372:	f7f9 fe5b 	bl	800302c <HAL_HCD_ResetPort>
 8009376:	4603      	mov	r3, r0
 8009378:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 f901 	bl	8009584 <USBH_Get_USB_Status>
 8009382:	4603      	mov	r3, r0
 8009384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009386:	7bbb      	ldrb	r3, [r7, #14]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f9 fe63 	bl	8003072 <HAL_HCD_HC_GetXferCount>
 80093ac:	4603      	mov	r3, r0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093b6:	b590      	push	{r4, r7, lr}
 80093b8:	b089      	sub	sp, #36	; 0x24
 80093ba:	af04      	add	r7, sp, #16
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	4608      	mov	r0, r1
 80093c0:	4611      	mov	r1, r2
 80093c2:	461a      	mov	r2, r3
 80093c4:	4603      	mov	r3, r0
 80093c6:	70fb      	strb	r3, [r7, #3]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70bb      	strb	r3, [r7, #2]
 80093cc:	4613      	mov	r3, r2
 80093ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80093de:	787c      	ldrb	r4, [r7, #1]
 80093e0:	78ba      	ldrb	r2, [r7, #2]
 80093e2:	78f9      	ldrb	r1, [r7, #3]
 80093e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	4623      	mov	r3, r4
 80093f6:	f7f9 faa8 	bl	800294a <HAL_HCD_HC_Init>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f8bf 	bl	8009584 <USBH_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}

08009414 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800942e:	78fa      	ldrb	r2, [r7, #3]
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7f9 fb21 	bl	8002a7a <HAL_HCD_HC_Halt>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f8a0 	bl	8009584 <USBH_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009448:	7bbb      	ldrb	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009452:	b590      	push	{r4, r7, lr}
 8009454:	b089      	sub	sp, #36	; 0x24
 8009456:	af04      	add	r7, sp, #16
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	4608      	mov	r0, r1
 800945c:	4611      	mov	r1, r2
 800945e:	461a      	mov	r2, r3
 8009460:	4603      	mov	r3, r0
 8009462:	70fb      	strb	r3, [r7, #3]
 8009464:	460b      	mov	r3, r1
 8009466:	70bb      	strb	r3, [r7, #2]
 8009468:	4613      	mov	r3, r2
 800946a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800947a:	787c      	ldrb	r4, [r7, #1]
 800947c:	78ba      	ldrb	r2, [r7, #2]
 800947e:	78f9      	ldrb	r1, [r7, #3]
 8009480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009488:	9302      	str	r3, [sp, #8]
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	4623      	mov	r3, r4
 8009496:	f7f9 fb13 	bl	8002ac0 <HAL_HCD_HC_SubmitRequest>
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f86f 	bl	8009584 <USBH_Get_USB_Status>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd90      	pop	{r4, r7, pc}

080094b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	4611      	mov	r1, r2
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f9 fdbc 	bl	8003048 <HAL_HCD_HC_GetURBState>
 80094d0:	4603      	mov	r3, r0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b082      	sub	sp, #8
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d103      	bne.n	80094f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f872 	bl	80095dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80094f8:	20c8      	movs	r0, #200	; 0xc8
 80094fa:	f7f8 fb23 	bl	8001b44 <HAL_Delay>
  return USBH_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
 8009514:	4613      	mov	r3, r2
 8009516:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800951e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	440b      	add	r3, r1
 800952e:	333b      	adds	r3, #59	; 0x3b
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	68f9      	ldr	r1, [r7, #12]
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	00db      	lsls	r3, r3, #3
 8009542:	440b      	add	r3, r1
 8009544:	3350      	adds	r3, #80	; 0x50
 8009546:	78ba      	ldrb	r2, [r7, #2]
 8009548:	701a      	strb	r2, [r3, #0]
 800954a:	e009      	b.n	8009560 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800954c:	78fa      	ldrb	r2, [r7, #3]
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	440b      	add	r3, r1
 800955a:	3351      	adds	r3, #81	; 0x51
 800955c:	78ba      	ldrb	r2, [r7, #2]
 800955e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7f8 fae4 	bl	8001b44 <HAL_Delay>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	2b03      	cmp	r3, #3
 8009596:	d817      	bhi.n	80095c8 <USBH_Get_USB_Status+0x44>
 8009598:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <USBH_Get_USB_Status+0x1c>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095b7 	.word	0x080095b7
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095c3 	.word	0x080095c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
    break;
 80095b4:	e00b      	b.n	80095ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80095b6:	2302      	movs	r3, #2
 80095b8:	73fb      	strb	r3, [r7, #15]
    break;
 80095ba:	e008      	b.n	80095ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80095bc:	2301      	movs	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
    break;
 80095c0:	e005      	b.n	80095ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80095c2:	2302      	movs	r3, #2
 80095c4:	73fb      	strb	r3, [r7, #15]
    break;
 80095c6:	e002      	b.n	80095ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80095c8:	2302      	movs	r3, #2
 80095ca:	73fb      	strb	r3, [r7, #15]
    break;
 80095cc:	bf00      	nop
  }
  return usb_status;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80095f0:	2301      	movs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	e001      	b.n	80095fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	461a      	mov	r2, r3
 80095fe:	2101      	movs	r1, #1
 8009600:	4803      	ldr	r0, [pc, #12]	; (8009610 <MX_DriverVbusFS+0x34>)
 8009602:	f7f9 f927 	bl	8002854 <HAL_GPIO_WritePin>
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	40020800 	.word	0x40020800

08009614 <__errno>:
 8009614:	4b01      	ldr	r3, [pc, #4]	; (800961c <__errno+0x8>)
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	2000002c 	.word	0x2000002c

08009620 <__libc_init_array>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4e0d      	ldr	r6, [pc, #52]	; (8009658 <__libc_init_array+0x38>)
 8009624:	4c0d      	ldr	r4, [pc, #52]	; (800965c <__libc_init_array+0x3c>)
 8009626:	1ba4      	subs	r4, r4, r6
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	2500      	movs	r5, #0
 800962c:	42a5      	cmp	r5, r4
 800962e:	d109      	bne.n	8009644 <__libc_init_array+0x24>
 8009630:	4e0b      	ldr	r6, [pc, #44]	; (8009660 <__libc_init_array+0x40>)
 8009632:	4c0c      	ldr	r4, [pc, #48]	; (8009664 <__libc_init_array+0x44>)
 8009634:	f001 fcd6 	bl	800afe4 <_init>
 8009638:	1ba4      	subs	r4, r4, r6
 800963a:	10a4      	asrs	r4, r4, #2
 800963c:	2500      	movs	r5, #0
 800963e:	42a5      	cmp	r5, r4
 8009640:	d105      	bne.n	800964e <__libc_init_array+0x2e>
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009648:	4798      	blx	r3
 800964a:	3501      	adds	r5, #1
 800964c:	e7ee      	b.n	800962c <__libc_init_array+0xc>
 800964e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009652:	4798      	blx	r3
 8009654:	3501      	adds	r5, #1
 8009656:	e7f2      	b.n	800963e <__libc_init_array+0x1e>
 8009658:	0800b0a8 	.word	0x0800b0a8
 800965c:	0800b0a8 	.word	0x0800b0a8
 8009660:	0800b0a8 	.word	0x0800b0a8
 8009664:	0800b0ac 	.word	0x0800b0ac

08009668 <malloc>:
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <malloc+0xc>)
 800966a:	4601      	mov	r1, r0
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f000 b861 	b.w	8009734 <_malloc_r>
 8009672:	bf00      	nop
 8009674:	2000002c 	.word	0x2000002c

08009678 <free>:
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <free+0xc>)
 800967a:	4601      	mov	r1, r0
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f000 b80b 	b.w	8009698 <_free_r>
 8009682:	bf00      	nop
 8009684:	2000002c 	.word	0x2000002c

08009688 <memset>:
 8009688:	4402      	add	r2, r0
 800968a:	4603      	mov	r3, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <_free_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	2900      	cmp	r1, #0
 800969e:	d045      	beq.n	800972c <_free_r+0x94>
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f0c      	subs	r4, r1, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfb8      	it	lt
 80096aa:	18e4      	addlt	r4, r4, r3
 80096ac:	f000 f8cc 	bl	8009848 <__malloc_lock>
 80096b0:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <_free_r+0x98>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	4610      	mov	r0, r2
 80096b6:	b933      	cbnz	r3, 80096c6 <_free_r+0x2e>
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	6014      	str	r4, [r2, #0]
 80096bc:	4628      	mov	r0, r5
 80096be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c2:	f000 b8c2 	b.w	800984a <__malloc_unlock>
 80096c6:	42a3      	cmp	r3, r4
 80096c8:	d90c      	bls.n	80096e4 <_free_r+0x4c>
 80096ca:	6821      	ldr	r1, [r4, #0]
 80096cc:	1862      	adds	r2, r4, r1
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bf04      	itt	eq
 80096d2:	681a      	ldreq	r2, [r3, #0]
 80096d4:	685b      	ldreq	r3, [r3, #4]
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	bf04      	itt	eq
 80096da:	1852      	addeq	r2, r2, r1
 80096dc:	6022      	streq	r2, [r4, #0]
 80096de:	6004      	str	r4, [r0, #0]
 80096e0:	e7ec      	b.n	80096bc <_free_r+0x24>
 80096e2:	4613      	mov	r3, r2
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	b10a      	cbz	r2, 80096ec <_free_r+0x54>
 80096e8:	42a2      	cmp	r2, r4
 80096ea:	d9fa      	bls.n	80096e2 <_free_r+0x4a>
 80096ec:	6819      	ldr	r1, [r3, #0]
 80096ee:	1858      	adds	r0, r3, r1
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	d10b      	bne.n	800970c <_free_r+0x74>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	4401      	add	r1, r0
 80096f8:	1858      	adds	r0, r3, r1
 80096fa:	4282      	cmp	r2, r0
 80096fc:	6019      	str	r1, [r3, #0]
 80096fe:	d1dd      	bne.n	80096bc <_free_r+0x24>
 8009700:	6810      	ldr	r0, [r2, #0]
 8009702:	6852      	ldr	r2, [r2, #4]
 8009704:	605a      	str	r2, [r3, #4]
 8009706:	4401      	add	r1, r0
 8009708:	6019      	str	r1, [r3, #0]
 800970a:	e7d7      	b.n	80096bc <_free_r+0x24>
 800970c:	d902      	bls.n	8009714 <_free_r+0x7c>
 800970e:	230c      	movs	r3, #12
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	e7d3      	b.n	80096bc <_free_r+0x24>
 8009714:	6820      	ldr	r0, [r4, #0]
 8009716:	1821      	adds	r1, r4, r0
 8009718:	428a      	cmp	r2, r1
 800971a:	bf04      	itt	eq
 800971c:	6811      	ldreq	r1, [r2, #0]
 800971e:	6852      	ldreq	r2, [r2, #4]
 8009720:	6062      	str	r2, [r4, #4]
 8009722:	bf04      	itt	eq
 8009724:	1809      	addeq	r1, r1, r0
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	605c      	str	r4, [r3, #4]
 800972a:	e7c7      	b.n	80096bc <_free_r+0x24>
 800972c:	bd38      	pop	{r3, r4, r5, pc}
 800972e:	bf00      	nop
 8009730:	200000bc 	.word	0x200000bc

08009734 <_malloc_r>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	1ccd      	adds	r5, r1, #3
 8009738:	f025 0503 	bic.w	r5, r5, #3
 800973c:	3508      	adds	r5, #8
 800973e:	2d0c      	cmp	r5, #12
 8009740:	bf38      	it	cc
 8009742:	250c      	movcc	r5, #12
 8009744:	2d00      	cmp	r5, #0
 8009746:	4606      	mov	r6, r0
 8009748:	db01      	blt.n	800974e <_malloc_r+0x1a>
 800974a:	42a9      	cmp	r1, r5
 800974c:	d903      	bls.n	8009756 <_malloc_r+0x22>
 800974e:	230c      	movs	r3, #12
 8009750:	6033      	str	r3, [r6, #0]
 8009752:	2000      	movs	r0, #0
 8009754:	bd70      	pop	{r4, r5, r6, pc}
 8009756:	f000 f877 	bl	8009848 <__malloc_lock>
 800975a:	4a21      	ldr	r2, [pc, #132]	; (80097e0 <_malloc_r+0xac>)
 800975c:	6814      	ldr	r4, [r2, #0]
 800975e:	4621      	mov	r1, r4
 8009760:	b991      	cbnz	r1, 8009788 <_malloc_r+0x54>
 8009762:	4c20      	ldr	r4, [pc, #128]	; (80097e4 <_malloc_r+0xb0>)
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	b91b      	cbnz	r3, 8009770 <_malloc_r+0x3c>
 8009768:	4630      	mov	r0, r6
 800976a:	f000 f83d 	bl	80097e8 <_sbrk_r>
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	4629      	mov	r1, r5
 8009772:	4630      	mov	r0, r6
 8009774:	f000 f838 	bl	80097e8 <_sbrk_r>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d124      	bne.n	80097c6 <_malloc_r+0x92>
 800977c:	230c      	movs	r3, #12
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	4630      	mov	r0, r6
 8009782:	f000 f862 	bl	800984a <__malloc_unlock>
 8009786:	e7e4      	b.n	8009752 <_malloc_r+0x1e>
 8009788:	680b      	ldr	r3, [r1, #0]
 800978a:	1b5b      	subs	r3, r3, r5
 800978c:	d418      	bmi.n	80097c0 <_malloc_r+0x8c>
 800978e:	2b0b      	cmp	r3, #11
 8009790:	d90f      	bls.n	80097b2 <_malloc_r+0x7e>
 8009792:	600b      	str	r3, [r1, #0]
 8009794:	50cd      	str	r5, [r1, r3]
 8009796:	18cc      	adds	r4, r1, r3
 8009798:	4630      	mov	r0, r6
 800979a:	f000 f856 	bl	800984a <__malloc_unlock>
 800979e:	f104 000b 	add.w	r0, r4, #11
 80097a2:	1d23      	adds	r3, r4, #4
 80097a4:	f020 0007 	bic.w	r0, r0, #7
 80097a8:	1ac3      	subs	r3, r0, r3
 80097aa:	d0d3      	beq.n	8009754 <_malloc_r+0x20>
 80097ac:	425a      	negs	r2, r3
 80097ae:	50e2      	str	r2, [r4, r3]
 80097b0:	e7d0      	b.n	8009754 <_malloc_r+0x20>
 80097b2:	428c      	cmp	r4, r1
 80097b4:	684b      	ldr	r3, [r1, #4]
 80097b6:	bf16      	itet	ne
 80097b8:	6063      	strne	r3, [r4, #4]
 80097ba:	6013      	streq	r3, [r2, #0]
 80097bc:	460c      	movne	r4, r1
 80097be:	e7eb      	b.n	8009798 <_malloc_r+0x64>
 80097c0:	460c      	mov	r4, r1
 80097c2:	6849      	ldr	r1, [r1, #4]
 80097c4:	e7cc      	b.n	8009760 <_malloc_r+0x2c>
 80097c6:	1cc4      	adds	r4, r0, #3
 80097c8:	f024 0403 	bic.w	r4, r4, #3
 80097cc:	42a0      	cmp	r0, r4
 80097ce:	d005      	beq.n	80097dc <_malloc_r+0xa8>
 80097d0:	1a21      	subs	r1, r4, r0
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 f808 	bl	80097e8 <_sbrk_r>
 80097d8:	3001      	adds	r0, #1
 80097da:	d0cf      	beq.n	800977c <_malloc_r+0x48>
 80097dc:	6025      	str	r5, [r4, #0]
 80097de:	e7db      	b.n	8009798 <_malloc_r+0x64>
 80097e0:	200000bc 	.word	0x200000bc
 80097e4:	200000c0 	.word	0x200000c0

080097e8 <_sbrk_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4c06      	ldr	r4, [pc, #24]	; (8009804 <_sbrk_r+0x1c>)
 80097ec:	2300      	movs	r3, #0
 80097ee:	4605      	mov	r5, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	f7f8 f8be 	bl	8001974 <_sbrk>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_sbrk_r+0x1a>
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_sbrk_r+0x1a>
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	200008e0 	.word	0x200008e0

08009808 <siprintf>:
 8009808:	b40e      	push	{r1, r2, r3}
 800980a:	b500      	push	{lr}
 800980c:	b09c      	sub	sp, #112	; 0x70
 800980e:	ab1d      	add	r3, sp, #116	; 0x74
 8009810:	9002      	str	r0, [sp, #8]
 8009812:	9006      	str	r0, [sp, #24]
 8009814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009818:	4809      	ldr	r0, [pc, #36]	; (8009840 <siprintf+0x38>)
 800981a:	9107      	str	r1, [sp, #28]
 800981c:	9104      	str	r1, [sp, #16]
 800981e:	4909      	ldr	r1, [pc, #36]	; (8009844 <siprintf+0x3c>)
 8009820:	f853 2b04 	ldr.w	r2, [r3], #4
 8009824:	9105      	str	r1, [sp, #20]
 8009826:	6800      	ldr	r0, [r0, #0]
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	a902      	add	r1, sp, #8
 800982c:	f000 f868 	bl	8009900 <_svfiprintf_r>
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	b01c      	add	sp, #112	; 0x70
 8009838:	f85d eb04 	ldr.w	lr, [sp], #4
 800983c:	b003      	add	sp, #12
 800983e:	4770      	bx	lr
 8009840:	2000002c 	.word	0x2000002c
 8009844:	ffff0208 	.word	0xffff0208

08009848 <__malloc_lock>:
 8009848:	4770      	bx	lr

0800984a <__malloc_unlock>:
 800984a:	4770      	bx	lr

0800984c <__ssputs_r>:
 800984c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009850:	688e      	ldr	r6, [r1, #8]
 8009852:	429e      	cmp	r6, r3
 8009854:	4682      	mov	sl, r0
 8009856:	460c      	mov	r4, r1
 8009858:	4690      	mov	r8, r2
 800985a:	4699      	mov	r9, r3
 800985c:	d837      	bhi.n	80098ce <__ssputs_r+0x82>
 800985e:	898a      	ldrh	r2, [r1, #12]
 8009860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009864:	d031      	beq.n	80098ca <__ssputs_r+0x7e>
 8009866:	6825      	ldr	r5, [r4, #0]
 8009868:	6909      	ldr	r1, [r1, #16]
 800986a:	1a6f      	subs	r7, r5, r1
 800986c:	6965      	ldr	r5, [r4, #20]
 800986e:	2302      	movs	r3, #2
 8009870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009874:	fb95 f5f3 	sdiv	r5, r5, r3
 8009878:	f109 0301 	add.w	r3, r9, #1
 800987c:	443b      	add	r3, r7
 800987e:	429d      	cmp	r5, r3
 8009880:	bf38      	it	cc
 8009882:	461d      	movcc	r5, r3
 8009884:	0553      	lsls	r3, r2, #21
 8009886:	d530      	bpl.n	80098ea <__ssputs_r+0x9e>
 8009888:	4629      	mov	r1, r5
 800988a:	f7ff ff53 	bl	8009734 <_malloc_r>
 800988e:	4606      	mov	r6, r0
 8009890:	b950      	cbnz	r0, 80098a8 <__ssputs_r+0x5c>
 8009892:	230c      	movs	r3, #12
 8009894:	f8ca 3000 	str.w	r3, [sl]
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a8:	463a      	mov	r2, r7
 80098aa:	6921      	ldr	r1, [r4, #16]
 80098ac:	f000 faa8 	bl	8009e00 <memcpy>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	6126      	str	r6, [r4, #16]
 80098be:	6165      	str	r5, [r4, #20]
 80098c0:	443e      	add	r6, r7
 80098c2:	1bed      	subs	r5, r5, r7
 80098c4:	6026      	str	r6, [r4, #0]
 80098c6:	60a5      	str	r5, [r4, #8]
 80098c8:	464e      	mov	r6, r9
 80098ca:	454e      	cmp	r6, r9
 80098cc:	d900      	bls.n	80098d0 <__ssputs_r+0x84>
 80098ce:	464e      	mov	r6, r9
 80098d0:	4632      	mov	r2, r6
 80098d2:	4641      	mov	r1, r8
 80098d4:	6820      	ldr	r0, [r4, #0]
 80098d6:	f000 fa9e 	bl	8009e16 <memmove>
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	1b9b      	subs	r3, r3, r6
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	441e      	add	r6, r3
 80098e4:	6026      	str	r6, [r4, #0]
 80098e6:	2000      	movs	r0, #0
 80098e8:	e7dc      	b.n	80098a4 <__ssputs_r+0x58>
 80098ea:	462a      	mov	r2, r5
 80098ec:	f000 faac 	bl	8009e48 <_realloc_r>
 80098f0:	4606      	mov	r6, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d1e2      	bne.n	80098bc <__ssputs_r+0x70>
 80098f6:	6921      	ldr	r1, [r4, #16]
 80098f8:	4650      	mov	r0, sl
 80098fa:	f7ff fecd 	bl	8009698 <_free_r>
 80098fe:	e7c8      	b.n	8009892 <__ssputs_r+0x46>

08009900 <_svfiprintf_r>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	461d      	mov	r5, r3
 8009906:	898b      	ldrh	r3, [r1, #12]
 8009908:	061f      	lsls	r7, r3, #24
 800990a:	b09d      	sub	sp, #116	; 0x74
 800990c:	4680      	mov	r8, r0
 800990e:	460c      	mov	r4, r1
 8009910:	4616      	mov	r6, r2
 8009912:	d50f      	bpl.n	8009934 <_svfiprintf_r+0x34>
 8009914:	690b      	ldr	r3, [r1, #16]
 8009916:	b96b      	cbnz	r3, 8009934 <_svfiprintf_r+0x34>
 8009918:	2140      	movs	r1, #64	; 0x40
 800991a:	f7ff ff0b 	bl	8009734 <_malloc_r>
 800991e:	6020      	str	r0, [r4, #0]
 8009920:	6120      	str	r0, [r4, #16]
 8009922:	b928      	cbnz	r0, 8009930 <_svfiprintf_r+0x30>
 8009924:	230c      	movs	r3, #12
 8009926:	f8c8 3000 	str.w	r3, [r8]
 800992a:	f04f 30ff 	mov.w	r0, #4294967295
 800992e:	e0c8      	b.n	8009ac2 <_svfiprintf_r+0x1c2>
 8009930:	2340      	movs	r3, #64	; 0x40
 8009932:	6163      	str	r3, [r4, #20]
 8009934:	2300      	movs	r3, #0
 8009936:	9309      	str	r3, [sp, #36]	; 0x24
 8009938:	2320      	movs	r3, #32
 800993a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800993e:	2330      	movs	r3, #48	; 0x30
 8009940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009944:	9503      	str	r5, [sp, #12]
 8009946:	f04f 0b01 	mov.w	fp, #1
 800994a:	4637      	mov	r7, r6
 800994c:	463d      	mov	r5, r7
 800994e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009952:	b10b      	cbz	r3, 8009958 <_svfiprintf_r+0x58>
 8009954:	2b25      	cmp	r3, #37	; 0x25
 8009956:	d13e      	bne.n	80099d6 <_svfiprintf_r+0xd6>
 8009958:	ebb7 0a06 	subs.w	sl, r7, r6
 800995c:	d00b      	beq.n	8009976 <_svfiprintf_r+0x76>
 800995e:	4653      	mov	r3, sl
 8009960:	4632      	mov	r2, r6
 8009962:	4621      	mov	r1, r4
 8009964:	4640      	mov	r0, r8
 8009966:	f7ff ff71 	bl	800984c <__ssputs_r>
 800996a:	3001      	adds	r0, #1
 800996c:	f000 80a4 	beq.w	8009ab8 <_svfiprintf_r+0x1b8>
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	4453      	add	r3, sl
 8009974:	9309      	str	r3, [sp, #36]	; 0x24
 8009976:	783b      	ldrb	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 809d 	beq.w	8009ab8 <_svfiprintf_r+0x1b8>
 800997e:	2300      	movs	r3, #0
 8009980:	f04f 32ff 	mov.w	r2, #4294967295
 8009984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009990:	931a      	str	r3, [sp, #104]	; 0x68
 8009992:	462f      	mov	r7, r5
 8009994:	2205      	movs	r2, #5
 8009996:	f817 1b01 	ldrb.w	r1, [r7], #1
 800999a:	4850      	ldr	r0, [pc, #320]	; (8009adc <_svfiprintf_r+0x1dc>)
 800999c:	f7f6 fc20 	bl	80001e0 <memchr>
 80099a0:	9b04      	ldr	r3, [sp, #16]
 80099a2:	b9d0      	cbnz	r0, 80099da <_svfiprintf_r+0xda>
 80099a4:	06d9      	lsls	r1, r3, #27
 80099a6:	bf44      	itt	mi
 80099a8:	2220      	movmi	r2, #32
 80099aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ae:	071a      	lsls	r2, r3, #28
 80099b0:	bf44      	itt	mi
 80099b2:	222b      	movmi	r2, #43	; 0x2b
 80099b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099b8:	782a      	ldrb	r2, [r5, #0]
 80099ba:	2a2a      	cmp	r2, #42	; 0x2a
 80099bc:	d015      	beq.n	80099ea <_svfiprintf_r+0xea>
 80099be:	9a07      	ldr	r2, [sp, #28]
 80099c0:	462f      	mov	r7, r5
 80099c2:	2000      	movs	r0, #0
 80099c4:	250a      	movs	r5, #10
 80099c6:	4639      	mov	r1, r7
 80099c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099cc:	3b30      	subs	r3, #48	; 0x30
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	d94d      	bls.n	8009a6e <_svfiprintf_r+0x16e>
 80099d2:	b1b8      	cbz	r0, 8009a04 <_svfiprintf_r+0x104>
 80099d4:	e00f      	b.n	80099f6 <_svfiprintf_r+0xf6>
 80099d6:	462f      	mov	r7, r5
 80099d8:	e7b8      	b.n	800994c <_svfiprintf_r+0x4c>
 80099da:	4a40      	ldr	r2, [pc, #256]	; (8009adc <_svfiprintf_r+0x1dc>)
 80099dc:	1a80      	subs	r0, r0, r2
 80099de:	fa0b f000 	lsl.w	r0, fp, r0
 80099e2:	4318      	orrs	r0, r3
 80099e4:	9004      	str	r0, [sp, #16]
 80099e6:	463d      	mov	r5, r7
 80099e8:	e7d3      	b.n	8009992 <_svfiprintf_r+0x92>
 80099ea:	9a03      	ldr	r2, [sp, #12]
 80099ec:	1d11      	adds	r1, r2, #4
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	9103      	str	r1, [sp, #12]
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	db01      	blt.n	80099fa <_svfiprintf_r+0xfa>
 80099f6:	9207      	str	r2, [sp, #28]
 80099f8:	e004      	b.n	8009a04 <_svfiprintf_r+0x104>
 80099fa:	4252      	negs	r2, r2
 80099fc:	f043 0302 	orr.w	r3, r3, #2
 8009a00:	9207      	str	r2, [sp, #28]
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	783b      	ldrb	r3, [r7, #0]
 8009a06:	2b2e      	cmp	r3, #46	; 0x2e
 8009a08:	d10c      	bne.n	8009a24 <_svfiprintf_r+0x124>
 8009a0a:	787b      	ldrb	r3, [r7, #1]
 8009a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0e:	d133      	bne.n	8009a78 <_svfiprintf_r+0x178>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	1d1a      	adds	r2, r3, #4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	9203      	str	r2, [sp, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bfb8      	it	lt
 8009a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a20:	3702      	adds	r7, #2
 8009a22:	9305      	str	r3, [sp, #20]
 8009a24:	4d2e      	ldr	r5, [pc, #184]	; (8009ae0 <_svfiprintf_r+0x1e0>)
 8009a26:	7839      	ldrb	r1, [r7, #0]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7f6 fbd8 	bl	80001e0 <memchr>
 8009a30:	b138      	cbz	r0, 8009a42 <_svfiprintf_r+0x142>
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	1b40      	subs	r0, r0, r5
 8009a36:	fa03 f000 	lsl.w	r0, r3, r0
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	4303      	orrs	r3, r0
 8009a3e:	3701      	adds	r7, #1
 8009a40:	9304      	str	r3, [sp, #16]
 8009a42:	7839      	ldrb	r1, [r7, #0]
 8009a44:	4827      	ldr	r0, [pc, #156]	; (8009ae4 <_svfiprintf_r+0x1e4>)
 8009a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4a:	2206      	movs	r2, #6
 8009a4c:	1c7e      	adds	r6, r7, #1
 8009a4e:	f7f6 fbc7 	bl	80001e0 <memchr>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d038      	beq.n	8009ac8 <_svfiprintf_r+0x1c8>
 8009a56:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <_svfiprintf_r+0x1e8>)
 8009a58:	bb13      	cbnz	r3, 8009aa0 <_svfiprintf_r+0x1a0>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	3307      	adds	r3, #7
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	3308      	adds	r3, #8
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a68:	444b      	add	r3, r9
 8009a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6c:	e76d      	b.n	800994a <_svfiprintf_r+0x4a>
 8009a6e:	fb05 3202 	mla	r2, r5, r2, r3
 8009a72:	2001      	movs	r0, #1
 8009a74:	460f      	mov	r7, r1
 8009a76:	e7a6      	b.n	80099c6 <_svfiprintf_r+0xc6>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	3701      	adds	r7, #1
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	250a      	movs	r5, #10
 8009a82:	4638      	mov	r0, r7
 8009a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a88:	3a30      	subs	r2, #48	; 0x30
 8009a8a:	2a09      	cmp	r2, #9
 8009a8c:	d903      	bls.n	8009a96 <_svfiprintf_r+0x196>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0c8      	beq.n	8009a24 <_svfiprintf_r+0x124>
 8009a92:	9105      	str	r1, [sp, #20]
 8009a94:	e7c6      	b.n	8009a24 <_svfiprintf_r+0x124>
 8009a96:	fb05 2101 	mla	r1, r5, r1, r2
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	e7f0      	b.n	8009a82 <_svfiprintf_r+0x182>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4b11      	ldr	r3, [pc, #68]	; (8009aec <_svfiprintf_r+0x1ec>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f3af 8000 	nop.w
 8009ab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ab4:	4681      	mov	r9, r0
 8009ab6:	d1d6      	bne.n	8009a66 <_svfiprintf_r+0x166>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	065b      	lsls	r3, r3, #25
 8009abc:	f53f af35 	bmi.w	800992a <_svfiprintf_r+0x2a>
 8009ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac2:	b01d      	add	sp, #116	; 0x74
 8009ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac8:	ab03      	add	r3, sp, #12
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	4622      	mov	r2, r4
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <_svfiprintf_r+0x1ec>)
 8009ad0:	a904      	add	r1, sp, #16
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f000 f882 	bl	8009bdc <_printf_i>
 8009ad8:	e7ea      	b.n	8009ab0 <_svfiprintf_r+0x1b0>
 8009ada:	bf00      	nop
 8009adc:	0800b024 	.word	0x0800b024
 8009ae0:	0800b02a 	.word	0x0800b02a
 8009ae4:	0800b02e 	.word	0x0800b02e
 8009ae8:	00000000 	.word	0x00000000
 8009aec:	0800984d 	.word	0x0800984d

08009af0 <_printf_common>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	4691      	mov	r9, r2
 8009af6:	461f      	mov	r7, r3
 8009af8:	688a      	ldr	r2, [r1, #8]
 8009afa:	690b      	ldr	r3, [r1, #16]
 8009afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	bfb8      	it	lt
 8009b04:	4613      	movlt	r3, r2
 8009b06:	f8c9 3000 	str.w	r3, [r9]
 8009b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	b112      	cbz	r2, 8009b1a <_printf_common+0x2a>
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c9 3000 	str.w	r3, [r9]
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	0699      	lsls	r1, r3, #26
 8009b1e:	bf42      	ittt	mi
 8009b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b24:	3302      	addmi	r3, #2
 8009b26:	f8c9 3000 	strmi.w	r3, [r9]
 8009b2a:	6825      	ldr	r5, [r4, #0]
 8009b2c:	f015 0506 	ands.w	r5, r5, #6
 8009b30:	d107      	bne.n	8009b42 <_printf_common+0x52>
 8009b32:	f104 0a19 	add.w	sl, r4, #25
 8009b36:	68e3      	ldr	r3, [r4, #12]
 8009b38:	f8d9 2000 	ldr.w	r2, [r9]
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	dc28      	bgt.n	8009b94 <_printf_common+0xa4>
 8009b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	3300      	adds	r3, #0
 8009b4a:	bf18      	it	ne
 8009b4c:	2301      	movne	r3, #1
 8009b4e:	0692      	lsls	r2, r2, #26
 8009b50:	d42d      	bmi.n	8009bae <_printf_common+0xbe>
 8009b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b56:	4639      	mov	r1, r7
 8009b58:	4630      	mov	r0, r6
 8009b5a:	47c0      	blx	r8
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d020      	beq.n	8009ba2 <_printf_common+0xb2>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	68e5      	ldr	r5, [r4, #12]
 8009b64:	f8d9 2000 	ldr.w	r2, [r9]
 8009b68:	f003 0306 	and.w	r3, r3, #6
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	bf08      	it	eq
 8009b70:	1aad      	subeq	r5, r5, r2
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	6922      	ldr	r2, [r4, #16]
 8009b76:	bf0c      	ite	eq
 8009b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b7c:	2500      	movne	r5, #0
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	bfc4      	itt	gt
 8009b82:	1a9b      	subgt	r3, r3, r2
 8009b84:	18ed      	addgt	r5, r5, r3
 8009b86:	f04f 0900 	mov.w	r9, #0
 8009b8a:	341a      	adds	r4, #26
 8009b8c:	454d      	cmp	r5, r9
 8009b8e:	d11a      	bne.n	8009bc6 <_printf_common+0xd6>
 8009b90:	2000      	movs	r0, #0
 8009b92:	e008      	b.n	8009ba6 <_printf_common+0xb6>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4652      	mov	r2, sl
 8009b98:	4639      	mov	r1, r7
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d103      	bne.n	8009baa <_printf_common+0xba>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	3501      	adds	r5, #1
 8009bac:	e7c3      	b.n	8009b36 <_printf_common+0x46>
 8009bae:	18e1      	adds	r1, r4, r3
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	2030      	movs	r0, #48	; 0x30
 8009bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bb8:	4422      	add	r2, r4
 8009bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	e7c5      	b.n	8009b52 <_printf_common+0x62>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4639      	mov	r1, r7
 8009bcc:	4630      	mov	r0, r6
 8009bce:	47c0      	blx	r8
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d0e6      	beq.n	8009ba2 <_printf_common+0xb2>
 8009bd4:	f109 0901 	add.w	r9, r9, #1
 8009bd8:	e7d8      	b.n	8009b8c <_printf_common+0x9c>
	...

08009bdc <_printf_i>:
 8009bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009be4:	460c      	mov	r4, r1
 8009be6:	7e09      	ldrb	r1, [r1, #24]
 8009be8:	b085      	sub	sp, #20
 8009bea:	296e      	cmp	r1, #110	; 0x6e
 8009bec:	4617      	mov	r7, r2
 8009bee:	4606      	mov	r6, r0
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bf4:	f000 80b3 	beq.w	8009d5e <_printf_i+0x182>
 8009bf8:	d822      	bhi.n	8009c40 <_printf_i+0x64>
 8009bfa:	2963      	cmp	r1, #99	; 0x63
 8009bfc:	d036      	beq.n	8009c6c <_printf_i+0x90>
 8009bfe:	d80a      	bhi.n	8009c16 <_printf_i+0x3a>
 8009c00:	2900      	cmp	r1, #0
 8009c02:	f000 80b9 	beq.w	8009d78 <_printf_i+0x19c>
 8009c06:	2958      	cmp	r1, #88	; 0x58
 8009c08:	f000 8083 	beq.w	8009d12 <_printf_i+0x136>
 8009c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c14:	e032      	b.n	8009c7c <_printf_i+0xa0>
 8009c16:	2964      	cmp	r1, #100	; 0x64
 8009c18:	d001      	beq.n	8009c1e <_printf_i+0x42>
 8009c1a:	2969      	cmp	r1, #105	; 0x69
 8009c1c:	d1f6      	bne.n	8009c0c <_printf_i+0x30>
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	6813      	ldr	r3, [r2, #0]
 8009c22:	0605      	lsls	r5, r0, #24
 8009c24:	f103 0104 	add.w	r1, r3, #4
 8009c28:	d52a      	bpl.n	8009c80 <_printf_i+0xa4>
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6011      	str	r1, [r2, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da03      	bge.n	8009c3a <_printf_i+0x5e>
 8009c32:	222d      	movs	r2, #45	; 0x2d
 8009c34:	425b      	negs	r3, r3
 8009c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c3a:	486f      	ldr	r0, [pc, #444]	; (8009df8 <_printf_i+0x21c>)
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	e039      	b.n	8009cb4 <_printf_i+0xd8>
 8009c40:	2973      	cmp	r1, #115	; 0x73
 8009c42:	f000 809d 	beq.w	8009d80 <_printf_i+0x1a4>
 8009c46:	d808      	bhi.n	8009c5a <_printf_i+0x7e>
 8009c48:	296f      	cmp	r1, #111	; 0x6f
 8009c4a:	d020      	beq.n	8009c8e <_printf_i+0xb2>
 8009c4c:	2970      	cmp	r1, #112	; 0x70
 8009c4e:	d1dd      	bne.n	8009c0c <_printf_i+0x30>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	f043 0320 	orr.w	r3, r3, #32
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	e003      	b.n	8009c62 <_printf_i+0x86>
 8009c5a:	2975      	cmp	r1, #117	; 0x75
 8009c5c:	d017      	beq.n	8009c8e <_printf_i+0xb2>
 8009c5e:	2978      	cmp	r1, #120	; 0x78
 8009c60:	d1d4      	bne.n	8009c0c <_printf_i+0x30>
 8009c62:	2378      	movs	r3, #120	; 0x78
 8009c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c68:	4864      	ldr	r0, [pc, #400]	; (8009dfc <_printf_i+0x220>)
 8009c6a:	e055      	b.n	8009d18 <_printf_i+0x13c>
 8009c6c:	6813      	ldr	r3, [r2, #0]
 8009c6e:	1d19      	adds	r1, r3, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6011      	str	r1, [r2, #0]
 8009c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e08c      	b.n	8009d9a <_printf_i+0x1be>
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6011      	str	r1, [r2, #0]
 8009c84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c88:	bf18      	it	ne
 8009c8a:	b21b      	sxthne	r3, r3
 8009c8c:	e7cf      	b.n	8009c2e <_printf_i+0x52>
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	6825      	ldr	r5, [r4, #0]
 8009c92:	1d18      	adds	r0, r3, #4
 8009c94:	6010      	str	r0, [r2, #0]
 8009c96:	0628      	lsls	r0, r5, #24
 8009c98:	d501      	bpl.n	8009c9e <_printf_i+0xc2>
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	e002      	b.n	8009ca4 <_printf_i+0xc8>
 8009c9e:	0668      	lsls	r0, r5, #25
 8009ca0:	d5fb      	bpl.n	8009c9a <_printf_i+0xbe>
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	4854      	ldr	r0, [pc, #336]	; (8009df8 <_printf_i+0x21c>)
 8009ca6:	296f      	cmp	r1, #111	; 0x6f
 8009ca8:	bf14      	ite	ne
 8009caa:	220a      	movne	r2, #10
 8009cac:	2208      	moveq	r2, #8
 8009cae:	2100      	movs	r1, #0
 8009cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cb4:	6865      	ldr	r5, [r4, #4]
 8009cb6:	60a5      	str	r5, [r4, #8]
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	f2c0 8095 	blt.w	8009de8 <_printf_i+0x20c>
 8009cbe:	6821      	ldr	r1, [r4, #0]
 8009cc0:	f021 0104 	bic.w	r1, r1, #4
 8009cc4:	6021      	str	r1, [r4, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d13d      	bne.n	8009d46 <_printf_i+0x16a>
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	f040 808e 	bne.w	8009dec <_printf_i+0x210>
 8009cd0:	4665      	mov	r5, ip
 8009cd2:	2a08      	cmp	r2, #8
 8009cd4:	d10b      	bne.n	8009cee <_printf_i+0x112>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	07db      	lsls	r3, r3, #31
 8009cda:	d508      	bpl.n	8009cee <_printf_i+0x112>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	6862      	ldr	r2, [r4, #4]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	bfde      	ittt	le
 8009ce4:	2330      	movle	r3, #48	; 0x30
 8009ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cee:	ebac 0305 	sub.w	r3, ip, r5
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	f8cd 8000 	str.w	r8, [sp]
 8009cf8:	463b      	mov	r3, r7
 8009cfa:	aa03      	add	r2, sp, #12
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7ff fef6 	bl	8009af0 <_printf_common>
 8009d04:	3001      	adds	r0, #1
 8009d06:	d14d      	bne.n	8009da4 <_printf_i+0x1c8>
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	b005      	add	sp, #20
 8009d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d12:	4839      	ldr	r0, [pc, #228]	; (8009df8 <_printf_i+0x21c>)
 8009d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d18:	6813      	ldr	r3, [r2, #0]
 8009d1a:	6821      	ldr	r1, [r4, #0]
 8009d1c:	1d1d      	adds	r5, r3, #4
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6015      	str	r5, [r2, #0]
 8009d22:	060a      	lsls	r2, r1, #24
 8009d24:	d50b      	bpl.n	8009d3e <_printf_i+0x162>
 8009d26:	07ca      	lsls	r2, r1, #31
 8009d28:	bf44      	itt	mi
 8009d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8009d2e:	6021      	strmi	r1, [r4, #0]
 8009d30:	b91b      	cbnz	r3, 8009d3a <_printf_i+0x15e>
 8009d32:	6822      	ldr	r2, [r4, #0]
 8009d34:	f022 0220 	bic.w	r2, r2, #32
 8009d38:	6022      	str	r2, [r4, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	e7b7      	b.n	8009cae <_printf_i+0xd2>
 8009d3e:	064d      	lsls	r5, r1, #25
 8009d40:	bf48      	it	mi
 8009d42:	b29b      	uxthmi	r3, r3
 8009d44:	e7ef      	b.n	8009d26 <_printf_i+0x14a>
 8009d46:	4665      	mov	r5, ip
 8009d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d50:	5cc3      	ldrb	r3, [r0, r3]
 8009d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d56:	460b      	mov	r3, r1
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	d1f5      	bne.n	8009d48 <_printf_i+0x16c>
 8009d5c:	e7b9      	b.n	8009cd2 <_printf_i+0xf6>
 8009d5e:	6813      	ldr	r3, [r2, #0]
 8009d60:	6825      	ldr	r5, [r4, #0]
 8009d62:	6961      	ldr	r1, [r4, #20]
 8009d64:	1d18      	adds	r0, r3, #4
 8009d66:	6010      	str	r0, [r2, #0]
 8009d68:	0628      	lsls	r0, r5, #24
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	d501      	bpl.n	8009d72 <_printf_i+0x196>
 8009d6e:	6019      	str	r1, [r3, #0]
 8009d70:	e002      	b.n	8009d78 <_printf_i+0x19c>
 8009d72:	066a      	lsls	r2, r5, #25
 8009d74:	d5fb      	bpl.n	8009d6e <_printf_i+0x192>
 8009d76:	8019      	strh	r1, [r3, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	4665      	mov	r5, ip
 8009d7e:	e7b9      	b.n	8009cf4 <_printf_i+0x118>
 8009d80:	6813      	ldr	r3, [r2, #0]
 8009d82:	1d19      	adds	r1, r3, #4
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	681d      	ldr	r5, [r3, #0]
 8009d88:	6862      	ldr	r2, [r4, #4]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7f6 fa27 	bl	80001e0 <memchr>
 8009d92:	b108      	cbz	r0, 8009d98 <_printf_i+0x1bc>
 8009d94:	1b40      	subs	r0, r0, r5
 8009d96:	6060      	str	r0, [r4, #4]
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da2:	e7a7      	b.n	8009cf4 <_printf_i+0x118>
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	462a      	mov	r2, r5
 8009da8:	4639      	mov	r1, r7
 8009daa:	4630      	mov	r0, r6
 8009dac:	47c0      	blx	r8
 8009dae:	3001      	adds	r0, #1
 8009db0:	d0aa      	beq.n	8009d08 <_printf_i+0x12c>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	079b      	lsls	r3, r3, #30
 8009db6:	d413      	bmi.n	8009de0 <_printf_i+0x204>
 8009db8:	68e0      	ldr	r0, [r4, #12]
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	bfb8      	it	lt
 8009dc0:	4618      	movlt	r0, r3
 8009dc2:	e7a3      	b.n	8009d0c <_printf_i+0x130>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	464a      	mov	r2, r9
 8009dc8:	4639      	mov	r1, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	47c0      	blx	r8
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d09a      	beq.n	8009d08 <_printf_i+0x12c>
 8009dd2:	3501      	adds	r5, #1
 8009dd4:	68e3      	ldr	r3, [r4, #12]
 8009dd6:	9a03      	ldr	r2, [sp, #12]
 8009dd8:	1a9b      	subs	r3, r3, r2
 8009dda:	42ab      	cmp	r3, r5
 8009ddc:	dcf2      	bgt.n	8009dc4 <_printf_i+0x1e8>
 8009dde:	e7eb      	b.n	8009db8 <_printf_i+0x1dc>
 8009de0:	2500      	movs	r5, #0
 8009de2:	f104 0919 	add.w	r9, r4, #25
 8009de6:	e7f5      	b.n	8009dd4 <_printf_i+0x1f8>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1ac      	bne.n	8009d46 <_printf_i+0x16a>
 8009dec:	7803      	ldrb	r3, [r0, #0]
 8009dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009df6:	e76c      	b.n	8009cd2 <_printf_i+0xf6>
 8009df8:	0800b035 	.word	0x0800b035
 8009dfc:	0800b046 	.word	0x0800b046

08009e00 <memcpy>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	1e43      	subs	r3, r0, #1
 8009e04:	440a      	add	r2, r1
 8009e06:	4291      	cmp	r1, r2
 8009e08:	d100      	bne.n	8009e0c <memcpy+0xc>
 8009e0a:	bd10      	pop	{r4, pc}
 8009e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e14:	e7f7      	b.n	8009e06 <memcpy+0x6>

08009e16 <memmove>:
 8009e16:	4288      	cmp	r0, r1
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	eb01 0302 	add.w	r3, r1, r2
 8009e1e:	d807      	bhi.n	8009e30 <memmove+0x1a>
 8009e20:	1e42      	subs	r2, r0, #1
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d00a      	beq.n	8009e3c <memmove+0x26>
 8009e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e2e:	e7f8      	b.n	8009e22 <memmove+0xc>
 8009e30:	4283      	cmp	r3, r0
 8009e32:	d9f5      	bls.n	8009e20 <memmove+0xa>
 8009e34:	1881      	adds	r1, r0, r2
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	42d3      	cmn	r3, r2
 8009e3a:	d100      	bne.n	8009e3e <memmove+0x28>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e46:	e7f7      	b.n	8009e38 <memmove+0x22>

08009e48 <_realloc_r>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	460e      	mov	r6, r1
 8009e50:	b921      	cbnz	r1, 8009e5c <_realloc_r+0x14>
 8009e52:	4611      	mov	r1, r2
 8009e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e58:	f7ff bc6c 	b.w	8009734 <_malloc_r>
 8009e5c:	b922      	cbnz	r2, 8009e68 <_realloc_r+0x20>
 8009e5e:	f7ff fc1b 	bl	8009698 <_free_r>
 8009e62:	4625      	mov	r5, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e68:	f000 f814 	bl	8009e94 <_malloc_usable_size_r>
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	d20f      	bcs.n	8009e90 <_realloc_r+0x48>
 8009e70:	4621      	mov	r1, r4
 8009e72:	4638      	mov	r0, r7
 8009e74:	f7ff fc5e 	bl	8009734 <_malloc_r>
 8009e78:	4605      	mov	r5, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0f2      	beq.n	8009e64 <_realloc_r+0x1c>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4622      	mov	r2, r4
 8009e82:	f7ff ffbd 	bl	8009e00 <memcpy>
 8009e86:	4631      	mov	r1, r6
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff fc05 	bl	8009698 <_free_r>
 8009e8e:	e7e9      	b.n	8009e64 <_realloc_r+0x1c>
 8009e90:	4635      	mov	r5, r6
 8009e92:	e7e7      	b.n	8009e64 <_realloc_r+0x1c>

08009e94 <_malloc_usable_size_r>:
 8009e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e98:	1f18      	subs	r0, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	bfbc      	itt	lt
 8009e9e:	580b      	ldrlt	r3, [r1, r0]
 8009ea0:	18c0      	addlt	r0, r0, r3
 8009ea2:	4770      	bx	lr

08009ea4 <round>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	ec57 6b10 	vmov	r6, r7, d0
 8009eaa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009eae:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8009eb2:	2c13      	cmp	r4, #19
 8009eb4:	463b      	mov	r3, r7
 8009eb6:	463d      	mov	r5, r7
 8009eb8:	dc17      	bgt.n	8009eea <round+0x46>
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	da09      	bge.n	8009ed2 <round+0x2e>
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8009ec4:	d103      	bne.n	8009ece <round+0x2a>
 8009ec6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009eca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ece:	2100      	movs	r1, #0
 8009ed0:	e02c      	b.n	8009f2c <round+0x88>
 8009ed2:	4a18      	ldr	r2, [pc, #96]	; (8009f34 <round+0x90>)
 8009ed4:	4122      	asrs	r2, r4
 8009ed6:	4217      	tst	r7, r2
 8009ed8:	d100      	bne.n	8009edc <round+0x38>
 8009eda:	b19e      	cbz	r6, 8009f04 <round+0x60>
 8009edc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ee0:	4123      	asrs	r3, r4
 8009ee2:	442b      	add	r3, r5
 8009ee4:	ea23 0302 	bic.w	r3, r3, r2
 8009ee8:	e7f1      	b.n	8009ece <round+0x2a>
 8009eea:	2c33      	cmp	r4, #51	; 0x33
 8009eec:	dd0d      	ble.n	8009f0a <round+0x66>
 8009eee:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009ef2:	d107      	bne.n	8009f04 <round+0x60>
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	ee10 2a10 	vmov	r2, s0
 8009efc:	f7f6 f9c6 	bl	800028c <__adddf3>
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	ec47 6b10 	vmov	d0, r6, r7
 8009f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f0a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	40d0      	lsrs	r0, r2
 8009f14:	4206      	tst	r6, r0
 8009f16:	d0f5      	beq.n	8009f04 <round+0x60>
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009f1e:	fa02 f404 	lsl.w	r4, r2, r4
 8009f22:	1931      	adds	r1, r6, r4
 8009f24:	bf28      	it	cs
 8009f26:	189b      	addcs	r3, r3, r2
 8009f28:	ea21 0100 	bic.w	r1, r1, r0
 8009f2c:	461f      	mov	r7, r3
 8009f2e:	460e      	mov	r6, r1
 8009f30:	e7e8      	b.n	8009f04 <round+0x60>
 8009f32:	bf00      	nop
 8009f34:	000fffff 	.word	0x000fffff

08009f38 <pow>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	ed2d 8b04 	vpush	{d8-d9}
 8009f40:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a214 <pow+0x2dc>
 8009f44:	b08d      	sub	sp, #52	; 0x34
 8009f46:	ec57 6b10 	vmov	r6, r7, d0
 8009f4a:	ec55 4b11 	vmov	r4, r5, d1
 8009f4e:	f000 f963 	bl	800a218 <__ieee754_pow>
 8009f52:	f999 3000 	ldrsb.w	r3, [r9]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	eeb0 8a40 	vmov.f32	s16, s0
 8009f5e:	eef0 8a60 	vmov.f32	s17, s1
 8009f62:	46c8      	mov	r8, r9
 8009f64:	d05f      	beq.n	800a026 <pow+0xee>
 8009f66:	4622      	mov	r2, r4
 8009f68:	462b      	mov	r3, r5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 fddd 	bl	8000b2c <__aeabi_dcmpun>
 8009f72:	4683      	mov	fp, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d156      	bne.n	800a026 <pow+0xee>
 8009f78:	4632      	mov	r2, r6
 8009f7a:	463b      	mov	r3, r7
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fdd4 	bl	8000b2c <__aeabi_dcmpun>
 8009f84:	9001      	str	r0, [sp, #4]
 8009f86:	b1e8      	cbz	r0, 8009fc4 <pow+0x8c>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f7f6 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d046      	beq.n	800a026 <pow+0xee>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	4b96      	ldr	r3, [pc, #600]	; (800a1f8 <pow+0x2c0>)
 8009f9e:	9303      	str	r3, [sp, #12]
 8009fa0:	4b96      	ldr	r3, [pc, #600]	; (800a1fc <pow+0x2c4>)
 8009fa2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fb4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009fb8:	d033      	beq.n	800a022 <pow+0xea>
 8009fba:	a802      	add	r0, sp, #8
 8009fbc:	f000 fefb 	bl	800adb6 <matherr>
 8009fc0:	bb48      	cbnz	r0, 800a016 <pow+0xde>
 8009fc2:	e05d      	b.n	800a080 <pow+0x148>
 8009fc4:	f04f 0a00 	mov.w	sl, #0
 8009fc8:	f04f 0b00 	mov.w	fp, #0
 8009fcc:	4652      	mov	r2, sl
 8009fce:	465b      	mov	r3, fp
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fd8:	ec4b ab19 	vmov	d9, sl, fp
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d054      	beq.n	800a08a <pow+0x152>
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	465b      	mov	r3, fp
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f7f6 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fec:	4680      	mov	r8, r0
 8009fee:	b318      	cbz	r0, 800a038 <pow+0x100>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	9302      	str	r3, [sp, #8]
 8009ff4:	4b80      	ldr	r3, [pc, #512]	; (800a1f8 <pow+0x2c0>)
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8009ffc:	9b00      	ldr	r3, [sp, #0]
 8009ffe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a002:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a006:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0d5      	beq.n	8009fba <pow+0x82>
 800a00e:	4b7b      	ldr	r3, [pc, #492]	; (800a1fc <pow+0x2c4>)
 800a010:	2200      	movs	r2, #0
 800a012:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a018:	b11b      	cbz	r3, 800a022 <pow+0xea>
 800a01a:	f7ff fafb 	bl	8009614 <__errno>
 800a01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a020:	6003      	str	r3, [r0, #0]
 800a022:	ed9d 8b08 	vldr	d8, [sp, #32]
 800a026:	eeb0 0a48 	vmov.f32	s0, s16
 800a02a:	eef0 0a68 	vmov.f32	s1, s17
 800a02e:	b00d      	add	sp, #52	; 0x34
 800a030:	ecbd 8b04 	vpop	{d8-d9}
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	ec45 4b10 	vmov	d0, r4, r5
 800a03c:	f000 feb3 	bl	800ada6 <finite>
 800a040:	2800      	cmp	r0, #0
 800a042:	d0f0      	beq.n	800a026 <pow+0xee>
 800a044:	4652      	mov	r2, sl
 800a046:	465b      	mov	r3, fp
 800a048:	4620      	mov	r0, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 fd46 	bl	8000adc <__aeabi_dcmplt>
 800a050:	2800      	cmp	r0, #0
 800a052:	d0e8      	beq.n	800a026 <pow+0xee>
 800a054:	2301      	movs	r3, #1
 800a056:	9302      	str	r3, [sp, #8]
 800a058:	4b67      	ldr	r3, [pc, #412]	; (800a1f8 <pow+0x2c0>)
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	f999 3000 	ldrsb.w	r3, [r9]
 800a060:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a064:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a068:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a06c:	b913      	cbnz	r3, 800a074 <pow+0x13c>
 800a06e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a072:	e7a2      	b.n	8009fba <pow+0x82>
 800a074:	4962      	ldr	r1, [pc, #392]	; (800a200 <pow+0x2c8>)
 800a076:	2000      	movs	r0, #0
 800a078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d19c      	bne.n	8009fba <pow+0x82>
 800a080:	f7ff fac8 	bl	8009614 <__errno>
 800a084:	2321      	movs	r3, #33	; 0x21
 800a086:	6003      	str	r3, [r0, #0]
 800a088:	e7c5      	b.n	800a016 <pow+0xde>
 800a08a:	eeb0 0a48 	vmov.f32	s0, s16
 800a08e:	eef0 0a68 	vmov.f32	s1, s17
 800a092:	f000 fe88 	bl	800ada6 <finite>
 800a096:	9000      	str	r0, [sp, #0]
 800a098:	2800      	cmp	r0, #0
 800a09a:	f040 8081 	bne.w	800a1a0 <pow+0x268>
 800a09e:	ec47 6b10 	vmov	d0, r6, r7
 800a0a2:	f000 fe80 	bl	800ada6 <finite>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d07a      	beq.n	800a1a0 <pow+0x268>
 800a0aa:	ec45 4b10 	vmov	d0, r4, r5
 800a0ae:	f000 fe7a 	bl	800ada6 <finite>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d074      	beq.n	800a1a0 <pow+0x268>
 800a0b6:	ec53 2b18 	vmov	r2, r3, d8
 800a0ba:	ee18 0a10 	vmov	r0, s16
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f7f6 fd34 	bl	8000b2c <__aeabi_dcmpun>
 800a0c4:	f999 9000 	ldrsb.w	r9, [r9]
 800a0c8:	4b4b      	ldr	r3, [pc, #300]	; (800a1f8 <pow+0x2c0>)
 800a0ca:	b1b0      	cbz	r0, 800a0fa <pow+0x1c2>
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a0da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a0de:	f1b9 0f00 	cmp.w	r9, #0
 800a0e2:	d0c4      	beq.n	800a06e <pow+0x136>
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	4659      	mov	r1, fp
 800a0ec:	f7f6 fbae 	bl	800084c <__aeabi_ddiv>
 800a0f0:	f1b9 0f02 	cmp.w	r9, #2
 800a0f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0f8:	e7c1      	b.n	800a07e <pow+0x146>
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a100:	900a      	str	r0, [sp, #40]	; 0x28
 800a102:	4629      	mov	r1, r5
 800a104:	4620      	mov	r0, r4
 800a106:	2200      	movs	r2, #0
 800a108:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <pow+0x2cc>)
 800a10a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a10e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	f1b9 0f00 	cmp.w	r9, #0
 800a11e:	d124      	bne.n	800a16a <pow+0x232>
 800a120:	4b39      	ldr	r3, [pc, #228]	; (800a208 <pow+0x2d0>)
 800a122:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a126:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a12a:	4630      	mov	r0, r6
 800a12c:	4652      	mov	r2, sl
 800a12e:	465b      	mov	r3, fp
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800a136:	2800      	cmp	r0, #0
 800a138:	d056      	beq.n	800a1e8 <pow+0x2b0>
 800a13a:	ec45 4b10 	vmov	d0, r4, r5
 800a13e:	f000 fe47 	bl	800add0 <rint>
 800a142:	4622      	mov	r2, r4
 800a144:	462b      	mov	r3, r5
 800a146:	ec51 0b10 	vmov	r0, r1, d0
 800a14a:	f7f6 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a14e:	b920      	cbnz	r0, 800a15a <pow+0x222>
 800a150:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <pow+0x2d4>)
 800a152:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a15a:	f998 3000 	ldrsb.w	r3, [r8]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d142      	bne.n	800a1e8 <pow+0x2b0>
 800a162:	f7ff fa57 	bl	8009614 <__errno>
 800a166:	2322      	movs	r3, #34	; 0x22
 800a168:	e78d      	b.n	800a086 <pow+0x14e>
 800a16a:	4b29      	ldr	r3, [pc, #164]	; (800a210 <pow+0x2d8>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a172:	4630      	mov	r0, r6
 800a174:	4652      	mov	r2, sl
 800a176:	465b      	mov	r3, fp
 800a178:	4639      	mov	r1, r7
 800a17a:	f7f6 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0eb      	beq.n	800a15a <pow+0x222>
 800a182:	ec45 4b10 	vmov	d0, r4, r5
 800a186:	f000 fe23 	bl	800add0 <rint>
 800a18a:	4622      	mov	r2, r4
 800a18c:	462b      	mov	r3, r5
 800a18e:	ec51 0b10 	vmov	r0, r1, d0
 800a192:	f7f6 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800a196:	2800      	cmp	r0, #0
 800a198:	d1df      	bne.n	800a15a <pow+0x222>
 800a19a:	2200      	movs	r2, #0
 800a19c:	4b18      	ldr	r3, [pc, #96]	; (800a200 <pow+0x2c8>)
 800a19e:	e7da      	b.n	800a156 <pow+0x21e>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	ec51 0b18 	vmov	r0, r1, d8
 800a1a8:	f7f6 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	f43f af3a 	beq.w	800a026 <pow+0xee>
 800a1b2:	ec47 6b10 	vmov	d0, r6, r7
 800a1b6:	f000 fdf6 	bl	800ada6 <finite>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f af33 	beq.w	800a026 <pow+0xee>
 800a1c0:	ec45 4b10 	vmov	d0, r4, r5
 800a1c4:	f000 fdef 	bl	800ada6 <finite>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f43f af2c 	beq.w	800a026 <pow+0xee>
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <pow+0x2c0>)
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	930a      	str	r3, [sp, #40]	; 0x28
 800a1da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a1de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a1e2:	ed8d 9b08 	vstr	d9, [sp, #32]
 800a1e6:	e7b8      	b.n	800a15a <pow+0x222>
 800a1e8:	a802      	add	r0, sp, #8
 800a1ea:	f000 fde4 	bl	800adb6 <matherr>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f47f af11 	bne.w	800a016 <pow+0xde>
 800a1f4:	e7b5      	b.n	800a162 <pow+0x22a>
 800a1f6:	bf00      	nop
 800a1f8:	0800b057 	.word	0x0800b057
 800a1fc:	3ff00000 	.word	0x3ff00000
 800a200:	fff00000 	.word	0xfff00000
 800a204:	3fe00000 	.word	0x3fe00000
 800a208:	47efffff 	.word	0x47efffff
 800a20c:	c7efffff 	.word	0xc7efffff
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	20000090 	.word	0x20000090

0800a218 <__ieee754_pow>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	b091      	sub	sp, #68	; 0x44
 800a21e:	ed8d 1b00 	vstr	d1, [sp]
 800a222:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a226:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a22a:	ea58 0302 	orrs.w	r3, r8, r2
 800a22e:	ec57 6b10 	vmov	r6, r7, d0
 800a232:	f000 84be 	beq.w	800abb2 <__ieee754_pow+0x99a>
 800a236:	4b7a      	ldr	r3, [pc, #488]	; (800a420 <__ieee754_pow+0x208>)
 800a238:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a23c:	429c      	cmp	r4, r3
 800a23e:	463d      	mov	r5, r7
 800a240:	ee10 aa10 	vmov	sl, s0
 800a244:	dc09      	bgt.n	800a25a <__ieee754_pow+0x42>
 800a246:	d103      	bne.n	800a250 <__ieee754_pow+0x38>
 800a248:	b93e      	cbnz	r6, 800a25a <__ieee754_pow+0x42>
 800a24a:	45a0      	cmp	r8, r4
 800a24c:	dc0d      	bgt.n	800a26a <__ieee754_pow+0x52>
 800a24e:	e001      	b.n	800a254 <__ieee754_pow+0x3c>
 800a250:	4598      	cmp	r8, r3
 800a252:	dc02      	bgt.n	800a25a <__ieee754_pow+0x42>
 800a254:	4598      	cmp	r8, r3
 800a256:	d10e      	bne.n	800a276 <__ieee754_pow+0x5e>
 800a258:	b16a      	cbz	r2, 800a276 <__ieee754_pow+0x5e>
 800a25a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a25e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a262:	ea54 030a 	orrs.w	r3, r4, sl
 800a266:	f000 84a4 	beq.w	800abb2 <__ieee754_pow+0x99a>
 800a26a:	486e      	ldr	r0, [pc, #440]	; (800a424 <__ieee754_pow+0x20c>)
 800a26c:	b011      	add	sp, #68	; 0x44
 800a26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a272:	f000 bda5 	b.w	800adc0 <nan>
 800a276:	2d00      	cmp	r5, #0
 800a278:	da53      	bge.n	800a322 <__ieee754_pow+0x10a>
 800a27a:	4b6b      	ldr	r3, [pc, #428]	; (800a428 <__ieee754_pow+0x210>)
 800a27c:	4598      	cmp	r8, r3
 800a27e:	dc4d      	bgt.n	800a31c <__ieee754_pow+0x104>
 800a280:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a284:	4598      	cmp	r8, r3
 800a286:	dd4c      	ble.n	800a322 <__ieee754_pow+0x10a>
 800a288:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a28c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a290:	2b14      	cmp	r3, #20
 800a292:	dd26      	ble.n	800a2e2 <__ieee754_pow+0xca>
 800a294:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a298:	fa22 f103 	lsr.w	r1, r2, r3
 800a29c:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d13e      	bne.n	800a322 <__ieee754_pow+0x10a>
 800a2a4:	f001 0101 	and.w	r1, r1, #1
 800a2a8:	f1c1 0b02 	rsb	fp, r1, #2
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d15b      	bne.n	800a368 <__ieee754_pow+0x150>
 800a2b0:	4b5b      	ldr	r3, [pc, #364]	; (800a420 <__ieee754_pow+0x208>)
 800a2b2:	4598      	cmp	r8, r3
 800a2b4:	d124      	bne.n	800a300 <__ieee754_pow+0xe8>
 800a2b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a2ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a2be:	ea53 030a 	orrs.w	r3, r3, sl
 800a2c2:	f000 8476 	beq.w	800abb2 <__ieee754_pow+0x99a>
 800a2c6:	4b59      	ldr	r3, [pc, #356]	; (800a42c <__ieee754_pow+0x214>)
 800a2c8:	429c      	cmp	r4, r3
 800a2ca:	dd2d      	ble.n	800a328 <__ieee754_pow+0x110>
 800a2cc:	f1b9 0f00 	cmp.w	r9, #0
 800a2d0:	f280 8473 	bge.w	800abba <__ieee754_pow+0x9a2>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	ec41 0b10 	vmov	d0, r0, r1
 800a2dc:	b011      	add	sp, #68	; 0x44
 800a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d13e      	bne.n	800a364 <__ieee754_pow+0x14c>
 800a2e6:	f1c3 0314 	rsb	r3, r3, #20
 800a2ea:	fa48 f103 	asr.w	r1, r8, r3
 800a2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f2:	4543      	cmp	r3, r8
 800a2f4:	f040 8469 	bne.w	800abca <__ieee754_pow+0x9b2>
 800a2f8:	f001 0101 	and.w	r1, r1, #1
 800a2fc:	f1c1 0b02 	rsb	fp, r1, #2
 800a300:	4b4b      	ldr	r3, [pc, #300]	; (800a430 <__ieee754_pow+0x218>)
 800a302:	4598      	cmp	r8, r3
 800a304:	d118      	bne.n	800a338 <__ieee754_pow+0x120>
 800a306:	f1b9 0f00 	cmp.w	r9, #0
 800a30a:	f280 845a 	bge.w	800abc2 <__ieee754_pow+0x9aa>
 800a30e:	4948      	ldr	r1, [pc, #288]	; (800a430 <__ieee754_pow+0x218>)
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	2000      	movs	r0, #0
 800a316:	f7f6 fa99 	bl	800084c <__aeabi_ddiv>
 800a31a:	e7dd      	b.n	800a2d8 <__ieee754_pow+0xc0>
 800a31c:	f04f 0b02 	mov.w	fp, #2
 800a320:	e7c4      	b.n	800a2ac <__ieee754_pow+0x94>
 800a322:	f04f 0b00 	mov.w	fp, #0
 800a326:	e7c1      	b.n	800a2ac <__ieee754_pow+0x94>
 800a328:	f1b9 0f00 	cmp.w	r9, #0
 800a32c:	dad2      	bge.n	800a2d4 <__ieee754_pow+0xbc>
 800a32e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a332:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a336:	e7cf      	b.n	800a2d8 <__ieee754_pow+0xc0>
 800a338:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a33c:	d106      	bne.n	800a34c <__ieee754_pow+0x134>
 800a33e:	4632      	mov	r2, r6
 800a340:	463b      	mov	r3, r7
 800a342:	4610      	mov	r0, r2
 800a344:	4619      	mov	r1, r3
 800a346:	f7f6 f957 	bl	80005f8 <__aeabi_dmul>
 800a34a:	e7c5      	b.n	800a2d8 <__ieee754_pow+0xc0>
 800a34c:	4b39      	ldr	r3, [pc, #228]	; (800a434 <__ieee754_pow+0x21c>)
 800a34e:	4599      	cmp	r9, r3
 800a350:	d10a      	bne.n	800a368 <__ieee754_pow+0x150>
 800a352:	2d00      	cmp	r5, #0
 800a354:	db08      	blt.n	800a368 <__ieee754_pow+0x150>
 800a356:	ec47 6b10 	vmov	d0, r6, r7
 800a35a:	b011      	add	sp, #68	; 0x44
 800a35c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	f000 bc68 	b.w	800ac34 <__ieee754_sqrt>
 800a364:	f04f 0b00 	mov.w	fp, #0
 800a368:	ec47 6b10 	vmov	d0, r6, r7
 800a36c:	f000 fd12 	bl	800ad94 <fabs>
 800a370:	ec51 0b10 	vmov	r0, r1, d0
 800a374:	f1ba 0f00 	cmp.w	sl, #0
 800a378:	d127      	bne.n	800a3ca <__ieee754_pow+0x1b2>
 800a37a:	b124      	cbz	r4, 800a386 <__ieee754_pow+0x16e>
 800a37c:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <__ieee754_pow+0x218>)
 800a37e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a382:	429a      	cmp	r2, r3
 800a384:	d121      	bne.n	800a3ca <__ieee754_pow+0x1b2>
 800a386:	f1b9 0f00 	cmp.w	r9, #0
 800a38a:	da05      	bge.n	800a398 <__ieee754_pow+0x180>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	2000      	movs	r0, #0
 800a392:	4927      	ldr	r1, [pc, #156]	; (800a430 <__ieee754_pow+0x218>)
 800a394:	f7f6 fa5a 	bl	800084c <__aeabi_ddiv>
 800a398:	2d00      	cmp	r5, #0
 800a39a:	da9d      	bge.n	800a2d8 <__ieee754_pow+0xc0>
 800a39c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a3a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a3a4:	ea54 030b 	orrs.w	r3, r4, fp
 800a3a8:	d108      	bne.n	800a3bc <__ieee754_pow+0x1a4>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	f7f5 ff69 	bl	8000288 <__aeabi_dsub>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	e7ac      	b.n	800a316 <__ieee754_pow+0xfe>
 800a3bc:	f1bb 0f01 	cmp.w	fp, #1
 800a3c0:	d18a      	bne.n	800a2d8 <__ieee754_pow+0xc0>
 800a3c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	e786      	b.n	800a2d8 <__ieee754_pow+0xc0>
 800a3ca:	0fed      	lsrs	r5, r5, #31
 800a3cc:	1e6b      	subs	r3, r5, #1
 800a3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a3d0:	ea5b 0303 	orrs.w	r3, fp, r3
 800a3d4:	d102      	bne.n	800a3dc <__ieee754_pow+0x1c4>
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	463b      	mov	r3, r7
 800a3da:	e7e8      	b.n	800a3ae <__ieee754_pow+0x196>
 800a3dc:	4b16      	ldr	r3, [pc, #88]	; (800a438 <__ieee754_pow+0x220>)
 800a3de:	4598      	cmp	r8, r3
 800a3e0:	f340 80fe 	ble.w	800a5e0 <__ieee754_pow+0x3c8>
 800a3e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a3e8:	4598      	cmp	r8, r3
 800a3ea:	dd0a      	ble.n	800a402 <__ieee754_pow+0x1ea>
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <__ieee754_pow+0x214>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	dc0d      	bgt.n	800a40e <__ieee754_pow+0x1f6>
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	f6bf af6d 	bge.w	800a2d4 <__ieee754_pow+0xbc>
 800a3fa:	a307      	add	r3, pc, #28	; (adr r3, 800a418 <__ieee754_pow+0x200>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	e79f      	b.n	800a342 <__ieee754_pow+0x12a>
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <__ieee754_pow+0x224>)
 800a404:	429c      	cmp	r4, r3
 800a406:	ddf4      	ble.n	800a3f2 <__ieee754_pow+0x1da>
 800a408:	4b09      	ldr	r3, [pc, #36]	; (800a430 <__ieee754_pow+0x218>)
 800a40a:	429c      	cmp	r4, r3
 800a40c:	dd18      	ble.n	800a440 <__ieee754_pow+0x228>
 800a40e:	f1b9 0f00 	cmp.w	r9, #0
 800a412:	dcf2      	bgt.n	800a3fa <__ieee754_pow+0x1e2>
 800a414:	e75e      	b.n	800a2d4 <__ieee754_pow+0xbc>
 800a416:	bf00      	nop
 800a418:	8800759c 	.word	0x8800759c
 800a41c:	7e37e43c 	.word	0x7e37e43c
 800a420:	7ff00000 	.word	0x7ff00000
 800a424:	0800b029 	.word	0x0800b029
 800a428:	433fffff 	.word	0x433fffff
 800a42c:	3fefffff 	.word	0x3fefffff
 800a430:	3ff00000 	.word	0x3ff00000
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	41e00000 	.word	0x41e00000
 800a43c:	3feffffe 	.word	0x3feffffe
 800a440:	2200      	movs	r2, #0
 800a442:	4b63      	ldr	r3, [pc, #396]	; (800a5d0 <__ieee754_pow+0x3b8>)
 800a444:	f7f5 ff20 	bl	8000288 <__aeabi_dsub>
 800a448:	a355      	add	r3, pc, #340	; (adr r3, 800a5a0 <__ieee754_pow+0x388>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	4604      	mov	r4, r0
 800a450:	460d      	mov	r5, r1
 800a452:	f7f6 f8d1 	bl	80005f8 <__aeabi_dmul>
 800a456:	a354      	add	r3, pc, #336	; (adr r3, 800a5a8 <__ieee754_pow+0x390>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	2200      	movs	r2, #0
 800a46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46e:	4b59      	ldr	r3, [pc, #356]	; (800a5d4 <__ieee754_pow+0x3bc>)
 800a470:	4620      	mov	r0, r4
 800a472:	4629      	mov	r1, r5
 800a474:	f7f6 f8c0 	bl	80005f8 <__aeabi_dmul>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	a14c      	add	r1, pc, #304	; (adr r1, 800a5b0 <__ieee754_pow+0x398>)
 800a47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a482:	f7f5 ff01 	bl	8000288 <__aeabi_dsub>
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	f7f6 f8b5 	bl	80005f8 <__aeabi_dmul>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	2000      	movs	r0, #0
 800a494:	4950      	ldr	r1, [pc, #320]	; (800a5d8 <__ieee754_pow+0x3c0>)
 800a496:	f7f5 fef7 	bl	8000288 <__aeabi_dsub>
 800a49a:	4622      	mov	r2, r4
 800a49c:	462b      	mov	r3, r5
 800a49e:	4680      	mov	r8, r0
 800a4a0:	4689      	mov	r9, r1
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	f7f6 f8a7 	bl	80005f8 <__aeabi_dmul>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f7f6 f8a1 	bl	80005f8 <__aeabi_dmul>
 800a4b6:	a340      	add	r3, pc, #256	; (adr r3, 800a5b8 <__ieee754_pow+0x3a0>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f6 f89c 	bl	80005f8 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c8:	f7f5 fede 	bl	8000288 <__aeabi_dsub>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f7f5 fed8 	bl	800028c <__adddf3>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f7f5 fecf 	bl	8000288 <__aeabi_dsub>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fec9 	bl	8000288 <__aeabi_dsub>
 800a4f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4f8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	f040 81eb 	bne.w	800a8dc <__ieee754_pow+0x6c4>
 800a506:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a5c0 <__ieee754_pow+0x3a8>
 800a50a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a50e:	2400      	movs	r4, #0
 800a510:	4622      	mov	r2, r4
 800a512:	462b      	mov	r3, r5
 800a514:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a51c:	f7f5 feb4 	bl	8000288 <__aeabi_dsub>
 800a520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a52c:	4680      	mov	r8, r0
 800a52e:	4689      	mov	r9, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f6 f860 	bl	80005f8 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4640      	mov	r0, r8
 800a53e:	4649      	mov	r1, r9
 800a540:	f7f5 fea4 	bl	800028c <__adddf3>
 800a544:	4622      	mov	r2, r4
 800a546:	462b      	mov	r3, r5
 800a548:	4680      	mov	r8, r0
 800a54a:	4689      	mov	r9, r1
 800a54c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	460b      	mov	r3, r1
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	4602      	mov	r2, r0
 800a55c:	4649      	mov	r1, r9
 800a55e:	4640      	mov	r0, r8
 800a560:	e9cd 4500 	strd	r4, r5, [sp]
 800a564:	f7f5 fe92 	bl	800028c <__adddf3>
 800a568:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <__ieee754_pow+0x3c4>)
 800a56a:	4299      	cmp	r1, r3
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	468b      	mov	fp, r1
 800a572:	f340 82f7 	ble.w	800ab64 <__ieee754_pow+0x94c>
 800a576:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a57a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a57e:	4303      	orrs	r3, r0
 800a580:	f000 81ea 	beq.w	800a958 <__ieee754_pow+0x740>
 800a584:	a310      	add	r3, pc, #64	; (adr r3, 800a5c8 <__ieee754_pow+0x3b0>)
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58e:	f7f6 f833 	bl	80005f8 <__aeabi_dmul>
 800a592:	a30d      	add	r3, pc, #52	; (adr r3, 800a5c8 <__ieee754_pow+0x3b0>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	e6d5      	b.n	800a346 <__ieee754_pow+0x12e>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	60000000 	.word	0x60000000
 800a5a4:	3ff71547 	.word	0x3ff71547
 800a5a8:	f85ddf44 	.word	0xf85ddf44
 800a5ac:	3e54ae0b 	.word	0x3e54ae0b
 800a5b0:	55555555 	.word	0x55555555
 800a5b4:	3fd55555 	.word	0x3fd55555
 800a5b8:	652b82fe 	.word	0x652b82fe
 800a5bc:	3ff71547 	.word	0x3ff71547
 800a5c0:	00000000 	.word	0x00000000
 800a5c4:	bff00000 	.word	0xbff00000
 800a5c8:	8800759c 	.word	0x8800759c
 800a5cc:	7e37e43c 	.word	0x7e37e43c
 800a5d0:	3ff00000 	.word	0x3ff00000
 800a5d4:	3fd00000 	.word	0x3fd00000
 800a5d8:	3fe00000 	.word	0x3fe00000
 800a5dc:	408fffff 	.word	0x408fffff
 800a5e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	da05      	bge.n	800a5f6 <__ieee754_pow+0x3de>
 800a5ea:	4bd3      	ldr	r3, [pc, #844]	; (800a938 <__ieee754_pow+0x720>)
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	1523      	asrs	r3, r4, #20
 800a5f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a5fc:	4413      	add	r3, r2
 800a5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a600:	4bce      	ldr	r3, [pc, #824]	; (800a93c <__ieee754_pow+0x724>)
 800a602:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a606:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a60a:	429c      	cmp	r4, r3
 800a60c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a610:	dd08      	ble.n	800a624 <__ieee754_pow+0x40c>
 800a612:	4bcb      	ldr	r3, [pc, #812]	; (800a940 <__ieee754_pow+0x728>)
 800a614:	429c      	cmp	r4, r3
 800a616:	f340 815e 	ble.w	800a8d6 <__ieee754_pow+0x6be>
 800a61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61c:	3301      	adds	r3, #1
 800a61e:	9309      	str	r3, [sp, #36]	; 0x24
 800a620:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a624:	f04f 0a00 	mov.w	sl, #0
 800a628:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a62c:	930c      	str	r3, [sp, #48]	; 0x30
 800a62e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a630:	4bc4      	ldr	r3, [pc, #784]	; (800a944 <__ieee754_pow+0x72c>)
 800a632:	4413      	add	r3, r2
 800a634:	ed93 7b00 	vldr	d7, [r3]
 800a638:	4629      	mov	r1, r5
 800a63a:	ec53 2b17 	vmov	r2, r3, d7
 800a63e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a642:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a646:	f7f5 fe1f 	bl	8000288 <__aeabi_dsub>
 800a64a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a64e:	4606      	mov	r6, r0
 800a650:	460f      	mov	r7, r1
 800a652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a656:	f7f5 fe19 	bl	800028c <__adddf3>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	2000      	movs	r0, #0
 800a660:	49b9      	ldr	r1, [pc, #740]	; (800a948 <__ieee754_pow+0x730>)
 800a662:	f7f6 f8f3 	bl	800084c <__aeabi_ddiv>
 800a666:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4630      	mov	r0, r6
 800a670:	4639      	mov	r1, r7
 800a672:	f7f5 ffc1 	bl	80005f8 <__aeabi_dmul>
 800a676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a67a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a67e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a682:	2300      	movs	r3, #0
 800a684:	9302      	str	r3, [sp, #8]
 800a686:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a68a:	106d      	asrs	r5, r5, #1
 800a68c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a690:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a694:	2200      	movs	r2, #0
 800a696:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	4614      	mov	r4, r2
 800a6a0:	461d      	mov	r5, r3
 800a6a2:	f7f5 ffa9 	bl	80005f8 <__aeabi_dmul>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	f7f5 fdeb 	bl	8000288 <__aeabi_dsub>
 800a6b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	4629      	mov	r1, r5
 800a6be:	f7f5 fde3 	bl	8000288 <__aeabi_dsub>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6ca:	f7f5 fddd 	bl	8000288 <__aeabi_dsub>
 800a6ce:	4642      	mov	r2, r8
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4630      	mov	r0, r6
 800a6dc:	4639      	mov	r1, r7
 800a6de:	f7f5 fdd3 	bl	8000288 <__aeabi_dsub>
 800a6e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a6e6:	f7f5 ff87 	bl	80005f8 <__aeabi_dmul>
 800a6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f7f5 ff7f 	bl	80005f8 <__aeabi_dmul>
 800a6fa:	a37b      	add	r3, pc, #492	; (adr r3, 800a8e8 <__ieee754_pow+0x6d0>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	a379      	add	r3, pc, #484	; (adr r3, 800a8f0 <__ieee754_pow+0x6d8>)
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	f7f5 fdbd 	bl	800028c <__adddf3>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 ff6f 	bl	80005f8 <__aeabi_dmul>
 800a71a:	a377      	add	r3, pc, #476	; (adr r3, 800a8f8 <__ieee754_pow+0x6e0>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 fdb4 	bl	800028c <__adddf3>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 ff66 	bl	80005f8 <__aeabi_dmul>
 800a72c:	a374      	add	r3, pc, #464	; (adr r3, 800a900 <__ieee754_pow+0x6e8>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f5 fdab 	bl	800028c <__adddf3>
 800a736:	4622      	mov	r2, r4
 800a738:	462b      	mov	r3, r5
 800a73a:	f7f5 ff5d 	bl	80005f8 <__aeabi_dmul>
 800a73e:	a372      	add	r3, pc, #456	; (adr r3, 800a908 <__ieee754_pow+0x6f0>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f7f5 fda2 	bl	800028c <__adddf3>
 800a748:	4622      	mov	r2, r4
 800a74a:	462b      	mov	r3, r5
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	a36f      	add	r3, pc, #444	; (adr r3, 800a910 <__ieee754_pow+0x6f8>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 fd99 	bl	800028c <__adddf3>
 800a75a:	4622      	mov	r2, r4
 800a75c:	4606      	mov	r6, r0
 800a75e:	460f      	mov	r7, r1
 800a760:	462b      	mov	r3, r5
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 ff47 	bl	80005f8 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 ff41 	bl	80005f8 <__aeabi_dmul>
 800a776:	4642      	mov	r2, r8
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	464b      	mov	r3, r9
 800a77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a782:	f7f5 fd83 	bl	800028c <__adddf3>
 800a786:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a78a:	f7f5 ff35 	bl	80005f8 <__aeabi_dmul>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 fd7b 	bl	800028c <__adddf3>
 800a796:	4642      	mov	r2, r8
 800a798:	4606      	mov	r6, r0
 800a79a:	460f      	mov	r7, r1
 800a79c:	464b      	mov	r3, r9
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f5 ff29 	bl	80005f8 <__aeabi_dmul>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4b68      	ldr	r3, [pc, #416]	; (800a94c <__ieee754_pow+0x734>)
 800a7aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a7ae:	f7f5 fd6d 	bl	800028c <__adddf3>
 800a7b2:	4632      	mov	r2, r6
 800a7b4:	463b      	mov	r3, r7
 800a7b6:	f7f5 fd69 	bl	800028c <__adddf3>
 800a7ba:	9802      	ldr	r0, [sp, #8]
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	f7f5 ff16 	bl	80005f8 <__aeabi_dmul>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4689      	mov	r9, r1
 800a7d2:	4b5e      	ldr	r3, [pc, #376]	; (800a94c <__ieee754_pow+0x734>)
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 fd56 	bl	8000288 <__aeabi_dsub>
 800a7dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7e0:	f7f5 fd52 	bl	8000288 <__aeabi_dsub>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fd4c 	bl	8000288 <__aeabi_dsub>
 800a7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7f4:	f7f5 ff00 	bl	80005f8 <__aeabi_dmul>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	462b      	mov	r3, r5
 800a800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a804:	f7f5 fef8 	bl	80005f8 <__aeabi_dmul>
 800a808:	4602      	mov	r2, r0
 800a80a:	460b      	mov	r3, r1
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f5 fd3c 	bl	800028c <__adddf3>
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4640      	mov	r0, r8
 800a81e:	4649      	mov	r1, r9
 800a820:	f7f5 fd34 	bl	800028c <__adddf3>
 800a824:	9802      	ldr	r0, [sp, #8]
 800a826:	a33c      	add	r3, pc, #240	; (adr r3, 800a918 <__ieee754_pow+0x700>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	4604      	mov	r4, r0
 800a82e:	460d      	mov	r5, r1
 800a830:	f7f5 fee2 	bl	80005f8 <__aeabi_dmul>
 800a834:	4642      	mov	r2, r8
 800a836:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a83a:	464b      	mov	r3, r9
 800a83c:	4620      	mov	r0, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	f7f5 fd22 	bl	8000288 <__aeabi_dsub>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd1c 	bl	8000288 <__aeabi_dsub>
 800a850:	a333      	add	r3, pc, #204	; (adr r3, 800a920 <__ieee754_pow+0x708>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	a333      	add	r3, pc, #204	; (adr r3, 800a928 <__ieee754_pow+0x710>)
 800a85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a860:	4606      	mov	r6, r0
 800a862:	460f      	mov	r7, r1
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f5 fec6 	bl	80005f8 <__aeabi_dmul>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4639      	mov	r1, r7
 800a874:	f7f5 fd0a 	bl	800028c <__adddf3>
 800a878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87a:	4b35      	ldr	r3, [pc, #212]	; (800a950 <__ieee754_pow+0x738>)
 800a87c:	4413      	add	r3, r2
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f5 fd03 	bl	800028c <__adddf3>
 800a886:	4604      	mov	r4, r0
 800a888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a88a:	460d      	mov	r5, r1
 800a88c:	f7f5 fe4a 	bl	8000524 <__aeabi_i2d>
 800a890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a892:	4b30      	ldr	r3, [pc, #192]	; (800a954 <__ieee754_pow+0x73c>)
 800a894:	4413      	add	r3, r2
 800a896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	4622      	mov	r2, r4
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8a6:	f7f5 fcf1 	bl	800028c <__adddf3>
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	464b      	mov	r3, r9
 800a8ae:	f7f5 fced 	bl	800028c <__adddf3>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f5 fce9 	bl	800028c <__adddf3>
 800a8ba:	9802      	ldr	r0, [sp, #8]
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8c4:	f7f5 fce0 	bl	8000288 <__aeabi_dsub>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f7f5 fcdc 	bl	8000288 <__aeabi_dsub>
 800a8d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8d4:	e607      	b.n	800a4e6 <__ieee754_pow+0x2ce>
 800a8d6:	f04f 0a01 	mov.w	sl, #1
 800a8da:	e6a5      	b.n	800a628 <__ieee754_pow+0x410>
 800a8dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a930 <__ieee754_pow+0x718>
 800a8e0:	e613      	b.n	800a50a <__ieee754_pow+0x2f2>
 800a8e2:	bf00      	nop
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	4a454eef 	.word	0x4a454eef
 800a8ec:	3fca7e28 	.word	0x3fca7e28
 800a8f0:	93c9db65 	.word	0x93c9db65
 800a8f4:	3fcd864a 	.word	0x3fcd864a
 800a8f8:	a91d4101 	.word	0xa91d4101
 800a8fc:	3fd17460 	.word	0x3fd17460
 800a900:	518f264d 	.word	0x518f264d
 800a904:	3fd55555 	.word	0x3fd55555
 800a908:	db6fabff 	.word	0xdb6fabff
 800a90c:	3fdb6db6 	.word	0x3fdb6db6
 800a910:	33333303 	.word	0x33333303
 800a914:	3fe33333 	.word	0x3fe33333
 800a918:	e0000000 	.word	0xe0000000
 800a91c:	3feec709 	.word	0x3feec709
 800a920:	dc3a03fd 	.word	0xdc3a03fd
 800a924:	3feec709 	.word	0x3feec709
 800a928:	145b01f5 	.word	0x145b01f5
 800a92c:	be3e2fe0 	.word	0xbe3e2fe0
 800a930:	00000000 	.word	0x00000000
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	43400000 	.word	0x43400000
 800a93c:	0003988e 	.word	0x0003988e
 800a940:	000bb679 	.word	0x000bb679
 800a944:	0800b060 	.word	0x0800b060
 800a948:	3ff00000 	.word	0x3ff00000
 800a94c:	40080000 	.word	0x40080000
 800a950:	0800b080 	.word	0x0800b080
 800a954:	0800b070 	.word	0x0800b070
 800a958:	a3b4      	add	r3, pc, #720	; (adr r3, 800ac2c <__ieee754_pow+0xa14>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fc93 	bl	800028c <__adddf3>
 800a966:	4622      	mov	r2, r4
 800a968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a96c:	462b      	mov	r3, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fc89 	bl	8000288 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a97e:	f7f6 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a982:	2800      	cmp	r0, #0
 800a984:	f47f adfe 	bne.w	800a584 <__ieee754_pow+0x36c>
 800a988:	4aa3      	ldr	r2, [pc, #652]	; (800ac18 <__ieee754_pow+0xa00>)
 800a98a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a98e:	4293      	cmp	r3, r2
 800a990:	f340 810a 	ble.w	800aba8 <__ieee754_pow+0x990>
 800a994:	151b      	asrs	r3, r3, #20
 800a996:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a99a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a99e:	fa4a f303 	asr.w	r3, sl, r3
 800a9a2:	445b      	add	r3, fp
 800a9a4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a9a8:	4e9c      	ldr	r6, [pc, #624]	; (800ac1c <__ieee754_pow+0xa04>)
 800a9aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9ae:	4116      	asrs	r6, r2
 800a9b0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	ea23 0106 	bic.w	r1, r3, r6
 800a9ba:	f1c2 0214 	rsb	r2, r2, #20
 800a9be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9c2:	fa4a fa02 	asr.w	sl, sl, r2
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	bfb8      	it	lt
 800a9d4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a9d8:	f7f5 fc56 	bl	8000288 <__aeabi_dsub>
 800a9dc:	e9cd 0100 	strd	r0, r1, [sp]
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9e8:	f7f5 fc50 	bl	800028c <__adddf3>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	a378      	add	r3, pc, #480	; (adr r3, 800abd0 <__ieee754_pow+0x9b8>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	f7f5 fdfe 	bl	80005f8 <__aeabi_dmul>
 800a9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	4620      	mov	r0, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	f7f5 fc3e 	bl	8000288 <__aeabi_dsub>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f5 fc38 	bl	8000288 <__aeabi_dsub>
 800aa18:	a36f      	add	r3, pc, #444	; (adr r3, 800abd8 <__ieee754_pow+0x9c0>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fdeb 	bl	80005f8 <__aeabi_dmul>
 800aa22:	a36f      	add	r3, pc, #444	; (adr r3, 800abe0 <__ieee754_pow+0x9c8>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	4680      	mov	r8, r0
 800aa2a:	4689      	mov	r9, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fde2 	bl	80005f8 <__aeabi_dmul>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fc26 	bl	800028c <__adddf3>
 800aa40:	4604      	mov	r4, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fc1e 	bl	800028c <__adddf3>
 800aa50:	4632      	mov	r2, r6
 800aa52:	463b      	mov	r3, r7
 800aa54:	4680      	mov	r8, r0
 800aa56:	4689      	mov	r9, r1
 800aa58:	f7f5 fc16 	bl	8000288 <__aeabi_dsub>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	460b      	mov	r3, r1
 800aa60:	4620      	mov	r0, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	f7f5 fc10 	bl	8000288 <__aeabi_dsub>
 800aa68:	4642      	mov	r2, r8
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	464b      	mov	r3, r9
 800aa70:	4640      	mov	r0, r8
 800aa72:	4649      	mov	r1, r9
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	a35b      	add	r3, pc, #364	; (adr r3, 800abe8 <__ieee754_pow+0x9d0>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	4604      	mov	r4, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	f7f5 fdb9 	bl	80005f8 <__aeabi_dmul>
 800aa86:	a35a      	add	r3, pc, #360	; (adr r3, 800abf0 <__ieee754_pow+0x9d8>)
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f7f5 fbfc 	bl	8000288 <__aeabi_dsub>
 800aa90:	4622      	mov	r2, r4
 800aa92:	462b      	mov	r3, r5
 800aa94:	f7f5 fdb0 	bl	80005f8 <__aeabi_dmul>
 800aa98:	a357      	add	r3, pc, #348	; (adr r3, 800abf8 <__ieee754_pow+0x9e0>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fbf5 	bl	800028c <__adddf3>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	a355      	add	r3, pc, #340	; (adr r3, 800ac00 <__ieee754_pow+0x9e8>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fbea 	bl	8000288 <__aeabi_dsub>
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	a352      	add	r3, pc, #328	; (adr r3, 800ac08 <__ieee754_pow+0x9f0>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fbe3 	bl	800028c <__adddf3>
 800aac6:	4622      	mov	r2, r4
 800aac8:	462b      	mov	r3, r5
 800aaca:	f7f5 fd95 	bl	80005f8 <__aeabi_dmul>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	f7f5 fbd7 	bl	8000288 <__aeabi_dsub>
 800aada:	4604      	mov	r4, r0
 800aadc:	460d      	mov	r5, r1
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4640      	mov	r0, r8
 800aae4:	4649      	mov	r1, r9
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	2200      	movs	r2, #0
 800aaec:	e9cd 0100 	strd	r0, r1, [sp]
 800aaf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7f5 fbc6 	bl	8000288 <__aeabi_dsub>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab04:	f7f5 fea2 	bl	800084c <__aeabi_ddiv>
 800ab08:	4632      	mov	r2, r6
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	463b      	mov	r3, r7
 800ab10:	4640      	mov	r0, r8
 800ab12:	4649      	mov	r1, r9
 800ab14:	f7f5 fd70 	bl	80005f8 <__aeabi_dmul>
 800ab18:	4632      	mov	r2, r6
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	f7f5 fbb6 	bl	800028c <__adddf3>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fbae 	bl	8000288 <__aeabi_dsub>
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	464b      	mov	r3, r9
 800ab30:	f7f5 fbaa 	bl	8000288 <__aeabi_dsub>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4939      	ldr	r1, [pc, #228]	; (800ac20 <__ieee754_pow+0xa08>)
 800ab3c:	f7f5 fba4 	bl	8000288 <__aeabi_dsub>
 800ab40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ab44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	da2f      	bge.n	800abae <__ieee754_pow+0x996>
 800ab4e:	4650      	mov	r0, sl
 800ab50:	ec43 2b10 	vmov	d0, r2, r3
 800ab54:	f000 f9c0 	bl	800aed8 <scalbn>
 800ab58:	ec51 0b10 	vmov	r0, r1, d0
 800ab5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab60:	f7ff bbf1 	b.w	800a346 <__ieee754_pow+0x12e>
 800ab64:	4b2f      	ldr	r3, [pc, #188]	; (800ac24 <__ieee754_pow+0xa0c>)
 800ab66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab6a:	429e      	cmp	r6, r3
 800ab6c:	f77f af0c 	ble.w	800a988 <__ieee754_pow+0x770>
 800ab70:	4b2d      	ldr	r3, [pc, #180]	; (800ac28 <__ieee754_pow+0xa10>)
 800ab72:	440b      	add	r3, r1
 800ab74:	4303      	orrs	r3, r0
 800ab76:	d00b      	beq.n	800ab90 <__ieee754_pow+0x978>
 800ab78:	a325      	add	r3, pc, #148	; (adr r3, 800ac10 <__ieee754_pow+0x9f8>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab82:	f7f5 fd39 	bl	80005f8 <__aeabi_dmul>
 800ab86:	a322      	add	r3, pc, #136	; (adr r3, 800ac10 <__ieee754_pow+0x9f8>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7ff bbdb 	b.w	800a346 <__ieee754_pow+0x12e>
 800ab90:	4622      	mov	r2, r4
 800ab92:	462b      	mov	r3, r5
 800ab94:	f7f5 fb78 	bl	8000288 <__aeabi_dsub>
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	f7f5 ffb2 	bl	8000b04 <__aeabi_dcmpge>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f43f aef1 	beq.w	800a988 <__ieee754_pow+0x770>
 800aba6:	e7e7      	b.n	800ab78 <__ieee754_pow+0x960>
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	e718      	b.n	800a9e0 <__ieee754_pow+0x7c8>
 800abae:	4621      	mov	r1, r4
 800abb0:	e7d4      	b.n	800ab5c <__ieee754_pow+0x944>
 800abb2:	2000      	movs	r0, #0
 800abb4:	491a      	ldr	r1, [pc, #104]	; (800ac20 <__ieee754_pow+0xa08>)
 800abb6:	f7ff bb8f 	b.w	800a2d8 <__ieee754_pow+0xc0>
 800abba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abbe:	f7ff bb8b 	b.w	800a2d8 <__ieee754_pow+0xc0>
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7ff bb87 	b.w	800a2d8 <__ieee754_pow+0xc0>
 800abca:	4693      	mov	fp, r2
 800abcc:	f7ff bb98 	b.w	800a300 <__ieee754_pow+0xe8>
 800abd0:	00000000 	.word	0x00000000
 800abd4:	3fe62e43 	.word	0x3fe62e43
 800abd8:	fefa39ef 	.word	0xfefa39ef
 800abdc:	3fe62e42 	.word	0x3fe62e42
 800abe0:	0ca86c39 	.word	0x0ca86c39
 800abe4:	be205c61 	.word	0xbe205c61
 800abe8:	72bea4d0 	.word	0x72bea4d0
 800abec:	3e663769 	.word	0x3e663769
 800abf0:	c5d26bf1 	.word	0xc5d26bf1
 800abf4:	3ebbbd41 	.word	0x3ebbbd41
 800abf8:	af25de2c 	.word	0xaf25de2c
 800abfc:	3f11566a 	.word	0x3f11566a
 800ac00:	16bebd93 	.word	0x16bebd93
 800ac04:	3f66c16c 	.word	0x3f66c16c
 800ac08:	5555553e 	.word	0x5555553e
 800ac0c:	3fc55555 	.word	0x3fc55555
 800ac10:	c2f8f359 	.word	0xc2f8f359
 800ac14:	01a56e1f 	.word	0x01a56e1f
 800ac18:	3fe00000 	.word	0x3fe00000
 800ac1c:	000fffff 	.word	0x000fffff
 800ac20:	3ff00000 	.word	0x3ff00000
 800ac24:	4090cbff 	.word	0x4090cbff
 800ac28:	3f6f3400 	.word	0x3f6f3400
 800ac2c:	652b82fe 	.word	0x652b82fe
 800ac30:	3c971547 	.word	0x3c971547

0800ac34 <__ieee754_sqrt>:
 800ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac38:	4955      	ldr	r1, [pc, #340]	; (800ad90 <__ieee754_sqrt+0x15c>)
 800ac3a:	ec55 4b10 	vmov	r4, r5, d0
 800ac3e:	43a9      	bics	r1, r5
 800ac40:	462b      	mov	r3, r5
 800ac42:	462a      	mov	r2, r5
 800ac44:	d112      	bne.n	800ac6c <__ieee754_sqrt+0x38>
 800ac46:	ee10 2a10 	vmov	r2, s0
 800ac4a:	ee10 0a10 	vmov	r0, s0
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4620      	mov	r0, r4
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	f7f5 fb16 	bl	800028c <__adddf3>
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	ec45 4b10 	vmov	d0, r4, r5
 800ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6c:	2d00      	cmp	r5, #0
 800ac6e:	ee10 0a10 	vmov	r0, s0
 800ac72:	4621      	mov	r1, r4
 800ac74:	dc0f      	bgt.n	800ac96 <__ieee754_sqrt+0x62>
 800ac76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac7a:	4330      	orrs	r0, r6
 800ac7c:	d0f2      	beq.n	800ac64 <__ieee754_sqrt+0x30>
 800ac7e:	b155      	cbz	r5, 800ac96 <__ieee754_sqrt+0x62>
 800ac80:	ee10 2a10 	vmov	r2, s0
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fafe 	bl	8000288 <__aeabi_dsub>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	f7f5 fddc 	bl	800084c <__aeabi_ddiv>
 800ac94:	e7e4      	b.n	800ac60 <__ieee754_sqrt+0x2c>
 800ac96:	151b      	asrs	r3, r3, #20
 800ac98:	d073      	beq.n	800ad82 <__ieee754_sqrt+0x14e>
 800ac9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac9e:	07dd      	lsls	r5, r3, #31
 800aca0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aca4:	bf48      	it	mi
 800aca6:	0fc8      	lsrmi	r0, r1, #31
 800aca8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800acac:	bf44      	itt	mi
 800acae:	0049      	lslmi	r1, r1, #1
 800acb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800acb4:	2500      	movs	r5, #0
 800acb6:	1058      	asrs	r0, r3, #1
 800acb8:	0fcb      	lsrs	r3, r1, #31
 800acba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800acbe:	0049      	lsls	r1, r1, #1
 800acc0:	2316      	movs	r3, #22
 800acc2:	462c      	mov	r4, r5
 800acc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800acc8:	19a7      	adds	r7, r4, r6
 800acca:	4297      	cmp	r7, r2
 800accc:	bfde      	ittt	le
 800acce:	19bc      	addle	r4, r7, r6
 800acd0:	1bd2      	suble	r2, r2, r7
 800acd2:	19ad      	addle	r5, r5, r6
 800acd4:	0fcf      	lsrs	r7, r1, #31
 800acd6:	3b01      	subs	r3, #1
 800acd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800acdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ace0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ace4:	d1f0      	bne.n	800acc8 <__ieee754_sqrt+0x94>
 800ace6:	f04f 0c20 	mov.w	ip, #32
 800acea:	469e      	mov	lr, r3
 800acec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800acf0:	42a2      	cmp	r2, r4
 800acf2:	eb06 070e 	add.w	r7, r6, lr
 800acf6:	dc02      	bgt.n	800acfe <__ieee754_sqrt+0xca>
 800acf8:	d112      	bne.n	800ad20 <__ieee754_sqrt+0xec>
 800acfa:	428f      	cmp	r7, r1
 800acfc:	d810      	bhi.n	800ad20 <__ieee754_sqrt+0xec>
 800acfe:	2f00      	cmp	r7, #0
 800ad00:	eb07 0e06 	add.w	lr, r7, r6
 800ad04:	da42      	bge.n	800ad8c <__ieee754_sqrt+0x158>
 800ad06:	f1be 0f00 	cmp.w	lr, #0
 800ad0a:	db3f      	blt.n	800ad8c <__ieee754_sqrt+0x158>
 800ad0c:	f104 0801 	add.w	r8, r4, #1
 800ad10:	1b12      	subs	r2, r2, r4
 800ad12:	428f      	cmp	r7, r1
 800ad14:	bf88      	it	hi
 800ad16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ad1a:	1bc9      	subs	r1, r1, r7
 800ad1c:	4433      	add	r3, r6
 800ad1e:	4644      	mov	r4, r8
 800ad20:	0052      	lsls	r2, r2, #1
 800ad22:	f1bc 0c01 	subs.w	ip, ip, #1
 800ad26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ad2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ad2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad32:	d1dd      	bne.n	800acf0 <__ieee754_sqrt+0xbc>
 800ad34:	430a      	orrs	r2, r1
 800ad36:	d006      	beq.n	800ad46 <__ieee754_sqrt+0x112>
 800ad38:	1c5c      	adds	r4, r3, #1
 800ad3a:	bf13      	iteet	ne
 800ad3c:	3301      	addne	r3, #1
 800ad3e:	3501      	addeq	r5, #1
 800ad40:	4663      	moveq	r3, ip
 800ad42:	f023 0301 	bicne.w	r3, r3, #1
 800ad46:	106a      	asrs	r2, r5, #1
 800ad48:	085b      	lsrs	r3, r3, #1
 800ad4a:	07e9      	lsls	r1, r5, #31
 800ad4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ad50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ad54:	bf48      	it	mi
 800ad56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ad5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ad5e:	461c      	mov	r4, r3
 800ad60:	e780      	b.n	800ac64 <__ieee754_sqrt+0x30>
 800ad62:	0aca      	lsrs	r2, r1, #11
 800ad64:	3815      	subs	r0, #21
 800ad66:	0549      	lsls	r1, r1, #21
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d0fa      	beq.n	800ad62 <__ieee754_sqrt+0x12e>
 800ad6c:	02d6      	lsls	r6, r2, #11
 800ad6e:	d50a      	bpl.n	800ad86 <__ieee754_sqrt+0x152>
 800ad70:	f1c3 0420 	rsb	r4, r3, #32
 800ad74:	fa21 f404 	lsr.w	r4, r1, r4
 800ad78:	1e5d      	subs	r5, r3, #1
 800ad7a:	4099      	lsls	r1, r3
 800ad7c:	4322      	orrs	r2, r4
 800ad7e:	1b43      	subs	r3, r0, r5
 800ad80:	e78b      	b.n	800ac9a <__ieee754_sqrt+0x66>
 800ad82:	4618      	mov	r0, r3
 800ad84:	e7f0      	b.n	800ad68 <__ieee754_sqrt+0x134>
 800ad86:	0052      	lsls	r2, r2, #1
 800ad88:	3301      	adds	r3, #1
 800ad8a:	e7ef      	b.n	800ad6c <__ieee754_sqrt+0x138>
 800ad8c:	46a0      	mov	r8, r4
 800ad8e:	e7bf      	b.n	800ad10 <__ieee754_sqrt+0xdc>
 800ad90:	7ff00000 	.word	0x7ff00000

0800ad94 <fabs>:
 800ad94:	ec51 0b10 	vmov	r0, r1, d0
 800ad98:	ee10 2a10 	vmov	r2, s0
 800ad9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ada0:	ec43 2b10 	vmov	d0, r2, r3
 800ada4:	4770      	bx	lr

0800ada6 <finite>:
 800ada6:	ee10 3a90 	vmov	r3, s1
 800adaa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800adae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800adb2:	0fc0      	lsrs	r0, r0, #31
 800adb4:	4770      	bx	lr

0800adb6 <matherr>:
 800adb6:	2000      	movs	r0, #0
 800adb8:	4770      	bx	lr
 800adba:	0000      	movs	r0, r0
 800adbc:	0000      	movs	r0, r0
	...

0800adc0 <nan>:
 800adc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800adc8 <nan+0x8>
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	00000000 	.word	0x00000000
 800adcc:	7ff80000 	.word	0x7ff80000

0800add0 <rint>:
 800add0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add2:	ec51 0b10 	vmov	r0, r1, d0
 800add6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800adde:	2e13      	cmp	r6, #19
 800ade0:	460b      	mov	r3, r1
 800ade2:	ee10 4a10 	vmov	r4, s0
 800ade6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800adea:	dc56      	bgt.n	800ae9a <rint+0xca>
 800adec:	2e00      	cmp	r6, #0
 800adee:	da2b      	bge.n	800ae48 <rint+0x78>
 800adf0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800adf4:	4302      	orrs	r2, r0
 800adf6:	d023      	beq.n	800ae40 <rint+0x70>
 800adf8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800adfc:	4302      	orrs	r2, r0
 800adfe:	4254      	negs	r4, r2
 800ae00:	4314      	orrs	r4, r2
 800ae02:	0c4b      	lsrs	r3, r1, #17
 800ae04:	0b24      	lsrs	r4, r4, #12
 800ae06:	045b      	lsls	r3, r3, #17
 800ae08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ae0c:	ea44 0103 	orr.w	r1, r4, r3
 800ae10:	460b      	mov	r3, r1
 800ae12:	492f      	ldr	r1, [pc, #188]	; (800aed0 <rint+0x100>)
 800ae14:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ae18:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	4639      	mov	r1, r7
 800ae20:	4630      	mov	r0, r6
 800ae22:	f7f5 fa33 	bl	800028c <__adddf3>
 800ae26:	e9cd 0100 	strd	r0, r1, [sp]
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae32:	f7f5 fa29 	bl	8000288 <__aeabi_dsub>
 800ae36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ae3e:	4639      	mov	r1, r7
 800ae40:	ec41 0b10 	vmov	d0, r0, r1
 800ae44:	b003      	add	sp, #12
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae48:	4a22      	ldr	r2, [pc, #136]	; (800aed4 <rint+0x104>)
 800ae4a:	4132      	asrs	r2, r6
 800ae4c:	ea01 0702 	and.w	r7, r1, r2
 800ae50:	4307      	orrs	r7, r0
 800ae52:	d0f5      	beq.n	800ae40 <rint+0x70>
 800ae54:	0852      	lsrs	r2, r2, #1
 800ae56:	4011      	ands	r1, r2
 800ae58:	430c      	orrs	r4, r1
 800ae5a:	d00b      	beq.n	800ae74 <rint+0xa4>
 800ae5c:	ea23 0202 	bic.w	r2, r3, r2
 800ae60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae64:	2e13      	cmp	r6, #19
 800ae66:	fa43 f306 	asr.w	r3, r3, r6
 800ae6a:	bf0c      	ite	eq
 800ae6c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ae70:	2400      	movne	r4, #0
 800ae72:	4313      	orrs	r3, r2
 800ae74:	4916      	ldr	r1, [pc, #88]	; (800aed0 <rint+0x100>)
 800ae76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae80:	4620      	mov	r0, r4
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7f5 fa02 	bl	800028c <__adddf3>
 800ae88:	e9cd 0100 	strd	r0, r1, [sp]
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	462b      	mov	r3, r5
 800ae90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	e7d2      	b.n	800ae40 <rint+0x70>
 800ae9a:	2e33      	cmp	r6, #51	; 0x33
 800ae9c:	dd07      	ble.n	800aeae <rint+0xde>
 800ae9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aea2:	d1cd      	bne.n	800ae40 <rint+0x70>
 800aea4:	ee10 2a10 	vmov	r2, s0
 800aea8:	f7f5 f9f0 	bl	800028c <__adddf3>
 800aeac:	e7c8      	b.n	800ae40 <rint+0x70>
 800aeae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800aeb2:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb6:	40f2      	lsrs	r2, r6
 800aeb8:	4210      	tst	r0, r2
 800aeba:	d0c1      	beq.n	800ae40 <rint+0x70>
 800aebc:	0852      	lsrs	r2, r2, #1
 800aebe:	4210      	tst	r0, r2
 800aec0:	bf1f      	itttt	ne
 800aec2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800aec6:	ea20 0202 	bicne.w	r2, r0, r2
 800aeca:	4134      	asrne	r4, r6
 800aecc:	4314      	orrne	r4, r2
 800aece:	e7d1      	b.n	800ae74 <rint+0xa4>
 800aed0:	0800b090 	.word	0x0800b090
 800aed4:	000fffff 	.word	0x000fffff

0800aed8 <scalbn>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	ec55 4b10 	vmov	r4, r5, d0
 800aede:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aee2:	4606      	mov	r6, r0
 800aee4:	462b      	mov	r3, r5
 800aee6:	b9aa      	cbnz	r2, 800af14 <scalbn+0x3c>
 800aee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aeec:	4323      	orrs	r3, r4
 800aeee:	d03b      	beq.n	800af68 <scalbn+0x90>
 800aef0:	4b31      	ldr	r3, [pc, #196]	; (800afb8 <scalbn+0xe0>)
 800aef2:	4629      	mov	r1, r5
 800aef4:	2200      	movs	r2, #0
 800aef6:	ee10 0a10 	vmov	r0, s0
 800aefa:	f7f5 fb7d 	bl	80005f8 <__aeabi_dmul>
 800aefe:	4b2f      	ldr	r3, [pc, #188]	; (800afbc <scalbn+0xe4>)
 800af00:	429e      	cmp	r6, r3
 800af02:	4604      	mov	r4, r0
 800af04:	460d      	mov	r5, r1
 800af06:	da12      	bge.n	800af2e <scalbn+0x56>
 800af08:	a327      	add	r3, pc, #156	; (adr r3, 800afa8 <scalbn+0xd0>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 fb73 	bl	80005f8 <__aeabi_dmul>
 800af12:	e009      	b.n	800af28 <scalbn+0x50>
 800af14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800af18:	428a      	cmp	r2, r1
 800af1a:	d10c      	bne.n	800af36 <scalbn+0x5e>
 800af1c:	ee10 2a10 	vmov	r2, s0
 800af20:	4620      	mov	r0, r4
 800af22:	4629      	mov	r1, r5
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	e01c      	b.n	800af68 <scalbn+0x90>
 800af2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af32:	460b      	mov	r3, r1
 800af34:	3a36      	subs	r2, #54	; 0x36
 800af36:	4432      	add	r2, r6
 800af38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800af3c:	428a      	cmp	r2, r1
 800af3e:	dd0b      	ble.n	800af58 <scalbn+0x80>
 800af40:	ec45 4b11 	vmov	d1, r4, r5
 800af44:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800afb0 <scalbn+0xd8>
 800af48:	f000 f83c 	bl	800afc4 <copysign>
 800af4c:	a318      	add	r3, pc, #96	; (adr r3, 800afb0 <scalbn+0xd8>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	ec51 0b10 	vmov	r0, r1, d0
 800af56:	e7da      	b.n	800af0e <scalbn+0x36>
 800af58:	2a00      	cmp	r2, #0
 800af5a:	dd08      	ble.n	800af6e <scalbn+0x96>
 800af5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af68:	ec45 4b10 	vmov	d0, r4, r5
 800af6c:	bd70      	pop	{r4, r5, r6, pc}
 800af6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800af72:	da0d      	bge.n	800af90 <scalbn+0xb8>
 800af74:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af78:	429e      	cmp	r6, r3
 800af7a:	ec45 4b11 	vmov	d1, r4, r5
 800af7e:	dce1      	bgt.n	800af44 <scalbn+0x6c>
 800af80:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800afa8 <scalbn+0xd0>
 800af84:	f000 f81e 	bl	800afc4 <copysign>
 800af88:	a307      	add	r3, pc, #28	; (adr r3, 800afa8 <scalbn+0xd0>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e7e0      	b.n	800af52 <scalbn+0x7a>
 800af90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af94:	3236      	adds	r2, #54	; 0x36
 800af96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af9e:	4620      	mov	r0, r4
 800afa0:	4629      	mov	r1, r5
 800afa2:	2200      	movs	r2, #0
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <scalbn+0xe8>)
 800afa6:	e7b2      	b.n	800af0e <scalbn+0x36>
 800afa8:	c2f8f359 	.word	0xc2f8f359
 800afac:	01a56e1f 	.word	0x01a56e1f
 800afb0:	8800759c 	.word	0x8800759c
 800afb4:	7e37e43c 	.word	0x7e37e43c
 800afb8:	43500000 	.word	0x43500000
 800afbc:	ffff3cb0 	.word	0xffff3cb0
 800afc0:	3c900000 	.word	0x3c900000

0800afc4 <copysign>:
 800afc4:	ec51 0b10 	vmov	r0, r1, d0
 800afc8:	ee11 0a90 	vmov	r0, s3
 800afcc:	ee10 2a10 	vmov	r2, s0
 800afd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800afd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800afd8:	ea41 0300 	orr.w	r3, r1, r0
 800afdc:	ec43 2b10 	vmov	d0, r2, r3
 800afe0:	4770      	bx	lr
	...

0800afe4 <_init>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	bf00      	nop
 800afe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afea:	bc08      	pop	{r3}
 800afec:	469e      	mov	lr, r3
 800afee:	4770      	bx	lr

0800aff0 <_fini>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr
